{"timestamp":"2025-09-30T16:36:02.064347","level":"info","event":"DAG bundles loaded: dags-folder","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-09-30T16:36:02.065072","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/truncate_tables.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-09-30T16:36:02.145160","level":"warning","event":"/home/airflow/.local/lib/python3.12/site-packages/airflow/models/connection.py:471: DeprecationWarning: Using Connection.get_connection_from_secrets from `airflow.models` is deprecated.Please use `get` on Connection from sdk(`airflow.sdk.Connection`) instead\n  warnings.warn(\n","logger":"py.warnings"}
{"timestamp":"2025-09-30T16:36:02.318443","level":"warning","event":"empty cryptography key - values will not be stored encrypted.","logger":"airflow.models.crypto"}
{"timestamp":"2025-09-30T16:36:02.320774","level":"info","event":"Connection Retrieved 'mysql_trn'","logger":"airflow.hooks.base"}
{"timestamp":"2025-09-30T16:36:02.321077","level":"warning","event":"This setter is for backward compatibility and should not be used.\nSince the introduction of connection property, the providers listed below breaks due to assigning value to self.connection in their __init__ method.\n* apache-airflow-providers-mysql<5.7.1\n* apache-airflow-providers-elasticsearch<5.5.1\n* apache-airflow-providers-postgres<5.13.0","logger":"airflow.task.hooks.airflow.providers.mysql.hooks.mysql.MySqlHook"}
{"timestamp":"2025-09-30T16:36:02.338911Z","level":"info","event":"[REVIEW] Table covertype_raw: 0 rows, 15 columns","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T16:36:02.344214Z","level":"info","event":"[REVIEW] Table covertype_clean: 0 rows, 15 columns","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T16:36:02.345562Z","level":"info","event":"[REVIEW] ============ TABLE REVIEW SUMMARY ============","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T16:36:02.348169Z","level":"info","event":"[REVIEW] COVERTYPE_RAW: 0 rows × 15 columns","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T16:36:02.348821Z","level":"info","event":"[REVIEW] COVERTYPE_CLEAN: 0 rows × 15 columns","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T16:36:02.349373Z","level":"info","event":"[REVIEW] ===============================================","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T16:36:02.343208","level":"info","event":"Done. Returned value was: {'covertype_raw': {'rows': 0, 'columns': 15}, 'covertype_clean': {'rows': 0, 'columns': 15}}","logger":"airflow.task.operators.airflow.providers.standard.operators.python.PythonOperator"}
{"timestamp":"2025-09-30T16:36:02.343728","level":"info","event":"Pushing xcom","ti":"RuntimeTaskInstance(id=UUID('01999b7b-0ea5-7396-a3fc-ac088d17109c'), task_id='review_tables_after', dag_id='covertype_truncate_tables', run_id='manual__2025-09-30T16:35:57.177058+00:00', try_number=1, map_index=-1, hostname='10c0a42c4606', context_carrier={}, task=<Task(PythonOperator): review_tables_after>, bundle_instance=LocalDagBundle(name=dags-folder), max_tries=0, start_date=datetime.datetime(2025, 9, 30, 16, 36, 1, 840181, tzinfo=datetime.timezone.utc), end_date=None, state=<TaskInstanceState.RUNNING: 'running'>, is_mapped=False, rendered_map_index=None, log_url='http://localhost:8080/dags/covertype_truncate_tables/runs/manual__2025-09-30T16%3A35%3A57.177058%2B00%3A00/tasks/review_tables_after?try_number=1')","logger":"task"}
