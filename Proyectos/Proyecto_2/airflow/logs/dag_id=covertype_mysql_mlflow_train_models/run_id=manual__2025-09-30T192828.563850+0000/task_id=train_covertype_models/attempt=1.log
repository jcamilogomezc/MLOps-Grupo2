{"timestamp":"2025-09-30T19:29:36.016151","level":"info","event":"DAG bundles loaded: dags-folder","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-09-30T19:29:36.017074","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/ETL_Training.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-09-30T19:29:39.511298Z","level":"info","event":"[INFO] batch_number from context: 6","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:29:39.933427","level":"warning","event":"/home/airflow/.local/lib/python3.12/site-packages/airflow/models/connection.py:471: DeprecationWarning: Using Connection.get_connection_from_secrets from `airflow.models` is deprecated.Please use `get` on Connection from sdk(`airflow.sdk.Connection`) instead\n  warnings.warn(\n","logger":"py.warnings"}
{"timestamp":"2025-09-30T19:29:40.214337","level":"warning","event":"empty cryptography key - values will not be stored encrypted.","logger":"airflow.models.crypto"}
{"timestamp":"2025-09-30T19:29:40.220902","level":"info","event":"Connection Retrieved 'mysql_trn'","logger":"airflow.hooks.base"}
{"timestamp":"2025-09-30T19:29:40.221929","level":"warning","event":"This setter is for backward compatibility and should not be used.\nSince the introduction of connection property, the providers listed below breaks due to assigning value to self.connection in their __init__ method.\n* apache-airflow-providers-mysql<5.7.1\n* apache-airflow-providers-elasticsearch<5.5.1\n* apache-airflow-providers-postgres<5.13.0","logger":"airflow.task.hooks.airflow.providers.mysql.hooks.mysql.MySqlHook"}
{"timestamp":"2025-09-30T19:29:40.263685","level":"warning","event":"/opt/airflow/dags/ETL_Training.py:464: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n  df = pd.read_sql(\"\"\"\n","logger":"py.warnings"}
{"timestamp":"2025-09-30T19:29:40.299499Z","level":"info","event":"[TRAIN] Loaded 663 samples from covertype_clean","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:29:40.301976Z","level":"info","event":"[TRAIN] Features shape: (663, 12)","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:29:40.308785Z","level":"info","event":"[TRAIN] Target distribution:","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:29:40.309355Z","level":"info","event":"cover_type","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:29:40.309876Z","level":"info","event":"0    158","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:29:40.310324Z","level":"info","event":"1     83","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:29:40.310688Z","level":"info","event":"2     85","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:29:40.311047Z","level":"info","event":"4    116","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:29:40.311397Z","level":"info","event":"5     70","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:29:40.311874Z","level":"info","event":"6    151","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:29:40.312194Z","level":"info","event":"Name: count, dtype: int64","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:29:40.317950Z","level":"info","event":"[TRAIN] Training logreg...","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:29:50.215320Z","level":"error","event":"2025/09/30 19:29:50 WARNING mlflow.models.model: `artifact_path` is deprecated. Please use `name` instead.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T19:30:06.920526Z","level":"error","event":"\u001b[31m2025/09/30 19:30:06 WARNING mlflow.models.model: Model logged without a signature and input example. Please set `input_example` parameter when logging the model to auto infer the model signature.\u001b[0m","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T19:30:09.805073Z","level":"info","event":"[TRAIN] Model logreg logged to MLflow successfully","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:30:09.805679Z","level":"info","event":"[TRAIN] logreg - Accuracy: 0.7444, F1-macro: 0.7176, Run ID: e57cf5ac6d384ce8adb4de4795bda8d8","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:30:09.897816Z","level":"info","event":"🏃 View run bn6_logreg at: http://mlflow:5000/#/experiments/1/runs/e57cf5ac6d384ce8adb4de4795bda8d8","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:30:09.898520Z","level":"info","event":"🧪 View experiment at: http://mlflow:5000/#/experiments/1","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:30:10.005812Z","level":"info","event":"[TRAIN] Training rf...","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:30:22.361970Z","level":"error","event":"2025/09/30 19:30:22 WARNING mlflow.models.model: `artifact_path` is deprecated. Please use `name` instead.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T19:30:30.940672Z","level":"error","event":"\u001b[31m2025/09/30 19:30:30 WARNING mlflow.models.model: Model logged without a signature and input example. Please set `input_example` parameter when logging the model to auto infer the model signature.\u001b[0m","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T19:30:31.694722Z","level":"info","event":"[TRAIN] Model rf logged to MLflow successfully","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:30:31.695853Z","level":"info","event":"[TRAIN] rf - Accuracy: 0.8496, F1-macro: 0.8347, Run ID: 6bd1ef711e044ca2a7ae6cd9a6a56474","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:30:31.827942Z","level":"info","event":"🏃 View run bn6_rf at: http://mlflow:5000/#/experiments/1/runs/6bd1ef711e044ca2a7ae6cd9a6a56474","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:30:31.829577Z","level":"info","event":"🧪 View experiment at: http://mlflow:5000/#/experiments/1","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:30:31.932165Z","level":"info","event":"[TRAIN] Training svc...","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:30:42.519773Z","level":"error","event":"2025/09/30 19:30:42 WARNING mlflow.models.model: `artifact_path` is deprecated. Please use `name` instead.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T19:30:49.976200Z","level":"error","event":"\u001b[31m2025/09/30 19:30:49 WARNING mlflow.models.model: Model logged without a signature and input example. Please set `input_example` parameter when logging the model to auto infer the model signature.\u001b[0m","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T19:30:50.517915Z","level":"info","event":"[TRAIN] Model svc logged to MLflow successfully","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:30:50.518600Z","level":"info","event":"[TRAIN] svc - Accuracy: 0.7669, F1-macro: 0.7392, Run ID: 34fde48bd51d459a8a2e313ec118ac44","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:30:50.575151Z","level":"info","event":"🏃 View run bn6_svc at: http://mlflow:5000/#/experiments/1/runs/34fde48bd51d459a8a2e313ec118ac44","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:30:50.575827Z","level":"info","event":"🧪 View experiment at: http://mlflow:5000/#/experiments/1","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:30:50.667325Z","level":"info","event":"[TRAIN] Training knn...","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:30:59.803543Z","level":"error","event":"2025/09/30 19:30:59 WARNING mlflow.models.model: `artifact_path` is deprecated. Please use `name` instead.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T19:31:07.020616Z","level":"error","event":"\u001b[31m2025/09/30 19:31:07 WARNING mlflow.models.model: Model logged without a signature and input example. Please set `input_example` parameter when logging the model to auto infer the model signature.\u001b[0m","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T19:31:07.668414Z","level":"info","event":"[TRAIN] Model knn logged to MLflow successfully","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:31:07.669667Z","level":"info","event":"[TRAIN] knn - Accuracy: 0.7293, F1-macro: 0.7076, Run ID: 58a42bd4897249da9664a67f5965522d","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:31:07.774542Z","level":"info","event":"🏃 View run bn6_knn at: http://mlflow:5000/#/experiments/1/runs/58a42bd4897249da9664a67f5965522d","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:31:07.775854Z","level":"info","event":"🧪 View experiment at: http://mlflow:5000/#/experiments/1","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:31:07.857926Z","level":"info","event":"[TRAIN] Training adaboost...","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:31:08.056937Z","level":"error","event":"/home/airflow/.local/lib/python3.12/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T19:31:08.058209Z","level":"error","event":"  warnings.warn(","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T19:31:09.468972Z","level":"error","event":"/home/airflow/.local/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T19:31:09.469598Z","level":"error","event":"  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T19:31:09.472152Z","level":"error","event":"/home/airflow/.local/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T19:31:09.472698Z","level":"error","event":"  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T19:31:09.473881Z","level":"error","event":"/home/airflow/.local/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T19:31:09.474470Z","level":"error","event":"  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T19:31:16.061086Z","level":"error","event":"2025/09/30 19:31:16 WARNING mlflow.models.model: `artifact_path` is deprecated. Please use `name` instead.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T19:31:23.969013Z","level":"error","event":"\u001b[31m2025/09/30 19:31:23 WARNING mlflow.models.model: Model logged without a signature and input example. Please set `input_example` parameter when logging the model to auto infer the model signature.\u001b[0m","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T19:31:24.500867Z","level":"info","event":"[TRAIN] Model adaboost logged to MLflow successfully","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:31:24.501620Z","level":"info","event":"[TRAIN] adaboost - Accuracy: 0.3759, F1-macro: 0.1859, Run ID: ae238cfb10244841898f472c19d92047","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:31:24.577490Z","level":"info","event":"🏃 View run bn6_adaboost at: http://mlflow:5000/#/experiments/1/runs/ae238cfb10244841898f472c19d92047","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:31:24.578256Z","level":"info","event":"🧪 View experiment at: http://mlflow:5000/#/experiments/1","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:31:24.786143Z","level":"error","event":"Registered model 'CovertypeClassifier' already exists. Creating a new version of this model...","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T19:31:25.214199Z","level":"error","event":"2025/09/30 19:31:25 WARNING mlflow.tracking._model_registry.fluent: Run with id 6bd1ef711e044ca2a7ae6cd9a6a56474 has no artifacts at artifact path 'model', registering model based on models:/m-3accd8e9e9ab4919843ba1680f18279a instead","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T19:31:25.521295Z","level":"error","event":"2025/09/30 19:31:25 INFO mlflow.store.model_registry.abstract_store: Waiting up to 300 seconds for model version to finish creation. Model name: CovertypeClassifier, version 2","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T19:31:25.524062Z","level":"error","event":"Created version '2' of model 'CovertypeClassifier'.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T19:31:25.721370Z","level":"info","event":"[REGISTRY] Best model 'rf' registered as version 2 (Run ID: 6bd1ef711e044ca2a7ae6cd9a6a56474)","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:31:25.725865Z","level":"error","event":"/opt/airflow/dags/ETL_Training.py:637: FutureWarning: ``mlflow.tracking.client.MlflowClient.get_latest_versions`` is deprecated since 2.9.0. Model registry stages will be removed in a future major release. To learn more about the deprecation of model registry stages, see our migration guide here: https://mlflow.org/docs/latest/model-registry.html#migrating-from-stages","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T19:31:25.727066Z","level":"error","event":"  latest_versions = client.get_latest_versions(","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T19:31:25.816642Z","level":"info","event":"[HISTORICAL] Could not load existing historical data: RESOURCE_DOES_NOT_EXIST: Registered Model with name=historical_model_comparison not found. Creating new historical record.","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:31:27.050830Z","level":"info","event":"🏃 View run historical_comparison_batch_6 at: http://mlflow:5000/#/experiments/1/runs/d4763d80c73f4eb88972ef193cd19dc4","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:31:27.052559Z","level":"info","event":"🧪 View experiment at: http://mlflow:5000/#/experiments/1","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:31:27.172934","level":"error","event":"Task failed with exception","logger":"task","error_detail":[{"exc_type":"MlflowException","exc_value":"Invalid artifact path: '.'. Names may be treated as files in certain cases, and must not resolve to other names when treated as such. This name would resolve to '.'","exc_notes":[],"syntax_error":null,"is_cause":false,"frames":[{"filename":"/home/airflow/.local/lib/python3.12/site-packages/airflow/sdk/execution_time/task_runner.py","lineno":920,"name":"run"},{"filename":"/home/airflow/.local/lib/python3.12/site-packages/airflow/sdk/execution_time/task_runner.py","lineno":1215,"name":"_execute_task"},{"filename":"/home/airflow/.local/lib/python3.12/site-packages/airflow/sdk/bases/operator.py","lineno":397,"name":"wrapper"},{"filename":"/home/airflow/.local/lib/python3.12/site-packages/airflow/providers/standard/operators/python.py","lineno":216,"name":"execute"},{"filename":"/home/airflow/.local/lib/python3.12/site-packages/airflow/providers/standard/operators/python.py","lineno":239,"name":"execute_callable"},{"filename":"/home/airflow/.local/lib/python3.12/site-packages/airflow/sdk/execution_time/callback_runner.py","lineno":81,"name":"run"},{"filename":"/opt/airflow/dags/ETL_Training.py","lineno":701,"name":"train_covertype_models"},{"filename":"/home/airflow/.local/lib/python3.12/site-packages/mlflow/tracking/fluent.py","lineno":1429,"name":"log_artifact"},{"filename":"/home/airflow/.local/lib/python3.12/site-packages/mlflow/tracking/client.py","lineno":2497,"name":"log_artifact"},{"filename":"/home/airflow/.local/lib/python3.12/site-packages/mlflow/tracking/_tracking_service/client.py","lineno":674,"name":"log_artifact"},{"filename":"/home/airflow/.local/lib/python3.12/site-packages/mlflow/store/artifact/http_artifact_repo.py","lineno":43,"name":"log_artifact"},{"filename":"/home/airflow/.local/lib/python3.12/site-packages/mlflow/store/artifact/artifact_repo.py","lineno":470,"name":"verify_artifact_path"}],"is_group":false,"exceptions":[]}]}
