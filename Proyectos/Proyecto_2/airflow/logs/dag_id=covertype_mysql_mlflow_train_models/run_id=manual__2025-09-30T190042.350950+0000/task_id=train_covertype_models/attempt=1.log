{"timestamp":"2025-09-30T19:01:05.988342","level":"info","event":"DAG bundles loaded: dags-folder","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-09-30T19:01:05.989439","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/ETL_Training.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-09-30T19:01:08.314210Z","level":"info","event":"[INFO] batch_number from context: 5","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:01:08.404252Z","level":"error","event":"2025/09/30 19:01:08 INFO mlflow.tracking.fluent: Experiment with name 'covertype_classification' does not exist. Creating a new experiment.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T19:01:08.614659","level":"warning","event":"/home/airflow/.local/lib/python3.12/site-packages/airflow/models/connection.py:471: DeprecationWarning: Using Connection.get_connection_from_secrets from `airflow.models` is deprecated.Please use `get` on Connection from sdk(`airflow.sdk.Connection`) instead\n  warnings.warn(\n","logger":"py.warnings"}
{"timestamp":"2025-09-30T19:01:09.047058","level":"warning","event":"empty cryptography key - values will not be stored encrypted.","logger":"airflow.models.crypto"}
{"timestamp":"2025-09-30T19:01:09.049184","level":"info","event":"Connection Retrieved 'mysql_trn'","logger":"airflow.hooks.base"}
{"timestamp":"2025-09-30T19:01:09.049366","level":"warning","event":"This setter is for backward compatibility and should not be used.\nSince the introduction of connection property, the providers listed below breaks due to assigning value to self.connection in their __init__ method.\n* apache-airflow-providers-mysql<5.7.1\n* apache-airflow-providers-elasticsearch<5.5.1\n* apache-airflow-providers-postgres<5.13.0","logger":"airflow.task.hooks.airflow.providers.mysql.hooks.mysql.MySqlHook"}
{"timestamp":"2025-09-30T19:01:09.069835","level":"warning","event":"/opt/airflow/dags/ETL_Training.py:252: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n  df = pd.read_sql(\"\"\"\n","logger":"py.warnings"}
{"timestamp":"2025-09-30T19:01:09.078675Z","level":"info","event":"[TRAIN] Loaded 228 samples from covertype_clean","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:01:09.080848Z","level":"info","event":"[TRAIN] Features shape: (228, 12)","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:01:09.086211Z","level":"info","event":"[TRAIN] Target distribution:","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:01:09.086851Z","level":"info","event":"cover_type","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:01:09.087432Z","level":"info","event":"0    57","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:01:09.088029Z","level":"info","event":"1    31","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:01:09.088580Z","level":"info","event":"2    28","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:01:09.089192Z","level":"info","event":"4    36","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:01:09.089774Z","level":"info","event":"5    24","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:01:09.090263Z","level":"info","event":"6    52","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:01:09.090849Z","level":"info","event":"Name: count, dtype: int64","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:01:09.093806Z","level":"info","event":"[TRAIN] Training logreg...","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:01:18.153179Z","level":"error","event":"2025/09/30 19:01:18 WARNING mlflow.models.model: `artifact_path` is deprecated. Please use `name` instead.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T19:01:32.358243Z","level":"error","event":"\u001b[31m2025/09/30 19:01:32 WARNING mlflow.models.model: Model logged without a signature and input example. Please set `input_example` parameter when logging the model to auto infer the model signature.\u001b[0m","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T19:01:34.646987Z","level":"info","event":"[TRAIN] Model logreg logged to MLflow successfully","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:01:34.647579Z","level":"info","event":"[TRAIN] logreg - Accuracy: 0.6739, F1-macro: 0.6195, Run ID: 7571c3ae5fb440afbdbaf138764e4f2f","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:01:34.732574Z","level":"info","event":"🏃 View run bn5_logreg at: http://mlflow:5000/#/experiments/1/runs/7571c3ae5fb440afbdbaf138764e4f2f","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:01:34.733502Z","level":"info","event":"🧪 View experiment at: http://mlflow:5000/#/experiments/1","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:01:34.832575Z","level":"info","event":"[TRAIN] Training rf...","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:01:43.398159Z","level":"error","event":"2025/09/30 19:01:43 WARNING mlflow.models.model: `artifact_path` is deprecated. Please use `name` instead.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T19:01:53.296465Z","level":"error","event":"\u001b[31m2025/09/30 19:01:53 WARNING mlflow.models.model: Model logged without a signature and input example. Please set `input_example` parameter when logging the model to auto infer the model signature.\u001b[0m","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T19:01:54.940706Z","level":"info","event":"[TRAIN] Model rf logged to MLflow successfully","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:01:54.941334Z","level":"info","event":"[TRAIN] rf - Accuracy: 0.6957, F1-macro: 0.6451, Run ID: d9c10b26805340b6820d622106826487","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:01:55.051025Z","level":"info","event":"🏃 View run bn5_rf at: http://mlflow:5000/#/experiments/1/runs/d9c10b26805340b6820d622106826487","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:01:55.051668Z","level":"info","event":"🧪 View experiment at: http://mlflow:5000/#/experiments/1","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:01:55.186034Z","level":"info","event":"[TRAIN] Training svc...","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:02:06.950051Z","level":"error","event":"2025/09/30 19:02:06 WARNING mlflow.models.model: `artifact_path` is deprecated. Please use `name` instead.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T19:02:15.186481Z","level":"error","event":"\u001b[31m2025/09/30 19:02:15 WARNING mlflow.models.model: Model logged without a signature and input example. Please set `input_example` parameter when logging the model to auto infer the model signature.\u001b[0m","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T19:02:15.928080Z","level":"info","event":"[TRAIN] Model svc logged to MLflow successfully","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:02:15.929556Z","level":"info","event":"[TRAIN] svc - Accuracy: 0.5652, F1-macro: 0.4752, Run ID: ff89580a563340b498d5728e4ec1185e","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:02:16.077107Z","level":"info","event":"🏃 View run bn5_svc at: http://mlflow:5000/#/experiments/1/runs/ff89580a563340b498d5728e4ec1185e","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:02:16.078274Z","level":"info","event":"🧪 View experiment at: http://mlflow:5000/#/experiments/1","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:02:16.227445Z","level":"info","event":"[TRAIN] Training knn...","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:02:26.971394Z","level":"error","event":"2025/09/30 19:02:26 WARNING mlflow.models.model: `artifact_path` is deprecated. Please use `name` instead.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T19:02:35.710415Z","level":"error","event":"\u001b[31m2025/09/30 19:02:35 WARNING mlflow.models.model: Model logged without a signature and input example. Please set `input_example` parameter when logging the model to auto infer the model signature.\u001b[0m","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T19:02:36.342065Z","level":"info","event":"[TRAIN] Model knn logged to MLflow successfully","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:02:36.343586Z","level":"info","event":"[TRAIN] knn - Accuracy: 0.3913, F1-macro: 0.3618, Run ID: 75ba2d11b64f4ab294db0c5429b564e4","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:02:36.508102Z","level":"info","event":"🏃 View run bn5_knn at: http://mlflow:5000/#/experiments/1/runs/75ba2d11b64f4ab294db0c5429b564e4","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:02:36.509662Z","level":"info","event":"🧪 View experiment at: http://mlflow:5000/#/experiments/1","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:02:36.645107Z","level":"info","event":"[TRAIN] Training adaboost...","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:02:36.780282Z","level":"error","event":"/home/airflow/.local/lib/python3.12/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T19:02:36.786592Z","level":"error","event":"  warnings.warn(","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T19:02:38.098685Z","level":"error","event":"/home/airflow/.local/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T19:02:38.099394Z","level":"error","event":"  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T19:02:38.117847Z","level":"error","event":"/home/airflow/.local/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T19:02:38.118404Z","level":"error","event":"  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T19:02:38.118952Z","level":"error","event":"/home/airflow/.local/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T19:02:38.119525Z","level":"error","event":"  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T19:02:45.032437Z","level":"error","event":"2025/09/30 19:02:45 WARNING mlflow.models.model: `artifact_path` is deprecated. Please use `name` instead.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T19:02:53.008948Z","level":"error","event":"\u001b[31m2025/09/30 19:02:53 WARNING mlflow.models.model: Model logged without a signature and input example. Please set `input_example` parameter when logging the model to auto infer the model signature.\u001b[0m","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T19:02:53.635181Z","level":"info","event":"[TRAIN] Model adaboost logged to MLflow successfully","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:02:53.635841Z","level":"info","event":"[TRAIN] adaboost - Accuracy: 0.4130, F1-macro: 0.2328, Run ID: 85f50f9359614e53af2f42bba8766f5b","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:02:53.714403Z","level":"info","event":"🏃 View run bn5_adaboost at: http://mlflow:5000/#/experiments/1/runs/85f50f9359614e53af2f42bba8766f5b","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:02:53.715063Z","level":"info","event":"🧪 View experiment at: http://mlflow:5000/#/experiments/1","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:02:53.926443Z","level":"error","event":"Successfully registered model 'CovertypeClassifier'.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T19:02:54.388799Z","level":"error","event":"2025/09/30 19:02:54 WARNING mlflow.tracking._model_registry.fluent: Run with id d9c10b26805340b6820d622106826487 has no artifacts at artifact path 'model', registering model based on models:/m-fe4a201926234565a2d989f2fba15943 instead","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T19:02:54.640787Z","level":"error","event":"2025/09/30 19:02:54 INFO mlflow.store.model_registry.abstract_store: Waiting up to 300 seconds for model version to finish creation. Model name: CovertypeClassifier, version 1","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T19:02:54.643518Z","level":"error","event":"Created version '1' of model 'CovertypeClassifier'.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T19:02:54.848917Z","level":"info","event":"[REGISTRY] Best model 'rf' registered as version 1 (Run ID: d9c10b26805340b6820d622106826487)","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:02:56.042884Z","level":"info","event":"🏃 View run bn5_model_comparison at: http://mlflow:5000/#/experiments/1/runs/517d8fb36d22469084e61c2d3d5b2f94","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:02:56.043607Z","level":"info","event":"🧪 View experiment at: http://mlflow:5000/#/experiments/1","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:02:56.136328Z","level":"info","event":"","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:02:56.137086Z","level":"info","event":"[METRICS] Model Performance Summary:","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:02:56.143677Z","level":"info","event":"   model  accuracy  f1_macro  train_size  test_size                           run_id","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:02:56.144276Z","level":"info","event":"      rf  0.695652  0.645095         182         46 d9c10b26805340b6820d622106826487","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:02:56.144748Z","level":"info","event":"  logreg  0.673913  0.619493         182         46 7571c3ae5fb440afbdbaf138764e4f2f","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:02:56.145176Z","level":"info","event":"     svc  0.565217  0.475188         182         46 ff89580a563340b498d5728e4ec1185e","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:02:56.145642Z","level":"info","event":"     knn  0.391304  0.361832         182         46 75ba2d11b64f4ab294db0c5429b564e4","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:02:56.146039Z","level":"info","event":"adaboost  0.413043  0.232804         182         46 85f50f9359614e53af2f42bba8766f5b","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:02:56.146435Z","level":"info","event":"","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:02:56.146858Z","level":"info","event":"[BEST] rf (f1_macro=0.6451) registered to model registry","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:02:56.147294Z","level":"info","event":"[BEST] Run ID: d9c10b26805340b6820d622106826487","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:02:56.149918","level":"info","event":"Done. Returned value was: {'best_model': 'rf', 'best_f1_score': 0.6450946112710819, 'best_run_id': 'd9c10b26805340b6820d622106826487', 'total_models_trained': 5, 'metrics': [{'model': 'rf', 'accuracy': 0.6956521739130435, 'f1_macro': 0.6450946112710819, 'train_size': 182, 'test_size': 46, 'run_id': 'd9c10b26805340b6820d622106826487'}, {'model': 'logreg', 'accuracy': 0.6739130434782609, 'f1_macro': 0.6194930069930069, 'train_size': 182, 'test_size': 46, 'run_id': '7571c3ae5fb440afbdbaf138764e4f2f'}, {'model': 'svc', 'accuracy': 0.5652173913043478, 'f1_macro': 0.47518796992481205, 'train_size': 182, 'test_size': 46, 'run_id': 'ff89580a563340b498d5728e4ec1185e'}, {'model': 'knn', 'accuracy': 0.391304347826087, 'f1_macro': 0.36183247424666193, 'train_size': 182, 'test_size': 46, 'run_id': '75ba2d11b64f4ab294db0c5429b564e4'}, {'model': 'adaboost', 'accuracy': 0.41304347826086957, 'f1_macro': 0.2328042328042328, 'train_size': 182, 'test_size': 46, 'run_id': '85f50f9359614e53af2f42bba8766f5b'}]}","logger":"airflow.task.operators.airflow.providers.standard.operators.python.PythonOperator"}
{"timestamp":"2025-09-30T19:02:56.150534","level":"info","event":"Pushing xcom","ti":"RuntimeTaskInstance(id=UUID('01999bff-9535-747f-aaf0-fe4dae0d1a53'), task_id='train_covertype_models', dag_id='covertype_mysql_mlflow_train_models', run_id='manual__2025-09-30T19:00:42.350950+00:00', try_number=1, map_index=-1, hostname='54e8980f5736', context_carrier={}, task=<Task(PythonOperator): train_covertype_models>, bundle_instance=LocalDagBundle(name=dags-folder), max_tries=0, start_date=datetime.datetime(2025, 9, 30, 19, 1, 5, 700146, tzinfo=datetime.timezone.utc), end_date=None, state=<TaskInstanceState.RUNNING: 'running'>, is_mapped=False, rendered_map_index=None, log_url='http://localhost:8080/dags/covertype_mysql_mlflow_train_models/runs/manual__2025-09-30T19%3A00%3A42.350950%2B00%3A00/tasks/train_covertype_models?try_number=1')","logger":"task"}
