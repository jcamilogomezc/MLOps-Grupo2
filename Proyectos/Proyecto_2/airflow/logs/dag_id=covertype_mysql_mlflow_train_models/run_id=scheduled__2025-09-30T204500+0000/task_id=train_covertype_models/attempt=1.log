{"timestamp":"2025-09-30T20:53:53.790961","level":"info","event":"DAG bundles loaded: dags-folder","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-09-30T20:53:53.791738","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/ETL_Training.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-09-30T20:53:56.763257Z","level":"info","event":"[INFO] batch_number from context: 1","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:53:57.402105Z","level":"error","event":"2025/09/30 20:53:57 INFO mlflow.tracking.fluent: Experiment with name 'covertype_classification' does not exist. Creating a new experiment.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T20:53:57.693312","level":"warning","event":"/home/airflow/.local/lib/python3.12/site-packages/airflow/models/connection.py:471: DeprecationWarning: Using Connection.get_connection_from_secrets from `airflow.models` is deprecated.Please use `get` on Connection from sdk(`airflow.sdk.Connection`) instead\n  warnings.warn(\n","logger":"py.warnings"}
{"timestamp":"2025-09-30T20:53:57.973297","level":"warning","event":"empty cryptography key - values will not be stored encrypted.","logger":"airflow.models.crypto"}
{"timestamp":"2025-09-30T20:53:57.975508","level":"info","event":"Connection Retrieved 'mysql_trn'","logger":"airflow.hooks.base"}
{"timestamp":"2025-09-30T20:53:57.975838","level":"warning","event":"This setter is for backward compatibility and should not be used.\nSince the introduction of connection property, the providers listed below breaks due to assigning value to self.connection in their __init__ method.\n* apache-airflow-providers-mysql<5.7.1\n* apache-airflow-providers-elasticsearch<5.5.1\n* apache-airflow-providers-postgres<5.13.0","logger":"airflow.task.hooks.airflow.providers.mysql.hooks.mysql.MySqlHook"}
{"timestamp":"2025-09-30T20:53:58.002444","level":"warning","event":"/opt/airflow/dags/ETL_Training.py:273: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n  df = pd.read_sql(\"\"\"\n","logger":"py.warnings"}
{"timestamp":"2025-09-30T20:53:58.013536Z","level":"info","event":"[TRAIN] Loaded 217 samples from covertype_clean","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:53:58.019475Z","level":"info","event":"[TRAIN] Features shape: (217, 12)","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:53:58.025448Z","level":"info","event":"[TRAIN] Target distribution:","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:53:58.025991Z","level":"info","event":"cover_type","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:53:58.026507Z","level":"info","event":"0    12","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:53:58.033038Z","level":"info","event":"1    14","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:53:58.033614Z","level":"info","event":"2    43","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:53:58.034677Z","level":"info","event":"3    58","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:53:58.035540Z","level":"info","event":"4    21","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:53:58.036263Z","level":"info","event":"5    65","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:53:58.037120Z","level":"info","event":"6     4","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:53:58.037676Z","level":"info","event":"Name: count, dtype: int64","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:53:58.038917Z","level":"info","event":"[TRAIN] Training logreg...","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:54:00.757619","level":"warning","event":"/home/airflow/.local/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n","logger":"py.warnings"}
{"timestamp":"2025-09-30T20:54:00.777084","level":"warning","event":"/home/airflow/.local/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n","logger":"py.warnings"}
{"timestamp":"2025-09-30T20:54:00.783687","level":"warning","event":"/home/airflow/.local/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n","logger":"py.warnings"}
{"timestamp":"2025-09-30T20:54:12.495818Z","level":"error","event":"2025/09/30 20:54:12 WARNING mlflow.models.model: `artifact_path` is deprecated. Please use `name` instead.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T20:54:29.996603Z","level":"error","event":"\u001b[31m2025/09/30 20:54:29 WARNING mlflow.models.model: Model logged without a signature and input example. Please set `input_example` parameter when logging the model to auto infer the model signature.\u001b[0m","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T20:54:31.717585Z","level":"info","event":"[TRAIN] Model logreg logged to MLflow successfully","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:54:31.718591Z","level":"info","event":"[TRAIN] logreg - Accuracy: 0.5455, F1-macro: 0.5435, Run ID: 5708028072504028b63937f68f572299","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:54:31.793516Z","level":"info","event":"🏃 View run bn1_logreg at: http://mlflow:5000/#/experiments/1/runs/5708028072504028b63937f68f572299","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:54:31.794256Z","level":"info","event":"🧪 View experiment at: http://mlflow:5000/#/experiments/1","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:54:31.895768Z","level":"info","event":"[TRAIN] Training rf...","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:54:33.399730Z","level":"error","event":"/home/airflow/.local/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T20:54:33.400494Z","level":"error","event":"  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T20:54:33.421221Z","level":"error","event":"/home/airflow/.local/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T20:54:33.421749Z","level":"error","event":"  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T20:54:33.422370Z","level":"error","event":"/home/airflow/.local/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T20:54:33.422837Z","level":"error","event":"  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T20:54:42.077188Z","level":"error","event":"2025/09/30 20:54:42 WARNING mlflow.models.model: `artifact_path` is deprecated. Please use `name` instead.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T20:54:51.555714Z","level":"error","event":"\u001b[31m2025/09/30 20:54:51 WARNING mlflow.models.model: Model logged without a signature and input example. Please set `input_example` parameter when logging the model to auto infer the model signature.\u001b[0m","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T20:54:53.320223Z","level":"info","event":"[TRAIN] Model rf logged to MLflow successfully","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:54:53.340023Z","level":"info","event":"[TRAIN] rf - Accuracy: 0.6364, F1-macro: 0.6149, Run ID: fec668aced18472982c9f174f108b6da","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:54:53.396543Z","level":"info","event":"🏃 View run bn1_rf at: http://mlflow:5000/#/experiments/1/runs/fec668aced18472982c9f174f108b6da","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:54:53.397194Z","level":"info","event":"🧪 View experiment at: http://mlflow:5000/#/experiments/1","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:54:53.488854Z","level":"info","event":"[TRAIN] Training svc...","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:54:54.688958Z","level":"error","event":"/home/airflow/.local/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T20:54:54.689597Z","level":"error","event":"  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T20:54:54.694152Z","level":"error","event":"/home/airflow/.local/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T20:54:54.695141Z","level":"error","event":"  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T20:54:54.699044Z","level":"error","event":"/home/airflow/.local/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T20:54:54.701068Z","level":"error","event":"  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T20:55:02.232878Z","level":"error","event":"2025/09/30 20:55:02 WARNING mlflow.models.model: `artifact_path` is deprecated. Please use `name` instead.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T20:55:12.095879Z","level":"error","event":"\u001b[31m2025/09/30 20:55:12 WARNING mlflow.models.model: Model logged without a signature and input example. Please set `input_example` parameter when logging the model to auto infer the model signature.\u001b[0m","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T20:55:12.662468Z","level":"info","event":"[TRAIN] Model svc logged to MLflow successfully","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:55:12.663286Z","level":"info","event":"[TRAIN] svc - Accuracy: 0.5682, F1-macro: 0.5690, Run ID: 86a4f8cd596a489e8694f98a763a3dfa","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:55:12.811266Z","level":"info","event":"🏃 View run bn1_svc at: http://mlflow:5000/#/experiments/1/runs/86a4f8cd596a489e8694f98a763a3dfa","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:55:12.823627Z","level":"info","event":"🧪 View experiment at: http://mlflow:5000/#/experiments/1","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:55:12.900862Z","level":"info","event":"[TRAIN] Training knn...","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:55:23.388082Z","level":"error","event":"2025/09/30 20:55:23 WARNING mlflow.models.model: `artifact_path` is deprecated. Please use `name` instead.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T20:55:31.912227Z","level":"error","event":"\u001b[31m2025/09/30 20:55:31 WARNING mlflow.models.model: Model logged without a signature and input example. Please set `input_example` parameter when logging the model to auto infer the model signature.\u001b[0m","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T20:55:32.663879Z","level":"info","event":"[TRAIN] Model knn logged to MLflow successfully","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:55:32.665366Z","level":"info","event":"[TRAIN] knn - Accuracy: 0.4773, F1-macro: 0.5003, Run ID: f379f587bbaa47968456f09618df7eae","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:55:32.846750Z","level":"info","event":"🏃 View run bn1_knn at: http://mlflow:5000/#/experiments/1/runs/f379f587bbaa47968456f09618df7eae","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:55:32.848217Z","level":"info","event":"🧪 View experiment at: http://mlflow:5000/#/experiments/1","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:55:32.989383Z","level":"info","event":"[TRAIN] Training adaboost...","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:55:33.188334Z","level":"error","event":"/home/airflow/.local/lib/python3.12/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T20:55:33.189293Z","level":"error","event":"  warnings.warn(","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T20:55:35.713770Z","level":"error","event":"/home/airflow/.local/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T20:55:35.718200Z","level":"error","event":"  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T20:55:35.927888Z","level":"error","event":"/home/airflow/.local/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T20:55:35.928616Z","level":"error","event":"  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T20:55:35.929199Z","level":"error","event":"/home/airflow/.local/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T20:55:35.929935Z","level":"error","event":"  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T20:55:45.176633Z","level":"error","event":"2025/09/30 20:55:45 WARNING mlflow.models.model: `artifact_path` is deprecated. Please use `name` instead.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T20:55:53.154451Z","level":"error","event":"\u001b[31m2025/09/30 20:55:53 WARNING mlflow.models.model: Model logged without a signature and input example. Please set `input_example` parameter when logging the model to auto infer the model signature.\u001b[0m","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T20:55:53.938846Z","level":"info","event":"[TRAIN] Model adaboost logged to MLflow successfully","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:55:53.940491Z","level":"info","event":"[TRAIN] adaboost - Accuracy: 0.3864, F1-macro: 0.4068, Run ID: 6fc697dba5934b35a944cfa79f52ac81","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:55:54.106444Z","level":"info","event":"🏃 View run bn1_adaboost at: http://mlflow:5000/#/experiments/1/runs/6fc697dba5934b35a944cfa79f52ac81","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:55:54.108036Z","level":"info","event":"🧪 View experiment at: http://mlflow:5000/#/experiments/1","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:55:54.675661Z","level":"error","event":"Successfully registered model 'CovertypeClassifier'.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T20:55:55.233593Z","level":"error","event":"2025/09/30 20:55:55 WARNING mlflow.tracking._model_registry.fluent: Run with id fec668aced18472982c9f174f108b6da has no artifacts at artifact path 'model', registering model based on models:/m-e308f8d4ac3742aaa9bb9e7d08a40a04 instead","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T20:55:55.616871Z","level":"error","event":"2025/09/30 20:55:55 INFO mlflow.store.model_registry.abstract_store: Waiting up to 300 seconds for model version to finish creation. Model name: CovertypeClassifier, version 1","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T20:55:55.618975Z","level":"error","event":"Created version '1' of model 'CovertypeClassifier'.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T20:55:55.873429Z","level":"info","event":"[REGISTRY] Best model 'rf' registered as version 1 (Run ID: fec668aced18472982c9f174f108b6da)","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:55:57.184724Z","level":"info","event":"🏃 View run bn1_model_comparison at: http://mlflow:5000/#/experiments/1/runs/cf7c184f3b934485a0a6efaaf8bf4562","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:55:57.185394Z","level":"info","event":"🧪 View experiment at: http://mlflow:5000/#/experiments/1","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:55:57.296455Z","level":"info","event":"","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:55:57.297062Z","level":"info","event":"[METRICS] Model Performance Summary:","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:55:57.309632Z","level":"info","event":"   model  accuracy  f1_macro  train_size  test_size                           run_id","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:55:57.310227Z","level":"info","event":"      rf  0.636364  0.614896         173         44 fec668aced18472982c9f174f108b6da","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:55:57.310656Z","level":"info","event":"     svc  0.568182  0.569035         173         44 86a4f8cd596a489e8694f98a763a3dfa","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:55:57.311166Z","level":"info","event":"  logreg  0.545455  0.543525         173         44 5708028072504028b63937f68f572299","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:55:57.311698Z","level":"info","event":"     knn  0.477273  0.500341         173         44 f379f587bbaa47968456f09618df7eae","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:55:57.312330Z","level":"info","event":"adaboost  0.386364  0.406769         173         44 6fc697dba5934b35a944cfa79f52ac81","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:55:57.312952Z","level":"info","event":"","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:55:57.313599Z","level":"info","event":"[BEST] rf (f1_macro=0.6149) registered to model registry","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:55:57.314604Z","level":"info","event":"[BEST] Run ID: fec668aced18472982c9f174f108b6da","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:55:57.315961","level":"info","event":"Done. Returned value was: {'best_model': 'rf', 'best_f1_score': 0.614896214896215, 'best_run_id': 'fec668aced18472982c9f174f108b6da', 'total_models_trained': 5, 'metrics': [{'model': 'rf', 'accuracy': 0.6363636363636364, 'f1_macro': 0.614896214896215, 'train_size': 173, 'test_size': 44, 'run_id': 'fec668aced18472982c9f174f108b6da'}, {'model': 'svc', 'accuracy': 0.5681818181818182, 'f1_macro': 0.5690348866819455, 'train_size': 173, 'test_size': 44, 'run_id': '86a4f8cd596a489e8694f98a763a3dfa'}, {'model': 'logreg', 'accuracy': 0.5454545454545454, 'f1_macro': 0.5435254803675856, 'train_size': 173, 'test_size': 44, 'run_id': '5708028072504028b63937f68f572299'}, {'model': 'knn', 'accuracy': 0.4772727272727273, 'f1_macro': 0.5003406131035865, 'train_size': 173, 'test_size': 44, 'run_id': 'f379f587bbaa47968456f09618df7eae'}, {'model': 'adaboost', 'accuracy': 0.38636363636363635, 'f1_macro': 0.4067693744164332, 'train_size': 173, 'test_size': 44, 'run_id': '6fc697dba5934b35a944cfa79f52ac81'}]}","logger":"airflow.task.operators.airflow.providers.standard.operators.python.PythonOperator"}
{"timestamp":"2025-09-30T20:55:57.316533","level":"info","event":"Pushing xcom","ti":"RuntimeTaskInstance(id=UUID('01999c66-a01d-73e8-bdd6-58d0781a6c18'), task_id='train_covertype_models', dag_id='covertype_mysql_mlflow_train_models', run_id='scheduled__2025-09-30T20:45:00+00:00', try_number=1, map_index=-1, hostname='80bb4df3aa61', context_carrier={}, task=<Task(PythonOperator): train_covertype_models>, bundle_instance=LocalDagBundle(name=dags-folder), max_tries=0, start_date=datetime.datetime(2025, 9, 30, 20, 53, 53, 558784, tzinfo=datetime.timezone.utc), end_date=None, state=<TaskInstanceState.RUNNING: 'running'>, is_mapped=False, rendered_map_index=None, log_url='http://localhost:8080/dags/covertype_mysql_mlflow_train_models/runs/scheduled__2025-09-30T20%3A45%3A00%2B00%3A00/tasks/train_covertype_models?try_number=1')","logger":"task"}
