{"timestamp":"2025-09-30T19:40:18.030437","level":"info","event":"DAG bundles loaded: dags-folder","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-09-30T19:40:18.031089","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/ETL_Training.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-09-30T19:40:20.358563Z","level":"info","event":"[INFO] batch_number from context: 7","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:40:20.470962","level":"warning","event":"/home/airflow/.local/lib/python3.12/site-packages/airflow/models/connection.py:471: DeprecationWarning: Using Connection.get_connection_from_secrets from `airflow.models` is deprecated.Please use `get` on Connection from sdk(`airflow.sdk.Connection`) instead\n  warnings.warn(\n","logger":"py.warnings"}
{"timestamp":"2025-09-30T19:40:20.633500","level":"warning","event":"empty cryptography key - values will not be stored encrypted.","logger":"airflow.models.crypto"}
{"timestamp":"2025-09-30T19:40:20.635979","level":"info","event":"Connection Retrieved 'mysql_trn'","logger":"airflow.hooks.base"}
{"timestamp":"2025-09-30T19:40:20.636261","level":"warning","event":"This setter is for backward compatibility and should not be used.\nSince the introduction of connection property, the providers listed below breaks due to assigning value to self.connection in their __init__ method.\n* apache-airflow-providers-mysql<5.7.1\n* apache-airflow-providers-elasticsearch<5.5.1\n* apache-airflow-providers-postgres<5.13.0","logger":"airflow.task.hooks.airflow.providers.mysql.hooks.mysql.MySqlHook"}
{"timestamp":"2025-09-30T19:40:20.658083","level":"warning","event":"/opt/airflow/dags/ETL_Training.py:252: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n  df = pd.read_sql(\"\"\"\n","logger":"py.warnings"}
{"timestamp":"2025-09-30T19:40:20.672567Z","level":"info","event":"[TRAIN] Loaded 777 samples from covertype_clean","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:40:20.673664Z","level":"info","event":"[TRAIN] Features shape: (777, 12)","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:40:20.675079Z","level":"info","event":"[TRAIN] Target distribution:","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:40:20.675569Z","level":"info","event":"cover_type","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:40:20.675981Z","level":"info","event":"0    167","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:40:20.676347Z","level":"info","event":"1    103","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:40:20.676803Z","level":"info","event":"2     98","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:40:20.677238Z","level":"info","event":"4    144","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:40:20.677659Z","level":"info","event":"5     93","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:40:20.678084Z","level":"info","event":"6    172","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:40:20.678482Z","level":"info","event":"Name: count, dtype: int64","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:40:20.679531Z","level":"info","event":"[TRAIN] Training logreg...","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:40:28.400113Z","level":"error","event":"2025/09/30 19:40:28 WARNING mlflow.models.model: `artifact_path` is deprecated. Please use `name` instead.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T19:40:38.202117Z","level":"error","event":"\u001b[31m2025/09/30 19:40:38 WARNING mlflow.models.model: Model logged without a signature and input example. Please set `input_example` parameter when logging the model to auto infer the model signature.\u001b[0m","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T19:40:38.763076Z","level":"info","event":"[TRAIN] Model logreg logged to MLflow successfully","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:40:38.763777Z","level":"info","event":"[TRAIN] logreg - Accuracy: 0.7436, F1-macro: 0.7184, Run ID: 64b98381fb574886bd767e4a49613458","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:40:38.821851Z","level":"info","event":"🏃 View run bn7_logreg at: http://mlflow:5000/#/experiments/1/runs/64b98381fb574886bd767e4a49613458","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:40:38.822431Z","level":"info","event":"🧪 View experiment at: http://mlflow:5000/#/experiments/1","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:40:38.922808Z","level":"info","event":"[TRAIN] Training rf...","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:40:47.875581Z","level":"error","event":"2025/09/30 19:40:47 WARNING mlflow.models.model: `artifact_path` is deprecated. Please use `name` instead.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T19:40:56.293596Z","level":"error","event":"\u001b[31m2025/09/30 19:40:56 WARNING mlflow.models.model: Model logged without a signature and input example. Please set `input_example` parameter when logging the model to auto infer the model signature.\u001b[0m","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T19:40:58.211411Z","level":"info","event":"[TRAIN] Model rf logged to MLflow successfully","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:40:58.212250Z","level":"info","event":"[TRAIN] rf - Accuracy: 0.8205, F1-macro: 0.8036, Run ID: e54ed9414c154df39401869d46ce6a05","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:40:58.287707Z","level":"info","event":"🏃 View run bn7_rf at: http://mlflow:5000/#/experiments/1/runs/e54ed9414c154df39401869d46ce6a05","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:40:58.288558Z","level":"info","event":"🧪 View experiment at: http://mlflow:5000/#/experiments/1","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:40:58.394777Z","level":"info","event":"[TRAIN] Training svc...","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:41:06.107055Z","level":"error","event":"2025/09/30 19:41:06 WARNING mlflow.models.model: `artifact_path` is deprecated. Please use `name` instead.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T19:41:14.382378Z","level":"error","event":"\u001b[31m2025/09/30 19:41:14 WARNING mlflow.models.model: Model logged without a signature and input example. Please set `input_example` parameter when logging the model to auto infer the model signature.\u001b[0m","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T19:41:14.946364Z","level":"info","event":"[TRAIN] Model svc logged to MLflow successfully","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:41:14.947014Z","level":"info","event":"[TRAIN] svc - Accuracy: 0.7372, F1-macro: 0.7145, Run ID: 8a5229e8d4fa4110b9790b521a36b118","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:41:15.005209Z","level":"info","event":"🏃 View run bn7_svc at: http://mlflow:5000/#/experiments/1/runs/8a5229e8d4fa4110b9790b521a36b118","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:41:15.005707Z","level":"info","event":"🧪 View experiment at: http://mlflow:5000/#/experiments/1","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:41:15.108759Z","level":"info","event":"[TRAIN] Training knn...","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:41:25.380833Z","level":"error","event":"2025/09/30 19:41:25 WARNING mlflow.models.model: `artifact_path` is deprecated. Please use `name` instead.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T19:41:32.567483Z","level":"error","event":"\u001b[31m2025/09/30 19:41:32 WARNING mlflow.models.model: Model logged without a signature and input example. Please set `input_example` parameter when logging the model to auto infer the model signature.\u001b[0m","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T19:41:33.135198Z","level":"info","event":"[TRAIN] Model knn logged to MLflow successfully","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:41:33.135897Z","level":"info","event":"[TRAIN] knn - Accuracy: 0.6795, F1-macro: 0.6482, Run ID: 9b5345a89562493e9310432ab94a1c04","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:41:33.199344Z","level":"info","event":"🏃 View run bn7_knn at: http://mlflow:5000/#/experiments/1/runs/9b5345a89562493e9310432ab94a1c04","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:41:33.199957Z","level":"info","event":"🧪 View experiment at: http://mlflow:5000/#/experiments/1","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:41:33.512834Z","level":"info","event":"[TRAIN] Training adaboost...","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:41:33.863769Z","level":"error","event":"/home/airflow/.local/lib/python3.12/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T19:41:33.864350Z","level":"error","event":"  warnings.warn(","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T19:41:36.364868Z","level":"error","event":"/home/airflow/.local/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T19:41:36.365395Z","level":"error","event":"  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T19:41:36.395003Z","level":"error","event":"/home/airflow/.local/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T19:41:36.395658Z","level":"error","event":"  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T19:41:36.396226Z","level":"error","event":"/home/airflow/.local/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T19:41:36.396672Z","level":"error","event":"  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T19:41:45.026913Z","level":"error","event":"2025/09/30 19:41:45 WARNING mlflow.models.model: `artifact_path` is deprecated. Please use `name` instead.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T19:41:51.933788Z","level":"error","event":"\u001b[31m2025/09/30 19:41:51 WARNING mlflow.models.model: Model logged without a signature and input example. Please set `input_example` parameter when logging the model to auto infer the model signature.\u001b[0m","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T19:41:52.665760Z","level":"info","event":"[TRAIN] Model adaboost logged to MLflow successfully","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:41:52.667273Z","level":"info","event":"[TRAIN] adaboost - Accuracy: 0.4487, F1-macro: 0.3356, Run ID: 2c623b5ad0024aa9aad821655e2976fb","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:41:52.812526Z","level":"info","event":"🏃 View run bn7_adaboost at: http://mlflow:5000/#/experiments/1/runs/2c623b5ad0024aa9aad821655e2976fb","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:41:52.813829Z","level":"info","event":"🧪 View experiment at: http://mlflow:5000/#/experiments/1","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:41:53.205368Z","level":"error","event":"Registered model 'CovertypeClassifier' already exists. Creating a new version of this model...","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T19:41:54.468790Z","level":"error","event":"2025/09/30 19:41:54 WARNING mlflow.tracking._model_registry.fluent: Run with id e54ed9414c154df39401869d46ce6a05 has no artifacts at artifact path 'model', registering model based on models:/m-e5208a7de3e24817aa581c24260c9828 instead","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T19:41:54.668756Z","level":"error","event":"2025/09/30 19:41:54 INFO mlflow.store.model_registry.abstract_store: Waiting up to 300 seconds for model version to finish creation. Model name: CovertypeClassifier, version 4","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T19:41:54.674415Z","level":"error","event":"Created version '4' of model 'CovertypeClassifier'.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T19:41:54.989352Z","level":"info","event":"[REGISTRY] Best model 'rf' registered as version 4 (Run ID: e54ed9414c154df39401869d46ce6a05)","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:41:56.484828Z","level":"info","event":"🏃 View run bn7_model_comparison at: http://mlflow:5000/#/experiments/1/runs/a251fbc016ff4e5aa6fa645c19b8146c","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:41:56.485497Z","level":"info","event":"🧪 View experiment at: http://mlflow:5000/#/experiments/1","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:41:56.608120Z","level":"info","event":"","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:41:56.609658Z","level":"info","event":"[METRICS] Model Performance Summary:","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:41:56.616946Z","level":"info","event":"   model  accuracy  f1_macro  train_size  test_size                           run_id","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:41:56.618602Z","level":"info","event":"      rf  0.820513  0.803641         621        156 e54ed9414c154df39401869d46ce6a05","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:41:56.619963Z","level":"info","event":"  logreg  0.743590  0.718446         621        156 64b98381fb574886bd767e4a49613458","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:41:56.621329Z","level":"info","event":"     svc  0.737179  0.714520         621        156 8a5229e8d4fa4110b9790b521a36b118","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:41:56.623055Z","level":"info","event":"     knn  0.679487  0.648231         621        156 9b5345a89562493e9310432ab94a1c04","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:41:56.624516Z","level":"info","event":"adaboost  0.448718  0.335604         621        156 2c623b5ad0024aa9aad821655e2976fb","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:41:56.625759Z","level":"info","event":"","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:41:56.627130Z","level":"info","event":"[BEST] rf (f1_macro=0.8036) registered to model registry","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:41:56.628442Z","level":"info","event":"[BEST] Run ID: e54ed9414c154df39401869d46ce6a05","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:41:56.622773","level":"info","event":"Done. Returned value was: {'best_model': 'rf', 'best_f1_score': 0.8036410883892228, 'best_run_id': 'e54ed9414c154df39401869d46ce6a05', 'total_models_trained': 5, 'metrics': [{'model': 'rf', 'accuracy': 0.8205128205128205, 'f1_macro': 0.8036410883892228, 'train_size': 621, 'test_size': 156, 'run_id': 'e54ed9414c154df39401869d46ce6a05'}, {'model': 'logreg', 'accuracy': 0.7435897435897436, 'f1_macro': 0.7184463927884982, 'train_size': 621, 'test_size': 156, 'run_id': '64b98381fb574886bd767e4a49613458'}, {'model': 'svc', 'accuracy': 0.7371794871794872, 'f1_macro': 0.7145204500325043, 'train_size': 621, 'test_size': 156, 'run_id': '8a5229e8d4fa4110b9790b521a36b118'}, {'model': 'knn', 'accuracy': 0.6794871794871795, 'f1_macro': 0.6482308201058201, 'train_size': 621, 'test_size': 156, 'run_id': '9b5345a89562493e9310432ab94a1c04'}, {'model': 'adaboost', 'accuracy': 0.44871794871794873, 'f1_macro': 0.3356042371628918, 'train_size': 621, 'test_size': 156, 'run_id': '2c623b5ad0024aa9aad821655e2976fb'}]}","logger":"airflow.task.operators.airflow.providers.standard.operators.python.PythonOperator"}
{"timestamp":"2025-09-30T19:41:56.623951","level":"info","event":"Pushing xcom","ti":"RuntimeTaskInstance(id=UUID('01999c23-916a-7265-b7da-f8d46040b29b'), task_id='train_covertype_models', dag_id='covertype_mysql_mlflow_train_models', run_id='scheduled__2025-09-30T19:35:00+00:00', try_number=1, map_index=-1, hostname='d73ec3e7b977', context_carrier={}, task=<Task(PythonOperator): train_covertype_models>, bundle_instance=LocalDagBundle(name=dags-folder), max_tries=0, start_date=datetime.datetime(2025, 9, 30, 19, 40, 17, 849010, tzinfo=datetime.timezone.utc), end_date=None, state=<TaskInstanceState.RUNNING: 'running'>, is_mapped=False, rendered_map_index=None, log_url='http://localhost:8080/dags/covertype_mysql_mlflow_train_models/runs/scheduled__2025-09-30T19%3A35%3A00%2B00%3A00/tasks/train_covertype_models?try_number=1')","logger":"task"}
