{"timestamp":"2025-09-30T21:15:59.834555","level":"info","event":"DAG bundles loaded: dags-folder","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-09-30T21:15:59.835369","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/ETL_Training.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-09-30T21:16:02.403353Z","level":"info","event":"[INFO] batch_number from context: 1","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:16:02.487895","level":"warning","event":"/home/airflow/.local/lib/python3.12/site-packages/airflow/models/connection.py:471: DeprecationWarning: Using Connection.get_connection_from_secrets from `airflow.models` is deprecated.Please use `get` on Connection from sdk(`airflow.sdk.Connection`) instead\n  warnings.warn(\n","logger":"py.warnings"}
{"timestamp":"2025-09-30T21:16:02.664358","level":"warning","event":"empty cryptography key - values will not be stored encrypted.","logger":"airflow.models.crypto"}
{"timestamp":"2025-09-30T21:16:02.667288","level":"info","event":"Connection Retrieved 'mysql_trn'","logger":"airflow.hooks.base"}
{"timestamp":"2025-09-30T21:16:02.667494","level":"warning","event":"This setter is for backward compatibility and should not be used.\nSince the introduction of connection property, the providers listed below breaks due to assigning value to self.connection in their __init__ method.\n* apache-airflow-providers-mysql<5.7.1\n* apache-airflow-providers-elasticsearch<5.5.1\n* apache-airflow-providers-postgres<5.13.0","logger":"airflow.task.hooks.airflow.providers.mysql.hooks.mysql.MySqlHook"}
{"timestamp":"2025-09-30T21:16:02.689656","level":"warning","event":"/opt/airflow/dags/ETL_Training.py:273: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n  df = pd.read_sql(\"\"\"\n","logger":"py.warnings"}
{"timestamp":"2025-09-30T21:16:02.699291Z","level":"info","event":"[TRAIN] Loaded 420 samples from covertype_clean","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:16:02.700130Z","level":"info","event":"[TRAIN] Features shape: (420, 12)","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:16:02.701480Z","level":"info","event":"[TRAIN] Target distribution:","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:16:02.702266Z","level":"info","event":"cover_type","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:16:02.702759Z","level":"info","event":"0     25","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:16:02.703260Z","level":"info","event":"1     21","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:16:02.703787Z","level":"info","event":"2     70","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:16:02.704361Z","level":"info","event":"3    102","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:16:02.704943Z","level":"info","event":"4     48","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:16:02.705917Z","level":"info","event":"5    144","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:16:02.706588Z","level":"info","event":"6     10","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:16:02.707215Z","level":"info","event":"Name: count, dtype: int64","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:16:02.707744Z","level":"info","event":"[TRAIN] Training logreg...","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:16:13.608326Z","level":"error","event":"2025/09/30 21:16:13 WARNING mlflow.models.model: `artifact_path` is deprecated. Please use `name` instead.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:16:24.505533Z","level":"error","event":"\u001b[31m2025/09/30 21:16:24 WARNING mlflow.models.model: Model logged without a signature and input example. Please set `input_example` parameter when logging the model to auto infer the model signature.\u001b[0m","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:16:25.091909Z","level":"info","event":"[TRAIN] Model logreg logged to MLflow successfully","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:16:25.092802Z","level":"info","event":"[TRAIN] logreg - Accuracy: 0.7381, F1-macro: 0.7078, Run ID: 5463e3f992c747c097d989e1cdf9ea27","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:16:25.181438Z","level":"info","event":"🏃 View run bn1_logreg at: http://mlflow:5000/#/experiments/1/runs/5463e3f992c747c097d989e1cdf9ea27","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:16:25.187042Z","level":"info","event":"🧪 View experiment at: http://mlflow:5000/#/experiments/1","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:16:25.268508Z","level":"info","event":"[TRAIN] Training rf...","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:16:36.480195Z","level":"error","event":"2025/09/30 21:16:36 WARNING mlflow.models.model: `artifact_path` is deprecated. Please use `name` instead.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:16:45.627413Z","level":"error","event":"\u001b[31m2025/09/30 21:16:45 WARNING mlflow.models.model: Model logged without a signature and input example. Please set `input_example` parameter when logging the model to auto infer the model signature.\u001b[0m","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:16:46.293620Z","level":"info","event":"[TRAIN] Model rf logged to MLflow successfully","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:16:46.294647Z","level":"info","event":"[TRAIN] rf - Accuracy: 0.7976, F1-macro: 0.7216, Run ID: 57ac9c17ec4f42c7887e4db7b4b14eda","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:16:46.431040Z","level":"info","event":"🏃 View run bn1_rf at: http://mlflow:5000/#/experiments/1/runs/57ac9c17ec4f42c7887e4db7b4b14eda","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:16:46.432163Z","level":"info","event":"🧪 View experiment at: http://mlflow:5000/#/experiments/1","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:16:46.541920Z","level":"info","event":"[TRAIN] Training svc...","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:16:56.400357Z","level":"error","event":"2025/09/30 21:16:56 WARNING mlflow.models.model: `artifact_path` is deprecated. Please use `name` instead.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:17:04.952111Z","level":"error","event":"\u001b[31m2025/09/30 21:17:04 WARNING mlflow.models.model: Model logged without a signature and input example. Please set `input_example` parameter when logging the model to auto infer the model signature.\u001b[0m","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:17:05.588128Z","level":"info","event":"[TRAIN] Model svc logged to MLflow successfully","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:17:05.589197Z","level":"info","event":"[TRAIN] svc - Accuracy: 0.7500, F1-macro: 0.6701, Run ID: 3f717be9b0a04f628ce8f8b9d3643630","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:17:05.666627Z","level":"info","event":"🏃 View run bn1_svc at: http://mlflow:5000/#/experiments/1/runs/3f717be9b0a04f628ce8f8b9d3643630","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:17:05.667373Z","level":"info","event":"🧪 View experiment at: http://mlflow:5000/#/experiments/1","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:17:05.773058Z","level":"info","event":"[TRAIN] Training knn...","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:17:17.255229Z","level":"error","event":"2025/09/30 21:17:17 WARNING mlflow.models.model: `artifact_path` is deprecated. Please use `name` instead.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:17:25.530294Z","level":"error","event":"\u001b[31m2025/09/30 21:17:25 WARNING mlflow.models.model: Model logged without a signature and input example. Please set `input_example` parameter when logging the model to auto infer the model signature.\u001b[0m","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:17:26.229112Z","level":"info","event":"[TRAIN] Model knn logged to MLflow successfully","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:17:26.230922Z","level":"info","event":"[TRAIN] knn - Accuracy: 0.7262, F1-macro: 0.6488, Run ID: 2109f44c1fdd4ee0bc6a21880d99ed6f","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:17:26.404424Z","level":"info","event":"🏃 View run bn1_knn at: http://mlflow:5000/#/experiments/1/runs/2109f44c1fdd4ee0bc6a21880d99ed6f","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:17:26.405020Z","level":"info","event":"🧪 View experiment at: http://mlflow:5000/#/experiments/1","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:17:26.507012Z","level":"info","event":"[TRAIN] Training adaboost...","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:17:26.635567Z","level":"error","event":"/home/airflow/.local/lib/python3.12/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:17:26.636416Z","level":"error","event":"  warnings.warn(","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:17:28.311384Z","level":"error","event":"/home/airflow/.local/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:17:28.312291Z","level":"error","event":"  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:17:28.340494Z","level":"error","event":"/home/airflow/.local/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:17:28.341336Z","level":"error","event":"  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:17:28.342586Z","level":"error","event":"/home/airflow/.local/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:17:28.343429Z","level":"error","event":"  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:17:36.163224Z","level":"error","event":"2025/09/30 21:17:36 WARNING mlflow.models.model: `artifact_path` is deprecated. Please use `name` instead.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:17:45.007118Z","level":"error","event":"\u001b[31m2025/09/30 21:17:45 WARNING mlflow.models.model: Model logged without a signature and input example. Please set `input_example` parameter when logging the model to auto infer the model signature.\u001b[0m","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:17:45.618543Z","level":"info","event":"[TRAIN] Model adaboost logged to MLflow successfully","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:17:45.619272Z","level":"info","event":"[TRAIN] adaboost - Accuracy: 0.5833, F1-macro: 0.3400, Run ID: 600a5da441d24936803cff24bbb0b906","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:17:45.693779Z","level":"info","event":"🏃 View run bn1_adaboost at: http://mlflow:5000/#/experiments/1/runs/600a5da441d24936803cff24bbb0b906","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:17:45.694595Z","level":"info","event":"🧪 View experiment at: http://mlflow:5000/#/experiments/1","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:17:45.911293Z","level":"error","event":"Registered model 'CovertypeClassifier' already exists. Creating a new version of this model...","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:17:46.397101Z","level":"error","event":"2025/09/30 21:17:46 WARNING mlflow.tracking._model_registry.fluent: Run with id 57ac9c17ec4f42c7887e4db7b4b14eda has no artifacts at artifact path 'model', registering model based on models:/m-0ba8e0e692934d458b1d6c4b481badf1 instead","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:17:46.685269Z","level":"error","event":"2025/09/30 21:17:46 INFO mlflow.store.model_registry.abstract_store: Waiting up to 300 seconds for model version to finish creation. Model name: CovertypeClassifier, version 2","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:17:46.689027Z","level":"error","event":"Created version '2' of model 'CovertypeClassifier'.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:17:46.924756Z","level":"info","event":"[REGISTRY] Best model 'rf' registered as version 2 (Run ID: 57ac9c17ec4f42c7887e4db7b4b14eda)","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:17:48.024678Z","level":"info","event":"🏃 View run bn1_model_comparison at: http://mlflow:5000/#/experiments/1/runs/f254a0df103a43ed9673605bdc3b66eb","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:17:48.025337Z","level":"info","event":"🧪 View experiment at: http://mlflow:5000/#/experiments/1","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:17:48.136764Z","level":"info","event":"","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:17:48.137401Z","level":"info","event":"[METRICS] Model Performance Summary:","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:17:48.140936Z","level":"info","event":"   model  accuracy  f1_macro  train_size  test_size                           run_id","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:17:48.141533Z","level":"info","event":"      rf  0.797619  0.721628         336         84 57ac9c17ec4f42c7887e4db7b4b14eda","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:17:48.142039Z","level":"info","event":"  logreg  0.738095  0.707765         336         84 5463e3f992c747c097d989e1cdf9ea27","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:17:48.142474Z","level":"info","event":"     svc  0.750000  0.670087         336         84 3f717be9b0a04f628ce8f8b9d3643630","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:17:48.142889Z","level":"info","event":"     knn  0.726190  0.648843         336         84 2109f44c1fdd4ee0bc6a21880d99ed6f","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:17:48.144011Z","level":"info","event":"adaboost  0.583333  0.340019         336         84 600a5da441d24936803cff24bbb0b906","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:17:48.144644Z","level":"info","event":"","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:17:48.145193Z","level":"info","event":"[BEST] rf (f1_macro=0.7216) registered to model registry","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:17:48.145764Z","level":"info","event":"[BEST] Run ID: 57ac9c17ec4f42c7887e4db7b4b14eda","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:17:48.143990","level":"info","event":"Done. Returned value was: {'best_model': 'rf', 'best_f1_score': 0.7216282766199446, 'best_run_id': '57ac9c17ec4f42c7887e4db7b4b14eda', 'total_models_trained': 5, 'metrics': [{'model': 'rf', 'accuracy': 0.7976190476190477, 'f1_macro': 0.7216282766199446, 'train_size': 336, 'test_size': 84, 'run_id': '57ac9c17ec4f42c7887e4db7b4b14eda'}, {'model': 'logreg', 'accuracy': 0.7380952380952381, 'f1_macro': 0.7077645093124969, 'train_size': 336, 'test_size': 84, 'run_id': '5463e3f992c747c097d989e1cdf9ea27'}, {'model': 'svc', 'accuracy': 0.75, 'f1_macro': 0.6700869821612857, 'train_size': 336, 'test_size': 84, 'run_id': '3f717be9b0a04f628ce8f8b9d3643630'}, {'model': 'knn', 'accuracy': 0.7261904761904762, 'f1_macro': 0.648842694972726, 'train_size': 336, 'test_size': 84, 'run_id': '2109f44c1fdd4ee0bc6a21880d99ed6f'}, {'model': 'adaboost', 'accuracy': 0.5833333333333334, 'f1_macro': 0.3400187661271405, 'train_size': 336, 'test_size': 84, 'run_id': '600a5da441d24936803cff24bbb0b906'}]}","logger":"airflow.task.operators.airflow.providers.standard.operators.python.PythonOperator"}
{"timestamp":"2025-09-30T21:17:48.144587","level":"info","event":"Pushing xcom","ti":"RuntimeTaskInstance(id=UUID('01999c7b-0e5a-754b-bc3a-540c8b8249ab'), task_id='train_covertype_models', dag_id='covertype_mysql_mlflow_train_models', run_id='scheduled__2025-09-30T21:10:00+00:00', try_number=1, map_index=-1, hostname='0154c95c6bde', context_carrier={}, task=<Task(PythonOperator): train_covertype_models>, bundle_instance=LocalDagBundle(name=dags-folder), max_tries=0, start_date=datetime.datetime(2025, 9, 30, 21, 15, 59, 584624, tzinfo=datetime.timezone.utc), end_date=None, state=<TaskInstanceState.RUNNING: 'running'>, is_mapped=False, rendered_map_index=None, log_url='http://localhost:8080/dags/covertype_mysql_mlflow_train_models/runs/scheduled__2025-09-30T21%3A10%3A00%2B00%3A00/tasks/train_covertype_models?try_number=1')","logger":"task"}
