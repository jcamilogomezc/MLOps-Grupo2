{"timestamp":"2025-09-30T19:50:20.052269","level":"info","event":"DAG bundles loaded: dags-folder","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-09-30T19:50:20.053046","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/ETL_Training.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-09-30T19:50:23.000552Z","level":"info","event":"[INFO] batch_number from context: 8","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:50:23.291004","level":"warning","event":"/home/airflow/.local/lib/python3.12/site-packages/airflow/models/connection.py:471: DeprecationWarning: Using Connection.get_connection_from_secrets from `airflow.models` is deprecated.Please use `get` on Connection from sdk(`airflow.sdk.Connection`) instead\n  warnings.warn(\n","logger":"py.warnings"}
{"timestamp":"2025-09-30T19:50:23.442721","level":"warning","event":"empty cryptography key - values will not be stored encrypted.","logger":"airflow.models.crypto"}
{"timestamp":"2025-09-30T19:50:23.445687","level":"info","event":"Connection Retrieved 'mysql_trn'","logger":"airflow.hooks.base"}
{"timestamp":"2025-09-30T19:50:23.445895","level":"warning","event":"This setter is for backward compatibility and should not be used.\nSince the introduction of connection property, the providers listed below breaks due to assigning value to self.connection in their __init__ method.\n* apache-airflow-providers-mysql<5.7.1\n* apache-airflow-providers-elasticsearch<5.5.1\n* apache-airflow-providers-postgres<5.13.0","logger":"airflow.task.hooks.airflow.providers.mysql.hooks.mysql.MySqlHook"}
{"timestamp":"2025-09-30T19:50:23.467547","level":"warning","event":"/opt/airflow/dags/ETL_Training.py:252: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n  df = pd.read_sql(\"\"\"\n","logger":"py.warnings"}
{"timestamp":"2025-09-30T19:50:23.484498Z","level":"info","event":"[TRAIN] Loaded 1056 samples from covertype_clean","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:50:23.485386Z","level":"info","event":"[TRAIN] Features shape: (1056, 12)","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:50:23.486825Z","level":"info","event":"[TRAIN] Target distribution:","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:50:23.487415Z","level":"info","event":"cover_type","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:50:23.487936Z","level":"info","event":"0    219","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:50:23.488442Z","level":"info","event":"1    127","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:50:23.488962Z","level":"info","event":"2    136","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:50:23.489401Z","level":"info","event":"4    199","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:50:23.489834Z","level":"info","event":"5    130","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:50:23.490259Z","level":"info","event":"6    245","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:50:23.490742Z","level":"info","event":"Name: count, dtype: int64","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:50:23.491312Z","level":"info","event":"[TRAIN] Training logreg...","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:50:32.953676Z","level":"error","event":"2025/09/30 19:50:32 WARNING mlflow.models.model: `artifact_path` is deprecated. Please use `name` instead.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T19:50:42.522611Z","level":"error","event":"\u001b[31m2025/09/30 19:50:42 WARNING mlflow.models.model: Model logged without a signature and input example. Please set `input_example` parameter when logging the model to auto infer the model signature.\u001b[0m","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T19:50:43.192203Z","level":"info","event":"[TRAIN] Model logreg logged to MLflow successfully","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:50:43.192798Z","level":"info","event":"[TRAIN] logreg - Accuracy: 0.7217, F1-macro: 0.6862, Run ID: da2f12a04cf643679dcb5ab3369a8499","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:50:43.251899Z","level":"info","event":"🏃 View run bn8_logreg at: http://mlflow:5000/#/experiments/1/runs/da2f12a04cf643679dcb5ab3369a8499","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:50:43.252531Z","level":"info","event":"🧪 View experiment at: http://mlflow:5000/#/experiments/1","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:50:43.351383Z","level":"info","event":"[TRAIN] Training rf...","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:50:53.231791Z","level":"error","event":"2025/09/30 19:50:53 WARNING mlflow.models.model: `artifact_path` is deprecated. Please use `name` instead.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T19:51:02.153921Z","level":"error","event":"\u001b[31m2025/09/30 19:51:02 WARNING mlflow.models.model: Model logged without a signature and input example. Please set `input_example` parameter when logging the model to auto infer the model signature.\u001b[0m","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T19:51:02.841317Z","level":"info","event":"[TRAIN] Model rf logged to MLflow successfully","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:51:02.841964Z","level":"info","event":"[TRAIN] rf - Accuracy: 0.8066, F1-macro: 0.7756, Run ID: 6c479fef7d954de1a2bbce1e8eb7727f","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:51:02.911432Z","level":"info","event":"🏃 View run bn8_rf at: http://mlflow:5000/#/experiments/1/runs/6c479fef7d954de1a2bbce1e8eb7727f","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:51:02.912195Z","level":"info","event":"🧪 View experiment at: http://mlflow:5000/#/experiments/1","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:51:03.003385Z","level":"info","event":"[TRAIN] Training svc...","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:51:12.124955Z","level":"error","event":"2025/09/30 19:51:12 WARNING mlflow.models.model: `artifact_path` is deprecated. Please use `name` instead.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T19:51:20.121889Z","level":"error","event":"\u001b[31m2025/09/30 19:51:20 WARNING mlflow.models.model: Model logged without a signature and input example. Please set `input_example` parameter when logging the model to auto infer the model signature.\u001b[0m","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T19:51:20.753418Z","level":"info","event":"[TRAIN] Model svc logged to MLflow successfully","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:51:20.754370Z","level":"info","event":"[TRAIN] svc - Accuracy: 0.7453, F1-macro: 0.7022, Run ID: bb4ec4e31bc44ab1bab03035e85cb047","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:51:20.840650Z","level":"info","event":"🏃 View run bn8_svc at: http://mlflow:5000/#/experiments/1/runs/bb4ec4e31bc44ab1bab03035e85cb047","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:51:20.841495Z","level":"info","event":"🧪 View experiment at: http://mlflow:5000/#/experiments/1","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:51:20.953116Z","level":"info","event":"[TRAIN] Training knn...","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:51:28.692750Z","level":"error","event":"2025/09/30 19:51:28 WARNING mlflow.models.model: `artifact_path` is deprecated. Please use `name` instead.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T19:51:36.714064Z","level":"error","event":"\u001b[31m2025/09/30 19:51:36 WARNING mlflow.models.model: Model logged without a signature and input example. Please set `input_example` parameter when logging the model to auto infer the model signature.\u001b[0m","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T19:51:37.347320Z","level":"info","event":"[TRAIN] Model knn logged to MLflow successfully","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:51:37.349005Z","level":"info","event":"[TRAIN] knn - Accuracy: 0.7217, F1-macro: 0.6753, Run ID: 4b32e8b7ee4c411baa02a117ac923b9b","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:51:37.423184Z","level":"info","event":"🏃 View run bn8_knn at: http://mlflow:5000/#/experiments/1/runs/4b32e8b7ee4c411baa02a117ac923b9b","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:51:37.423808Z","level":"info","event":"🧪 View experiment at: http://mlflow:5000/#/experiments/1","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:51:37.520645Z","level":"info","event":"[TRAIN] Training adaboost...","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:51:37.693295Z","level":"error","event":"/home/airflow/.local/lib/python3.12/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T19:51:37.694383Z","level":"error","event":"  warnings.warn(","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T19:51:39.170678Z","level":"error","event":"/home/airflow/.local/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T19:51:39.171995Z","level":"error","event":"  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T19:51:39.264687Z","level":"error","event":"/home/airflow/.local/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T19:51:39.265909Z","level":"error","event":"  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T19:51:39.267124Z","level":"error","event":"/home/airflow/.local/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T19:51:39.268538Z","level":"error","event":"  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T19:51:45.866012Z","level":"error","event":"2025/09/30 19:51:45 WARNING mlflow.models.model: `artifact_path` is deprecated. Please use `name` instead.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T19:51:53.063907Z","level":"error","event":"\u001b[31m2025/09/30 19:51:53 WARNING mlflow.models.model: Model logged without a signature and input example. Please set `input_example` parameter when logging the model to auto infer the model signature.\u001b[0m","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T19:51:53.770155Z","level":"info","event":"[TRAIN] Model adaboost logged to MLflow successfully","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:51:53.770750Z","level":"info","event":"[TRAIN] adaboost - Accuracy: 0.4670, F1-macro: 0.3908, Run ID: a9b4eab6193e437c8b2150a357dc4282","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:51:53.829838Z","level":"info","event":"🏃 View run bn8_adaboost at: http://mlflow:5000/#/experiments/1/runs/a9b4eab6193e437c8b2150a357dc4282","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:51:53.830561Z","level":"info","event":"🧪 View experiment at: http://mlflow:5000/#/experiments/1","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:51:54.034678Z","level":"error","event":"Registered model 'CovertypeClassifier' already exists. Creating a new version of this model...","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T19:51:54.550842Z","level":"error","event":"2025/09/30 19:51:54 WARNING mlflow.tracking._model_registry.fluent: Run with id 6c479fef7d954de1a2bbce1e8eb7727f has no artifacts at artifact path 'model', registering model based on models:/m-ef7b3c98176c40c494eeb4521a3076d5 instead","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T19:51:54.793293Z","level":"error","event":"2025/09/30 19:51:54 INFO mlflow.store.model_registry.abstract_store: Waiting up to 300 seconds for model version to finish creation. Model name: CovertypeClassifier, version 6","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T19:51:54.795987Z","level":"error","event":"Created version '6' of model 'CovertypeClassifier'.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T19:51:55.229813Z","level":"info","event":"[REGISTRY] Best model 'rf' registered as version 6 (Run ID: 6c479fef7d954de1a2bbce1e8eb7727f)","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:51:56.269566Z","level":"info","event":"🏃 View run bn8_model_comparison at: http://mlflow:5000/#/experiments/1/runs/ef31cbed2c4d40beb4796f93f2baf488","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:51:56.270329Z","level":"info","event":"🧪 View experiment at: http://mlflow:5000/#/experiments/1","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:51:56.386055Z","level":"info","event":"","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:51:56.386742Z","level":"info","event":"[METRICS] Model Performance Summary:","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:51:56.390108Z","level":"info","event":"   model  accuracy  f1_macro  train_size  test_size                           run_id","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:51:56.390905Z","level":"info","event":"      rf  0.806604  0.775595         844        212 6c479fef7d954de1a2bbce1e8eb7727f","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:51:56.391565Z","level":"info","event":"     svc  0.745283  0.702167         844        212 bb4ec4e31bc44ab1bab03035e85cb047","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:51:56.392196Z","level":"info","event":"  logreg  0.721698  0.686191         844        212 da2f12a04cf643679dcb5ab3369a8499","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:51:56.392763Z","level":"info","event":"     knn  0.721698  0.675347         844        212 4b32e8b7ee4c411baa02a117ac923b9b","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:51:56.393388Z","level":"info","event":"adaboost  0.466981  0.390792         844        212 a9b4eab6193e437c8b2150a357dc4282","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:51:56.394059Z","level":"info","event":"","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:51:56.395003Z","level":"info","event":"[BEST] rf (f1_macro=0.7756) registered to model registry","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:51:56.395677Z","level":"info","event":"[BEST] Run ID: 6c479fef7d954de1a2bbce1e8eb7727f","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:51:56.392770","level":"info","event":"Done. Returned value was: {'best_model': 'rf', 'best_f1_score': 0.7755946562398176, 'best_run_id': '6c479fef7d954de1a2bbce1e8eb7727f', 'total_models_trained': 5, 'metrics': [{'model': 'rf', 'accuracy': 0.8066037735849056, 'f1_macro': 0.7755946562398176, 'train_size': 844, 'test_size': 212, 'run_id': '6c479fef7d954de1a2bbce1e8eb7727f'}, {'model': 'svc', 'accuracy': 0.7452830188679245, 'f1_macro': 0.7021669463206037, 'train_size': 844, 'test_size': 212, 'run_id': 'bb4ec4e31bc44ab1bab03035e85cb047'}, {'model': 'logreg', 'accuracy': 0.7216981132075472, 'f1_macro': 0.6861911416840182, 'train_size': 844, 'test_size': 212, 'run_id': 'da2f12a04cf643679dcb5ab3369a8499'}, {'model': 'knn', 'accuracy': 0.7216981132075472, 'f1_macro': 0.6753467224936038, 'train_size': 844, 'test_size': 212, 'run_id': '4b32e8b7ee4c411baa02a117ac923b9b'}, {'model': 'adaboost', 'accuracy': 0.4669811320754717, 'f1_macro': 0.3907922967093258, 'train_size': 844, 'test_size': 212, 'run_id': 'a9b4eab6193e437c8b2150a357dc4282'}]}","logger":"airflow.task.operators.airflow.providers.standard.operators.python.PythonOperator"}
{"timestamp":"2025-09-30T19:51:56.393462","level":"info","event":"Pushing xcom","ti":"RuntimeTaskInstance(id=UUID('01999c2c-b98c-74ec-8c0f-d9c03ef412d2'), task_id='train_covertype_models', dag_id='covertype_mysql_mlflow_train_models', run_id='scheduled__2025-09-30T19:45:00+00:00', try_number=1, map_index=-1, hostname='9d0991a451a4', context_carrier={}, task=<Task(PythonOperator): train_covertype_models>, bundle_instance=LocalDagBundle(name=dags-folder), max_tries=0, start_date=datetime.datetime(2025, 9, 30, 19, 50, 18, 359892, tzinfo=datetime.timezone.utc), end_date=None, state=<TaskInstanceState.RUNNING: 'running'>, is_mapped=False, rendered_map_index=None, log_url='http://localhost:8080/dags/covertype_mysql_mlflow_train_models/runs/scheduled__2025-09-30T19%3A45%3A00%2B00%3A00/tasks/train_covertype_models?try_number=1')","logger":"task"}
