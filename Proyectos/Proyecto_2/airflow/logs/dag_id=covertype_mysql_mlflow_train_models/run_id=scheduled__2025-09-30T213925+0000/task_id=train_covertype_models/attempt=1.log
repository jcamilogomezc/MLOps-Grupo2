{"timestamp":"2025-09-30T21:44:53.957944","level":"info","event":"DAG bundles loaded: dags-folder","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-09-30T21:44:53.964647","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/ETL_Training.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-09-30T21:44:56.560549Z","level":"info","event":"[INFO] batch_number from context: 4","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:44:56.642447","level":"warning","event":"/home/airflow/.local/lib/python3.12/site-packages/airflow/models/connection.py:471: DeprecationWarning: Using Connection.get_connection_from_secrets from `airflow.models` is deprecated.Please use `get` on Connection from sdk(`airflow.sdk.Connection`) instead\n  warnings.warn(\n","logger":"py.warnings"}
{"timestamp":"2025-09-30T21:44:56.826244","level":"warning","event":"empty cryptography key - values will not be stored encrypted.","logger":"airflow.models.crypto"}
{"timestamp":"2025-09-30T21:44:56.829610","level":"info","event":"Connection Retrieved 'mysql_trn'","logger":"airflow.hooks.base"}
{"timestamp":"2025-09-30T21:44:56.829890","level":"warning","event":"This setter is for backward compatibility and should not be used.\nSince the introduction of connection property, the providers listed below breaks due to assigning value to self.connection in their __init__ method.\n* apache-airflow-providers-mysql<5.7.1\n* apache-airflow-providers-elasticsearch<5.5.1\n* apache-airflow-providers-postgres<5.13.0","logger":"airflow.task.hooks.airflow.providers.mysql.hooks.mysql.MySqlHook"}
{"timestamp":"2025-09-30T21:44:56.853872","level":"warning","event":"/opt/airflow/dags/ETL_Training.py:273: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n  df = pd.read_sql(\"\"\"\n","logger":"py.warnings"}
{"timestamp":"2025-09-30T21:44:56.873912Z","level":"info","event":"[TRAIN] Loaded 901 samples from covertype_clean","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:44:56.875034Z","level":"info","event":"[TRAIN] Features shape: (901, 12)","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:44:56.876344Z","level":"info","event":"[TRAIN] Target distribution:","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:44:56.877027Z","level":"info","event":"cover_type","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:44:56.877581Z","level":"info","event":"0     63","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:44:56.877988Z","level":"info","event":"1     65","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:44:56.878641Z","level":"info","event":"2    164","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:44:56.879258Z","level":"info","event":"3    233","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:44:56.879657Z","level":"info","event":"4     72","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:44:56.880252Z","level":"info","event":"5    283","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:44:56.880825Z","level":"info","event":"6     21","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:44:56.881252Z","level":"info","event":"Name: count, dtype: int64","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:44:56.881814Z","level":"info","event":"[TRAIN] Training logreg...","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:45:06.157923Z","level":"error","event":"2025/09/30 21:45:06 WARNING mlflow.models.model: `artifact_path` is deprecated. Please use `name` instead.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:45:15.697592Z","level":"error","event":"\u001b[31m2025/09/30 21:45:15 WARNING mlflow.models.model: Model logged without a signature and input example. Please set `input_example` parameter when logging the model to auto infer the model signature.\u001b[0m","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:45:16.295608Z","level":"info","event":"[TRAIN] Model logreg logged to MLflow successfully","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:45:16.296422Z","level":"info","event":"[TRAIN] logreg - Accuracy: 0.7569, F1-macro: 0.7378, Run ID: d0bc8f9c4c354e70babea8995a79096d","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:45:16.377337Z","level":"info","event":"🏃 View run bn4_logreg at: http://mlflow:5000/#/experiments/1/runs/d0bc8f9c4c354e70babea8995a79096d","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:45:16.378090Z","level":"info","event":"🧪 View experiment at: http://mlflow:5000/#/experiments/1","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:45:16.504051Z","level":"info","event":"[TRAIN] Training rf...","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:45:29.564542Z","level":"error","event":"2025/09/30 21:45:29 WARNING mlflow.models.model: `artifact_path` is deprecated. Please use `name` instead.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:45:38.985738Z","level":"error","event":"\u001b[31m2025/09/30 21:45:38 WARNING mlflow.models.model: Model logged without a signature and input example. Please set `input_example` parameter when logging the model to auto infer the model signature.\u001b[0m","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:45:39.966919Z","level":"info","event":"[TRAIN] Model rf logged to MLflow successfully","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:45:39.967942Z","level":"info","event":"[TRAIN] rf - Accuracy: 0.8398, F1-macro: 0.7758, Run ID: b28ebbcf7d964f36a35b1d735dd48c4f","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:45:40.056395Z","level":"info","event":"🏃 View run bn4_rf at: http://mlflow:5000/#/experiments/1/runs/b28ebbcf7d964f36a35b1d735dd48c4f","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:45:40.057203Z","level":"info","event":"🧪 View experiment at: http://mlflow:5000/#/experiments/1","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:45:40.205510Z","level":"info","event":"[TRAIN] Training svc...","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:45:49.730296Z","level":"error","event":"2025/09/30 21:45:49 WARNING mlflow.models.model: `artifact_path` is deprecated. Please use `name` instead.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:45:57.759482Z","level":"error","event":"\u001b[31m2025/09/30 21:45:57 WARNING mlflow.models.model: Model logged without a signature and input example. Please set `input_example` parameter when logging the model to auto infer the model signature.\u001b[0m","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:45:58.348164Z","level":"info","event":"[TRAIN] Model svc logged to MLflow successfully","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:45:58.348670Z","level":"info","event":"[TRAIN] svc - Accuracy: 0.8011, F1-macro: 0.7466, Run ID: 49e86ef4f8be4d1b82b3a4df4fbf8669","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:45:58.430006Z","level":"info","event":"🏃 View run bn4_svc at: http://mlflow:5000/#/experiments/1/runs/49e86ef4f8be4d1b82b3a4df4fbf8669","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:45:58.448762Z","level":"info","event":"🧪 View experiment at: http://mlflow:5000/#/experiments/1","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:45:58.513200Z","level":"info","event":"[TRAIN] Training knn...","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:46:08.222416Z","level":"error","event":"2025/09/30 21:46:08 WARNING mlflow.models.model: `artifact_path` is deprecated. Please use `name` instead.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:46:16.745735Z","level":"error","event":"\u001b[31m2025/09/30 21:46:16 WARNING mlflow.models.model: Model logged without a signature and input example. Please set `input_example` parameter when logging the model to auto infer the model signature.\u001b[0m","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:46:17.305877Z","level":"info","event":"[TRAIN] Model knn logged to MLflow successfully","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:46:17.306608Z","level":"info","event":"[TRAIN] knn - Accuracy: 0.7790, F1-macro: 0.7257, Run ID: 4d6d93f05f394c0a91b145946a04f52a","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:46:17.365648Z","level":"info","event":"🏃 View run bn4_knn at: http://mlflow:5000/#/experiments/1/runs/4d6d93f05f394c0a91b145946a04f52a","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:46:17.366364Z","level":"info","event":"🧪 View experiment at: http://mlflow:5000/#/experiments/1","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:46:17.460222Z","level":"info","event":"[TRAIN] Training adaboost...","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:46:17.571599Z","level":"error","event":"/home/airflow/.local/lib/python3.12/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:46:17.575577Z","level":"error","event":"  warnings.warn(","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:46:18.960661Z","level":"error","event":"/home/airflow/.local/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:46:18.961488Z","level":"error","event":"  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:46:18.978786Z","level":"error","event":"/home/airflow/.local/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:46:18.979410Z","level":"error","event":"  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:46:18.980058Z","level":"error","event":"/home/airflow/.local/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:46:18.980577Z","level":"error","event":"  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:46:26.272284Z","level":"error","event":"2025/09/30 21:46:26 WARNING mlflow.models.model: `artifact_path` is deprecated. Please use `name` instead.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:46:34.700092Z","level":"error","event":"\u001b[31m2025/09/30 21:46:34 WARNING mlflow.models.model: Model logged without a signature and input example. Please set `input_example` parameter when logging the model to auto infer the model signature.\u001b[0m","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:46:35.420124Z","level":"info","event":"[TRAIN] Model adaboost logged to MLflow successfully","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:46:35.421120Z","level":"info","event":"[TRAIN] adaboost - Accuracy: 0.1547, F1-macro: 0.1182, Run ID: 56e8882021794031ba528ecf66848dbd","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:46:35.519092Z","level":"info","event":"🏃 View run bn4_adaboost at: http://mlflow:5000/#/experiments/1/runs/56e8882021794031ba528ecf66848dbd","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:46:35.520053Z","level":"info","event":"🧪 View experiment at: http://mlflow:5000/#/experiments/1","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:46:35.771085Z","level":"error","event":"Registered model 'CovertypeClassifier' already exists. Creating a new version of this model...","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:46:36.272850Z","level":"error","event":"2025/09/30 21:46:36 WARNING mlflow.tracking._model_registry.fluent: Run with id b28ebbcf7d964f36a35b1d735dd48c4f has no artifacts at artifact path 'model', registering model based on models:/m-e48c2756a7364e19b84ea6a2f3e0822d instead","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:46:36.592531Z","level":"error","event":"2025/09/30 21:46:36 INFO mlflow.store.model_registry.abstract_store: Waiting up to 300 seconds for model version to finish creation. Model name: CovertypeClassifier, version 4","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:46:36.610142Z","level":"error","event":"Created version '4' of model 'CovertypeClassifier'.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:46:36.764090Z","level":"info","event":"[REGISTRY] Best model 'rf' registered as version 4 (Run ID: b28ebbcf7d964f36a35b1d735dd48c4f)","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:46:37.946587Z","level":"info","event":"🏃 View run bn4_model_comparison at: http://mlflow:5000/#/experiments/1/runs/b4949ce8a59442e2a6de4ca90dd25d1f","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:46:37.948000Z","level":"info","event":"🧪 View experiment at: http://mlflow:5000/#/experiments/1","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:46:38.068418Z","level":"info","event":"","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:46:38.070021Z","level":"info","event":"[METRICS] Model Performance Summary:","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:46:38.078673Z","level":"info","event":"   model  accuracy  f1_macro  train_size  test_size                           run_id","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:46:38.080047Z","level":"info","event":"      rf  0.839779  0.775838         720        181 b28ebbcf7d964f36a35b1d735dd48c4f","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:46:38.081443Z","level":"info","event":"     svc  0.801105  0.746583         720        181 49e86ef4f8be4d1b82b3a4df4fbf8669","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:46:38.082930Z","level":"info","event":"  logreg  0.756906  0.737774         720        181 d0bc8f9c4c354e70babea8995a79096d","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:46:38.085234Z","level":"info","event":"     knn  0.779006  0.725731         720        181 4d6d93f05f394c0a91b145946a04f52a","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:46:38.086918Z","level":"info","event":"adaboost  0.154696  0.118196         720        181 56e8882021794031ba528ecf66848dbd","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:46:38.088776Z","level":"info","event":"","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:46:38.090421Z","level":"info","event":"[BEST] rf (f1_macro=0.7758) registered to model registry","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:46:38.091847Z","level":"info","event":"[BEST] Run ID: b28ebbcf7d964f36a35b1d735dd48c4f","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:46:38.085992","level":"info","event":"Done. Returned value was: {'best_model': 'rf', 'best_f1_score': 0.7758376749887289, 'best_run_id': 'b28ebbcf7d964f36a35b1d735dd48c4f', 'total_models_trained': 5, 'metrics': [{'model': 'rf', 'accuracy': 0.8397790055248618, 'f1_macro': 0.7758376749887289, 'train_size': 720, 'test_size': 181, 'run_id': 'b28ebbcf7d964f36a35b1d735dd48c4f'}, {'model': 'svc', 'accuracy': 0.8011049723756906, 'f1_macro': 0.7465834821992458, 'train_size': 720, 'test_size': 181, 'run_id': '49e86ef4f8be4d1b82b3a4df4fbf8669'}, {'model': 'logreg', 'accuracy': 0.7569060773480663, 'f1_macro': 0.7377741409314327, 'train_size': 720, 'test_size': 181, 'run_id': 'd0bc8f9c4c354e70babea8995a79096d'}, {'model': 'knn', 'accuracy': 0.7790055248618785, 'f1_macro': 0.7257309219276058, 'train_size': 720, 'test_size': 181, 'run_id': '4d6d93f05f394c0a91b145946a04f52a'}, {'model': 'adaboost', 'accuracy': 0.15469613259668508, 'f1_macro': 0.11819589624467673, 'train_size': 720, 'test_size': 181, 'run_id': '56e8882021794031ba528ecf66848dbd'}]}","logger":"airflow.task.operators.airflow.providers.standard.operators.python.PythonOperator"}
{"timestamp":"2025-09-30T21:46:38.087101","level":"info","event":"Pushing xcom","ti":"RuntimeTaskInstance(id=UUID('01999c95-8dc4-7b99-8305-f0f81c3f0443'), task_id='train_covertype_models', dag_id='covertype_mysql_mlflow_train_models', run_id='scheduled__2025-09-30T21:39:25+00:00', try_number=1, map_index=-1, hostname='52cad06a454d', context_carrier={}, task=<Task(PythonOperator): train_covertype_models>, bundle_instance=LocalDagBundle(name=dags-folder), max_tries=0, start_date=datetime.datetime(2025, 9, 30, 21, 44, 53, 670108, tzinfo=datetime.timezone.utc), end_date=None, state=<TaskInstanceState.RUNNING: 'running'>, is_mapped=False, rendered_map_index=None, log_url='http://localhost:8080/dags/covertype_mysql_mlflow_train_models/runs/scheduled__2025-09-30T21%3A39%3A25%2B00%3A00/tasks/train_covertype_models?try_number=1')","logger":"task"}
