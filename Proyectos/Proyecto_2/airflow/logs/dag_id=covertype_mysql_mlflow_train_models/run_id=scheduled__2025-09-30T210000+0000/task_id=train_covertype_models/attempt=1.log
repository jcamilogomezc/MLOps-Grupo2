{"timestamp":"2025-09-30T21:05:20.918042","level":"info","event":"DAG bundles loaded: dags-folder","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-09-30T21:05:20.918920","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/ETL_Training.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-09-30T21:05:23.662608Z","level":"info","event":"[INFO] batch_number from context: 2","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:05:23.751241","level":"warning","event":"/home/airflow/.local/lib/python3.12/site-packages/airflow/models/connection.py:471: DeprecationWarning: Using Connection.get_connection_from_secrets from `airflow.models` is deprecated.Please use `get` on Connection from sdk(`airflow.sdk.Connection`) instead\n  warnings.warn(\n","logger":"py.warnings"}
{"timestamp":"2025-09-30T21:05:23.989734","level":"warning","event":"empty cryptography key - values will not be stored encrypted.","logger":"airflow.models.crypto"}
{"timestamp":"2025-09-30T21:05:23.992968","level":"info","event":"Connection Retrieved 'mysql_trn'","logger":"airflow.hooks.base"}
{"timestamp":"2025-09-30T21:05:23.993261","level":"warning","event":"This setter is for backward compatibility and should not be used.\nSince the introduction of connection property, the providers listed below breaks due to assigning value to self.connection in their __init__ method.\n* apache-airflow-providers-mysql<5.7.1\n* apache-airflow-providers-elasticsearch<5.5.1\n* apache-airflow-providers-postgres<5.13.0","logger":"airflow.task.hooks.airflow.providers.mysql.hooks.mysql.MySqlHook"}
{"timestamp":"2025-09-30T21:05:24.019367","level":"warning","event":"/opt/airflow/dags/ETL_Training.py:273: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n  df = pd.read_sql(\"\"\"\n","logger":"py.warnings"}
{"timestamp":"2025-09-30T21:05:24.045934Z","level":"info","event":"[TRAIN] Loaded 895 samples from covertype_clean","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:05:24.047346Z","level":"info","event":"[TRAIN] Features shape: (895, 12)","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:05:24.049382Z","level":"info","event":"[TRAIN] Target distribution:","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:05:24.049973Z","level":"info","event":"cover_type","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:05:24.050349Z","level":"info","event":"0     49","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:05:24.050746Z","level":"info","event":"1     57","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:05:24.051558Z","level":"info","event":"2    181","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:05:24.052119Z","level":"info","event":"3    243","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:05:24.052498Z","level":"info","event":"4     88","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:05:24.054426Z","level":"info","event":"5    259","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:05:24.054954Z","level":"info","event":"6     18","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:05:24.055504Z","level":"info","event":"Name: count, dtype: int64","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:05:24.056020Z","level":"info","event":"[TRAIN] Training logreg...","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:05:34.082405Z","level":"error","event":"2025/09/30 21:05:34 WARNING mlflow.models.model: `artifact_path` is deprecated. Please use `name` instead.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:05:42.935894Z","level":"error","event":"\u001b[31m2025/09/30 21:05:42 WARNING mlflow.models.model: Model logged without a signature and input example. Please set `input_example` parameter when logging the model to auto infer the model signature.\u001b[0m","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:05:43.610272Z","level":"info","event":"[TRAIN] Model logreg logged to MLflow successfully","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:05:43.612103Z","level":"info","event":"[TRAIN] logreg - Accuracy: 0.6816, F1-macro: 0.6807, Run ID: 2197abc0a0b442e2b79320535a71cd8b","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:05:43.770421Z","level":"info","event":"🏃 View run bn2_logreg at: http://mlflow:5000/#/experiments/1/runs/2197abc0a0b442e2b79320535a71cd8b","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:05:43.772224Z","level":"info","event":"🧪 View experiment at: http://mlflow:5000/#/experiments/1","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:05:43.889518Z","level":"info","event":"[TRAIN] Training rf...","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:05:53.613342Z","level":"error","event":"2025/09/30 21:05:53 WARNING mlflow.models.model: `artifact_path` is deprecated. Please use `name` instead.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:06:01.545838Z","level":"error","event":"\u001b[31m2025/09/30 21:06:01 WARNING mlflow.models.model: Model logged without a signature and input example. Please set `input_example` parameter when logging the model to auto infer the model signature.\u001b[0m","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:06:02.270730Z","level":"info","event":"[TRAIN] Model rf logged to MLflow successfully","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:06:02.271381Z","level":"info","event":"[TRAIN] rf - Accuracy: 0.8045, F1-macro: 0.7453, Run ID: 076108908d5946b799bf2ef71991a1ce","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:06:02.349581Z","level":"info","event":"🏃 View run bn2_rf at: http://mlflow:5000/#/experiments/1/runs/076108908d5946b799bf2ef71991a1ce","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:06:02.350090Z","level":"info","event":"🧪 View experiment at: http://mlflow:5000/#/experiments/1","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:06:02.433125Z","level":"info","event":"[TRAIN] Training svc...","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:06:11.552124Z","level":"error","event":"2025/09/30 21:06:11 WARNING mlflow.models.model: `artifact_path` is deprecated. Please use `name` instead.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:06:19.128809Z","level":"error","event":"\u001b[31m2025/09/30 21:06:19 WARNING mlflow.models.model: Model logged without a signature and input example. Please set `input_example` parameter when logging the model to auto infer the model signature.\u001b[0m","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:06:19.721751Z","level":"info","event":"[TRAIN] Model svc logged to MLflow successfully","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:06:19.722462Z","level":"info","event":"[TRAIN] svc - Accuracy: 0.7877, F1-macro: 0.7819, Run ID: a2091d9f210045c19b433377e04df9e2","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:06:19.797617Z","level":"info","event":"🏃 View run bn2_svc at: http://mlflow:5000/#/experiments/1/runs/a2091d9f210045c19b433377e04df9e2","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:06:19.798401Z","level":"info","event":"🧪 View experiment at: http://mlflow:5000/#/experiments/1","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:06:19.903722Z","level":"info","event":"[TRAIN] Training knn...","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:06:30.676661Z","level":"error","event":"2025/09/30 21:06:30 WARNING mlflow.models.model: `artifact_path` is deprecated. Please use `name` instead.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:06:38.105423Z","level":"error","event":"\u001b[31m2025/09/30 21:06:38 WARNING mlflow.models.model: Model logged without a signature and input example. Please set `input_example` parameter when logging the model to auto infer the model signature.\u001b[0m","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:06:38.767045Z","level":"info","event":"[TRAIN] Model knn logged to MLflow successfully","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:06:38.768768Z","level":"info","event":"[TRAIN] knn - Accuracy: 0.7598, F1-macro: 0.7177, Run ID: af136f2975b44cc5be24eee46b09ad4d","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:06:38.928561Z","level":"info","event":"🏃 View run bn2_knn at: http://mlflow:5000/#/experiments/1/runs/af136f2975b44cc5be24eee46b09ad4d","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:06:38.930297Z","level":"info","event":"🧪 View experiment at: http://mlflow:5000/#/experiments/1","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:06:39.044755Z","level":"info","event":"[TRAIN] Training adaboost...","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:06:39.213928Z","level":"error","event":"/home/airflow/.local/lib/python3.12/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:06:39.214597Z","level":"error","event":"  warnings.warn(","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:06:40.502811Z","level":"error","event":"/home/airflow/.local/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:06:40.508364Z","level":"error","event":"  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:06:40.510371Z","level":"error","event":"/home/airflow/.local/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:06:40.511114Z","level":"error","event":"  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:06:40.513614Z","level":"error","event":"/home/airflow/.local/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:06:40.514876Z","level":"error","event":"  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:06:47.655547Z","level":"error","event":"2025/09/30 21:06:47 WARNING mlflow.models.model: `artifact_path` is deprecated. Please use `name` instead.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:06:56.443667Z","level":"error","event":"\u001b[31m2025/09/30 21:06:56 WARNING mlflow.models.model: Model logged without a signature and input example. Please set `input_example` parameter when logging the model to auto infer the model signature.\u001b[0m","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:06:57.195199Z","level":"info","event":"[TRAIN] Model adaboost logged to MLflow successfully","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:06:57.197061Z","level":"info","event":"[TRAIN] adaboost - Accuracy: 0.2793, F1-macro: 0.1555, Run ID: e8c5c1e9296345d0ab75cc4145ec4c65","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:06:57.274317Z","level":"info","event":"🏃 View run bn2_adaboost at: http://mlflow:5000/#/experiments/1/runs/e8c5c1e9296345d0ab75cc4145ec4c65","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:06:57.274976Z","level":"info","event":"🧪 View experiment at: http://mlflow:5000/#/experiments/1","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:06:57.581539Z","level":"error","event":"Registered model 'CovertypeClassifier' already exists. Creating a new version of this model...","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:06:58.194166Z","level":"error","event":"2025/09/30 21:06:58 WARNING mlflow.tracking._model_registry.fluent: Run with id a2091d9f210045c19b433377e04df9e2 has no artifacts at artifact path 'model', registering model based on models:/m-266e128919cf4dbd8844a28351e823fe instead","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:06:58.322886Z","level":"error","event":"2025/09/30 21:06:58 INFO mlflow.store.model_registry.abstract_store: Waiting up to 300 seconds for model version to finish creation. Model name: CovertypeClassifier, version 5","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:06:58.325305Z","level":"error","event":"Created version '5' of model 'CovertypeClassifier'.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:06:58.515089Z","level":"info","event":"[REGISTRY] Best model 'svc' registered as version 5 (Run ID: a2091d9f210045c19b433377e04df9e2)","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:06:59.682088Z","level":"info","event":"🏃 View run bn2_model_comparison at: http://mlflow:5000/#/experiments/1/runs/802d09d9ecd74691858ee1c95ab84a8e","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:06:59.682754Z","level":"info","event":"🧪 View experiment at: http://mlflow:5000/#/experiments/1","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:06:59.786772Z","level":"info","event":"","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:06:59.790704Z","level":"info","event":"[METRICS] Model Performance Summary:","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:06:59.791602Z","level":"info","event":"   model  accuracy  f1_macro  train_size  test_size                           run_id","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:06:59.792413Z","level":"info","event":"     svc  0.787709  0.781947         716        179 a2091d9f210045c19b433377e04df9e2","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:06:59.793255Z","level":"info","event":"      rf  0.804469  0.745337         716        179 076108908d5946b799bf2ef71991a1ce","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:06:59.793896Z","level":"info","event":"     knn  0.759777  0.717723         716        179 af136f2975b44cc5be24eee46b09ad4d","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:06:59.794403Z","level":"info","event":"  logreg  0.681564  0.680708         716        179 2197abc0a0b442e2b79320535a71cd8b","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:06:59.794916Z","level":"info","event":"adaboost  0.279330  0.155460         716        179 e8c5c1e9296345d0ab75cc4145ec4c65","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:06:59.795496Z","level":"info","event":"","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:06:59.796148Z","level":"info","event":"[BEST] svc (f1_macro=0.7819) registered to model registry","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:06:59.796758Z","level":"info","event":"[BEST] Run ID: a2091d9f210045c19b433377e04df9e2","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:06:59.797033","level":"info","event":"Done. Returned value was: {'best_model': 'svc', 'best_f1_score': 0.7819466837609446, 'best_run_id': 'a2091d9f210045c19b433377e04df9e2', 'total_models_trained': 5, 'metrics': [{'model': 'svc', 'accuracy': 0.7877094972067039, 'f1_macro': 0.7819466837609446, 'train_size': 716, 'test_size': 179, 'run_id': 'a2091d9f210045c19b433377e04df9e2'}, {'model': 'rf', 'accuracy': 0.8044692737430168, 'f1_macro': 0.745337046648522, 'train_size': 716, 'test_size': 179, 'run_id': '076108908d5946b799bf2ef71991a1ce'}, {'model': 'knn', 'accuracy': 0.7597765363128491, 'f1_macro': 0.7177228247476758, 'train_size': 716, 'test_size': 179, 'run_id': 'af136f2975b44cc5be24eee46b09ad4d'}, {'model': 'logreg', 'accuracy': 0.6815642458100558, 'f1_macro': 0.6807084569428093, 'train_size': 716, 'test_size': 179, 'run_id': '2197abc0a0b442e2b79320535a71cd8b'}, {'model': 'adaboost', 'accuracy': 0.27932960893854747, 'f1_macro': 0.15546029062512576, 'train_size': 716, 'test_size': 179, 'run_id': 'e8c5c1e9296345d0ab75cc4145ec4c65'}]}","logger":"airflow.task.operators.airflow.providers.standard.operators.python.PythonOperator"}
{"timestamp":"2025-09-30T21:06:59.799389","level":"info","event":"Pushing xcom","ti":"RuntimeTaskInstance(id=UUID('01999c71-60cc-77d0-bfdf-355942890245'), task_id='train_covertype_models', dag_id='covertype_mysql_mlflow_train_models', run_id='scheduled__2025-09-30T21:00:00+00:00', try_number=1, map_index=-1, hostname='80bb4df3aa61', context_carrier={}, task=<Task(PythonOperator): train_covertype_models>, bundle_instance=LocalDagBundle(name=dags-folder), max_tries=0, start_date=datetime.datetime(2025, 9, 30, 21, 5, 20, 704894, tzinfo=datetime.timezone.utc), end_date=None, state=<TaskInstanceState.RUNNING: 'running'>, is_mapped=False, rendered_map_index=None, log_url='http://localhost:8080/dags/covertype_mysql_mlflow_train_models/runs/scheduled__2025-09-30T21%3A00%3A00%2B00%3A00/tasks/train_covertype_models?try_number=1')","logger":"task"}
