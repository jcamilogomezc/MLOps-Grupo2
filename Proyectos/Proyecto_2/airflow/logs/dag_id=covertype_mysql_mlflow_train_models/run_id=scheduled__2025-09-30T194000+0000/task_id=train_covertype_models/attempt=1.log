{"timestamp":"2025-09-30T19:47:26.245349","level":"info","event":"DAG bundles loaded: dags-folder","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-09-30T19:47:26.247642","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/ETL_Training.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-09-30T19:47:30.797611Z","level":"info","event":"[INFO] batch_number from context: 8","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:47:31.253922","level":"warning","event":"/home/airflow/.local/lib/python3.12/site-packages/airflow/models/connection.py:471: DeprecationWarning: Using Connection.get_connection_from_secrets from `airflow.models` is deprecated.Please use `get` on Connection from sdk(`airflow.sdk.Connection`) instead\n  warnings.warn(\n","logger":"py.warnings"}
{"timestamp":"2025-09-30T19:47:31.565162","level":"warning","event":"empty cryptography key - values will not be stored encrypted.","logger":"airflow.models.crypto"}
{"timestamp":"2025-09-30T19:47:31.568999","level":"info","event":"Connection Retrieved 'mysql_trn'","logger":"airflow.hooks.base"}
{"timestamp":"2025-09-30T19:47:31.569428","level":"warning","event":"This setter is for backward compatibility and should not be used.\nSince the introduction of connection property, the providers listed below breaks due to assigning value to self.connection in their __init__ method.\n* apache-airflow-providers-mysql<5.7.1\n* apache-airflow-providers-elasticsearch<5.5.1\n* apache-airflow-providers-postgres<5.13.0","logger":"airflow.task.hooks.airflow.providers.mysql.hooks.mysql.MySqlHook"}
{"timestamp":"2025-09-30T19:47:31.600952","level":"warning","event":"/opt/airflow/dags/ETL_Training.py:252: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n  df = pd.read_sql(\"\"\"\n","logger":"py.warnings"}
{"timestamp":"2025-09-30T19:47:31.629507Z","level":"info","event":"[TRAIN] Loaded 927 samples from covertype_clean","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:47:31.631760Z","level":"info","event":"[TRAIN] Features shape: (927, 12)","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:47:31.635728Z","level":"info","event":"[TRAIN] Target distribution:","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:47:31.636354Z","level":"info","event":"cover_type","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:47:31.636855Z","level":"info","event":"0    199","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:47:31.637348Z","level":"info","event":"1    115","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:47:31.637836Z","level":"info","event":"2    120","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:47:31.638415Z","level":"info","event":"4    172","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:47:31.638956Z","level":"info","event":"5    115","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:47:31.639662Z","level":"info","event":"6    206","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:47:31.640268Z","level":"info","event":"Name: count, dtype: int64","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:47:31.644863Z","level":"info","event":"[TRAIN] Training logreg...","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:47:40.481081Z","level":"error","event":"2025/09/30 19:47:40 WARNING mlflow.models.model: `artifact_path` is deprecated. Please use `name` instead.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T19:47:55.887823Z","level":"error","event":"\u001b[31m2025/09/30 19:47:55 WARNING mlflow.models.model: Model logged without a signature and input example. Please set `input_example` parameter when logging the model to auto infer the model signature.\u001b[0m","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T19:47:57.691748Z","level":"info","event":"[TRAIN] Model logreg logged to MLflow successfully","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:47:57.692662Z","level":"info","event":"[TRAIN] logreg - Accuracy: 0.7419, F1-macro: 0.7000, Run ID: dbd3953fe2524bb2bc58e66046e54384","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:47:57.757442Z","level":"info","event":"🏃 View run bn8_logreg at: http://mlflow:5000/#/experiments/1/runs/dbd3953fe2524bb2bc58e66046e54384","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:47:57.758031Z","level":"info","event":"🧪 View experiment at: http://mlflow:5000/#/experiments/1","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:47:57.851782Z","level":"info","event":"[TRAIN] Training rf...","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:48:06.454650Z","level":"error","event":"2025/09/30 19:48:06 WARNING mlflow.models.model: `artifact_path` is deprecated. Please use `name` instead.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T19:48:15.754930Z","level":"error","event":"\u001b[31m2025/09/30 19:48:15 WARNING mlflow.models.model: Model logged without a signature and input example. Please set `input_example` parameter when logging the model to auto infer the model signature.\u001b[0m","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T19:48:16.406144Z","level":"info","event":"[TRAIN] Model rf logged to MLflow successfully","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:48:16.406807Z","level":"info","event":"[TRAIN] rf - Accuracy: 0.8226, F1-macro: 0.7661, Run ID: 43d257d337ae4ca6a5ad382db273cea4","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:48:16.467873Z","level":"info","event":"🏃 View run bn8_rf at: http://mlflow:5000/#/experiments/1/runs/43d257d337ae4ca6a5ad382db273cea4","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:48:16.468518Z","level":"info","event":"🧪 View experiment at: http://mlflow:5000/#/experiments/1","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:48:16.568626Z","level":"info","event":"[TRAIN] Training svc...","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:48:25.745278Z","level":"error","event":"2025/09/30 19:48:25 WARNING mlflow.models.model: `artifact_path` is deprecated. Please use `name` instead.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T19:48:34.354935Z","level":"error","event":"\u001b[31m2025/09/30 19:48:34 WARNING mlflow.models.model: Model logged without a signature and input example. Please set `input_example` parameter when logging the model to auto infer the model signature.\u001b[0m","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T19:48:35.427378Z","level":"info","event":"[TRAIN] Model svc logged to MLflow successfully","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:48:35.428247Z","level":"info","event":"[TRAIN] svc - Accuracy: 0.7473, F1-macro: 0.6934, Run ID: 60716974fbc3452da5900eeedf0f4ac7","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:48:35.505272Z","level":"info","event":"🏃 View run bn8_svc at: http://mlflow:5000/#/experiments/1/runs/60716974fbc3452da5900eeedf0f4ac7","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:48:35.505941Z","level":"info","event":"🧪 View experiment at: http://mlflow:5000/#/experiments/1","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:48:35.604440Z","level":"info","event":"[TRAIN] Training knn...","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:48:43.654333Z","level":"error","event":"2025/09/30 19:48:43 WARNING mlflow.models.model: `artifact_path` is deprecated. Please use `name` instead.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T19:48:50.891011Z","level":"error","event":"\u001b[31m2025/09/30 19:48:50 WARNING mlflow.models.model: Model logged without a signature and input example. Please set `input_example` parameter when logging the model to auto infer the model signature.\u001b[0m","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T19:48:51.507664Z","level":"info","event":"[TRAIN] Model knn logged to MLflow successfully","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:48:51.508597Z","level":"info","event":"[TRAIN] knn - Accuracy: 0.7258, F1-macro: 0.6809, Run ID: ed4e77fe2b0c40f6935fe45565a22cbc","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:48:51.606177Z","level":"info","event":"🏃 View run bn8_knn at: http://mlflow:5000/#/experiments/1/runs/ed4e77fe2b0c40f6935fe45565a22cbc","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:48:51.607180Z","level":"info","event":"🧪 View experiment at: http://mlflow:5000/#/experiments/1","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:48:51.722428Z","level":"info","event":"[TRAIN] Training adaboost...","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:48:51.850686Z","level":"error","event":"/home/airflow/.local/lib/python3.12/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T19:48:51.851501Z","level":"error","event":"  warnings.warn(","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T19:48:53.054789Z","level":"error","event":"/home/airflow/.local/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T19:48:53.055392Z","level":"error","event":"  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T19:48:53.060339Z","level":"error","event":"/home/airflow/.local/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T19:48:53.060955Z","level":"error","event":"  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T19:48:53.063170Z","level":"error","event":"/home/airflow/.local/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T19:48:53.063747Z","level":"error","event":"  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T19:48:59.226238Z","level":"error","event":"2025/09/30 19:48:59 WARNING mlflow.models.model: `artifact_path` is deprecated. Please use `name` instead.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T19:49:09.042349Z","level":"error","event":"\u001b[31m2025/09/30 19:49:09 WARNING mlflow.models.model: Model logged without a signature and input example. Please set `input_example` parameter when logging the model to auto infer the model signature.\u001b[0m","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T19:49:09.855340Z","level":"info","event":"[TRAIN] Model adaboost logged to MLflow successfully","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:49:09.906221Z","level":"info","event":"[TRAIN] adaboost - Accuracy: 0.4839, F1-macro: 0.4015, Run ID: 6966c595dea24f3c8c45f437423cfacc","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:49:10.049071Z","level":"info","event":"🏃 View run bn8_adaboost at: http://mlflow:5000/#/experiments/1/runs/6966c595dea24f3c8c45f437423cfacc","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:49:10.050092Z","level":"info","event":"🧪 View experiment at: http://mlflow:5000/#/experiments/1","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:49:10.207411Z","level":"error","event":"Registered model 'CovertypeClassifier' already exists. Creating a new version of this model...","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T19:49:11.458030Z","level":"error","event":"2025/09/30 19:49:11 WARNING mlflow.tracking._model_registry.fluent: Run with id 43d257d337ae4ca6a5ad382db273cea4 has no artifacts at artifact path 'model', registering model based on models:/m-b70723d90a084d87813ee17fad3f4828 instead","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T19:49:11.731811Z","level":"error","event":"2025/09/30 19:49:11 INFO mlflow.store.model_registry.abstract_store: Waiting up to 300 seconds for model version to finish creation. Model name: CovertypeClassifier, version 5","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T19:49:11.733796Z","level":"error","event":"Created version '5' of model 'CovertypeClassifier'.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T19:49:11.895685Z","level":"info","event":"[REGISTRY] Best model 'rf' registered as version 5 (Run ID: 43d257d337ae4ca6a5ad382db273cea4)","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:49:13.026482Z","level":"info","event":"🏃 View run bn8_model_comparison at: http://mlflow:5000/#/experiments/1/runs/60975d7621a0465989e7d53c90afe0bc","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:49:13.027449Z","level":"info","event":"🧪 View experiment at: http://mlflow:5000/#/experiments/1","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:49:13.139976Z","level":"info","event":"","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:49:13.140886Z","level":"info","event":"[METRICS] Model Performance Summary:","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:49:13.150080Z","level":"info","event":"   model  accuracy  f1_macro  train_size  test_size                           run_id","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:49:13.151019Z","level":"info","event":"      rf  0.822581  0.766084         741        186 43d257d337ae4ca6a5ad382db273cea4","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:49:13.151919Z","level":"info","event":"  logreg  0.741935  0.699958         741        186 dbd3953fe2524bb2bc58e66046e54384","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:49:13.152815Z","level":"info","event":"     svc  0.747312  0.693375         741        186 60716974fbc3452da5900eeedf0f4ac7","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:49:13.153655Z","level":"info","event":"     knn  0.725806  0.680877         741        186 ed4e77fe2b0c40f6935fe45565a22cbc","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:49:13.154687Z","level":"info","event":"adaboost  0.483871  0.401538         741        186 6966c595dea24f3c8c45f437423cfacc","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:49:13.155650Z","level":"info","event":"","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:49:13.156376Z","level":"info","event":"[BEST] rf (f1_macro=0.7661) registered to model registry","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:49:13.157431Z","level":"info","event":"[BEST] Run ID: 43d257d337ae4ca6a5ad382db273cea4","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:49:13.161076","level":"info","event":"Done. Returned value was: {'best_model': 'rf', 'best_f1_score': 0.766084008571737, 'best_run_id': '43d257d337ae4ca6a5ad382db273cea4', 'total_models_trained': 5, 'metrics': [{'model': 'rf', 'accuracy': 0.8225806451612904, 'f1_macro': 0.766084008571737, 'train_size': 741, 'test_size': 186, 'run_id': '43d257d337ae4ca6a5ad382db273cea4'}, {'model': 'logreg', 'accuracy': 0.7419354838709677, 'f1_macro': 0.6999579074607626, 'train_size': 741, 'test_size': 186, 'run_id': 'dbd3953fe2524bb2bc58e66046e54384'}, {'model': 'svc', 'accuracy': 0.7473118279569892, 'f1_macro': 0.6933748279943167, 'train_size': 741, 'test_size': 186, 'run_id': '60716974fbc3452da5900eeedf0f4ac7'}, {'model': 'knn', 'accuracy': 0.7258064516129032, 'f1_macro': 0.6808765449420324, 'train_size': 741, 'test_size': 186, 'run_id': 'ed4e77fe2b0c40f6935fe45565a22cbc'}, {'model': 'adaboost', 'accuracy': 0.4838709677419355, 'f1_macro': 0.4015378934448397, 'train_size': 741, 'test_size': 186, 'run_id': '6966c595dea24f3c8c45f437423cfacc'}]}","logger":"airflow.task.operators.airflow.providers.standard.operators.python.PythonOperator"}
{"timestamp":"2025-09-30T19:49:13.161997","level":"info","event":"Pushing xcom","ti":"RuntimeTaskInstance(id=UUID('01999c28-be9b-7f58-bb9b-31ec1ae10c2b'), task_id='train_covertype_models', dag_id='covertype_mysql_mlflow_train_models', run_id='scheduled__2025-09-30T19:40:00+00:00', try_number=1, map_index=-1, hostname='9d0991a451a4', context_carrier={}, task=<Task(PythonOperator): train_covertype_models>, bundle_instance=LocalDagBundle(name=dags-folder), max_tries=0, start_date=datetime.datetime(2025, 9, 30, 19, 47, 25, 865841, tzinfo=datetime.timezone.utc), end_date=None, state=<TaskInstanceState.RUNNING: 'running'>, is_mapped=False, rendered_map_index=None, log_url='http://localhost:8080/dags/covertype_mysql_mlflow_train_models/runs/scheduled__2025-09-30T19%3A40%3A00%2B00%3A00/tasks/train_covertype_models?try_number=1')","logger":"task"}
