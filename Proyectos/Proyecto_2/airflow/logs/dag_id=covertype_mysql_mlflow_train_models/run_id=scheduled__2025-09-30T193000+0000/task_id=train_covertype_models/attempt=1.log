{"timestamp":"2025-09-30T19:39:53.248649","level":"info","event":"DAG bundles loaded: dags-folder","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-09-30T19:39:53.251103","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/ETL_Training.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-09-30T19:39:56.797731Z","level":"info","event":"[INFO] batch_number from context: 7","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:39:56.922827","level":"warning","event":"/home/airflow/.local/lib/python3.12/site-packages/airflow/models/connection.py:471: DeprecationWarning: Using Connection.get_connection_from_secrets from `airflow.models` is deprecated.Please use `get` on Connection from sdk(`airflow.sdk.Connection`) instead\n  warnings.warn(\n","logger":"py.warnings"}
{"timestamp":"2025-09-30T19:39:57.107505","level":"warning","event":"empty cryptography key - values will not be stored encrypted.","logger":"airflow.models.crypto"}
{"timestamp":"2025-09-30T19:39:57.111075","level":"info","event":"Connection Retrieved 'mysql_trn'","logger":"airflow.hooks.base"}
{"timestamp":"2025-09-30T19:39:57.111273","level":"warning","event":"This setter is for backward compatibility and should not be used.\nSince the introduction of connection property, the providers listed below breaks due to assigning value to self.connection in their __init__ method.\n* apache-airflow-providers-mysql<5.7.1\n* apache-airflow-providers-elasticsearch<5.5.1\n* apache-airflow-providers-postgres<5.13.0","logger":"airflow.task.hooks.airflow.providers.mysql.hooks.mysql.MySqlHook"}
{"timestamp":"2025-09-30T19:39:57.134833","level":"warning","event":"/opt/airflow/dags/ETL_Training.py:252: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n  df = pd.read_sql(\"\"\"\n","logger":"py.warnings"}
{"timestamp":"2025-09-30T19:39:57.149507Z","level":"info","event":"[TRAIN] Loaded 615 samples from covertype_clean","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:39:57.150488Z","level":"info","event":"[TRAIN] Features shape: (615, 12)","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:39:57.152085Z","level":"info","event":"[TRAIN] Target distribution:","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:39:57.152524Z","level":"info","event":"cover_type","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:39:57.152922Z","level":"info","event":"0    134","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:39:57.153544Z","level":"info","event":"1     79","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:39:57.153988Z","level":"info","event":"2     83","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:39:57.154378Z","level":"info","event":"4    108","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:39:57.154745Z","level":"info","event":"5     70","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:39:57.155107Z","level":"info","event":"6    141","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:39:57.155476Z","level":"info","event":"Name: count, dtype: int64","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:39:57.156050Z","level":"info","event":"[TRAIN] Training logreg...","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:40:08.096994Z","level":"error","event":"2025/09/30 19:40:08 WARNING mlflow.models.model: `artifact_path` is deprecated. Please use `name` instead.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T19:40:17.160352Z","level":"error","event":"\u001b[31m2025/09/30 19:40:17 WARNING mlflow.models.model: Model logged without a signature and input example. Please set `input_example` parameter when logging the model to auto infer the model signature.\u001b[0m","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T19:40:20.221502Z","level":"info","event":"[TRAIN] Model logreg logged to MLflow successfully","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:40:20.222330Z","level":"info","event":"[TRAIN] logreg - Accuracy: 0.7073, F1-macro: 0.6883, Run ID: ba398cbe753e488583bfe0198d44f8b6","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:40:20.302522Z","level":"info","event":"🏃 View run bn7_logreg at: http://mlflow:5000/#/experiments/1/runs/ba398cbe753e488583bfe0198d44f8b6","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:40:20.303114Z","level":"info","event":"🧪 View experiment at: http://mlflow:5000/#/experiments/1","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:40:20.404835Z","level":"info","event":"[TRAIN] Training rf...","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:40:28.301379Z","level":"error","event":"2025/09/30 19:40:28 WARNING mlflow.models.model: `artifact_path` is deprecated. Please use `name` instead.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T19:40:37.118262Z","level":"error","event":"\u001b[31m2025/09/30 19:40:37 WARNING mlflow.models.model: Model logged without a signature and input example. Please set `input_example` parameter when logging the model to auto infer the model signature.\u001b[0m","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T19:40:37.910797Z","level":"info","event":"[TRAIN] Model rf logged to MLflow successfully","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:40:37.912831Z","level":"info","event":"[TRAIN] rf - Accuracy: 0.8374, F1-macro: 0.8308, Run ID: 99ffecc1bc0e4395a8492bba51afc227","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:40:37.969991Z","level":"info","event":"🏃 View run bn7_rf at: http://mlflow:5000/#/experiments/1/runs/99ffecc1bc0e4395a8492bba51afc227","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:40:37.970658Z","level":"info","event":"🧪 View experiment at: http://mlflow:5000/#/experiments/1","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:40:38.062620Z","level":"info","event":"[TRAIN] Training svc...","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:40:46.555265Z","level":"error","event":"2025/09/30 19:40:46 WARNING mlflow.models.model: `artifact_path` is deprecated. Please use `name` instead.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T19:40:54.929904Z","level":"error","event":"\u001b[31m2025/09/30 19:40:54 WARNING mlflow.models.model: Model logged without a signature and input example. Please set `input_example` parameter when logging the model to auto infer the model signature.\u001b[0m","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T19:40:55.509160Z","level":"info","event":"[TRAIN] Model svc logged to MLflow successfully","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:40:55.509929Z","level":"info","event":"[TRAIN] svc - Accuracy: 0.7642, F1-macro: 0.7448, Run ID: f2b970d2a0144ac29267bfeadc6b92e4","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:40:55.574117Z","level":"info","event":"🏃 View run bn7_svc at: http://mlflow:5000/#/experiments/1/runs/f2b970d2a0144ac29267bfeadc6b92e4","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:40:55.574749Z","level":"info","event":"🧪 View experiment at: http://mlflow:5000/#/experiments/1","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:40:55.671016Z","level":"info","event":"[TRAIN] Training knn...","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:41:03.566888Z","level":"error","event":"2025/09/30 19:41:03 WARNING mlflow.models.model: `artifact_path` is deprecated. Please use `name` instead.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T19:41:11.662509Z","level":"error","event":"\u001b[31m2025/09/30 19:41:11 WARNING mlflow.models.model: Model logged without a signature and input example. Please set `input_example` parameter when logging the model to auto infer the model signature.\u001b[0m","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T19:41:12.219576Z","level":"info","event":"[TRAIN] Model knn logged to MLflow successfully","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:41:12.220379Z","level":"info","event":"[TRAIN] knn - Accuracy: 0.7154, F1-macro: 0.6919, Run ID: 0875dc99ccd041219d938c721c53956c","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:41:12.283392Z","level":"info","event":"🏃 View run bn7_knn at: http://mlflow:5000/#/experiments/1/runs/0875dc99ccd041219d938c721c53956c","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:41:12.284119Z","level":"info","event":"🧪 View experiment at: http://mlflow:5000/#/experiments/1","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:41:12.376776Z","level":"info","event":"[TRAIN] Training adaboost...","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:41:12.514921Z","level":"error","event":"/home/airflow/.local/lib/python3.12/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T19:41:12.515469Z","level":"error","event":"  warnings.warn(","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T19:41:13.844795Z","level":"error","event":"/home/airflow/.local/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T19:41:13.848154Z","level":"error","event":"  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T19:41:13.868336Z","level":"error","event":"/home/airflow/.local/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T19:41:13.869005Z","level":"error","event":"  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T19:41:13.869467Z","level":"error","event":"/home/airflow/.local/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T19:41:13.869925Z","level":"error","event":"  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T19:41:21.583871Z","level":"error","event":"2025/09/30 19:41:21 WARNING mlflow.models.model: `artifact_path` is deprecated. Please use `name` instead.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T19:41:29.019981Z","level":"error","event":"\u001b[31m2025/09/30 19:41:29 WARNING mlflow.models.model: Model logged without a signature and input example. Please set `input_example` parameter when logging the model to auto infer the model signature.\u001b[0m","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T19:41:29.870603Z","level":"info","event":"[TRAIN] Model adaboost logged to MLflow successfully","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:41:29.871169Z","level":"info","event":"[TRAIN] adaboost - Accuracy: 0.3659, F1-macro: 0.1763, Run ID: c85eadfdbd944673813fcb6998f034ea","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:41:29.935384Z","level":"info","event":"🏃 View run bn7_adaboost at: http://mlflow:5000/#/experiments/1/runs/c85eadfdbd944673813fcb6998f034ea","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:41:29.936117Z","level":"info","event":"🧪 View experiment at: http://mlflow:5000/#/experiments/1","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:41:30.154811Z","level":"error","event":"Registered model 'CovertypeClassifier' already exists. Creating a new version of this model...","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T19:41:30.633628Z","level":"error","event":"2025/09/30 19:41:30 WARNING mlflow.tracking._model_registry.fluent: Run with id 99ffecc1bc0e4395a8492bba51afc227 has no artifacts at artifact path 'model', registering model based on models:/m-ef341d75cf064af5a3a9538c3625d71f instead","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T19:41:30.797082Z","level":"error","event":"2025/09/30 19:41:30 INFO mlflow.store.model_registry.abstract_store: Waiting up to 300 seconds for model version to finish creation. Model name: CovertypeClassifier, version 3","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T19:41:30.799169Z","level":"error","event":"Created version '3' of model 'CovertypeClassifier'.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T19:41:30.960595Z","level":"info","event":"[REGISTRY] Best model 'rf' registered as version 3 (Run ID: 99ffecc1bc0e4395a8492bba51afc227)","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:41:31.908146Z","level":"info","event":"🏃 View run bn7_model_comparison at: http://mlflow:5000/#/experiments/1/runs/130ed56901cc400b9b51f5e916c6254e","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:41:31.908825Z","level":"info","event":"🧪 View experiment at: http://mlflow:5000/#/experiments/1","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:41:32.004952Z","level":"info","event":"","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:41:32.005726Z","level":"info","event":"[METRICS] Model Performance Summary:","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:41:32.014323Z","level":"info","event":"   model  accuracy  f1_macro  train_size  test_size                           run_id","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:41:32.015091Z","level":"info","event":"      rf  0.837398  0.830787         492        123 99ffecc1bc0e4395a8492bba51afc227","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:41:32.015670Z","level":"info","event":"     svc  0.764228  0.744785         492        123 f2b970d2a0144ac29267bfeadc6b92e4","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:41:32.016188Z","level":"info","event":"     knn  0.715447  0.691911         492        123 0875dc99ccd041219d938c721c53956c","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:41:32.016675Z","level":"info","event":"  logreg  0.707317  0.688319         492        123 ba398cbe753e488583bfe0198d44f8b6","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:41:32.017235Z","level":"info","event":"adaboost  0.365854  0.176307         492        123 c85eadfdbd944673813fcb6998f034ea","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:41:32.017849Z","level":"info","event":"","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:41:32.018388Z","level":"info","event":"[BEST] rf (f1_macro=0.8308) registered to model registry","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:41:32.019142Z","level":"info","event":"[BEST] Run ID: 99ffecc1bc0e4395a8492bba51afc227","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T19:41:32.022594","level":"info","event":"Done. Returned value was: {'best_model': 'rf', 'best_f1_score': 0.8307874884286105, 'best_run_id': '99ffecc1bc0e4395a8492bba51afc227', 'total_models_trained': 5, 'metrics': [{'model': 'rf', 'accuracy': 0.8373983739837398, 'f1_macro': 0.8307874884286105, 'train_size': 492, 'test_size': 123, 'run_id': '99ffecc1bc0e4395a8492bba51afc227'}, {'model': 'svc', 'accuracy': 0.7642276422764228, 'f1_macro': 0.7447848070809554, 'train_size': 492, 'test_size': 123, 'run_id': 'f2b970d2a0144ac29267bfeadc6b92e4'}, {'model': 'knn', 'accuracy': 0.7154471544715447, 'f1_macro': 0.6919105316682844, 'train_size': 492, 'test_size': 123, 'run_id': '0875dc99ccd041219d938c721c53956c'}, {'model': 'logreg', 'accuracy': 0.7073170731707317, 'f1_macro': 0.688318779851745, 'train_size': 492, 'test_size': 123, 'run_id': 'ba398cbe753e488583bfe0198d44f8b6'}, {'model': 'adaboost', 'accuracy': 0.36585365853658536, 'f1_macro': 0.17630739353585798, 'train_size': 492, 'test_size': 123, 'run_id': 'c85eadfdbd944673813fcb6998f034ea'}]}","logger":"airflow.task.operators.airflow.providers.standard.operators.python.PythonOperator"}
{"timestamp":"2025-09-30T19:41:32.023485","level":"info","event":"Pushing xcom","ti":"RuntimeTaskInstance(id=UUID('01999c23-1d1e-79e3-ac5c-ba1ad26d0faf'), task_id='train_covertype_models', dag_id='covertype_mysql_mlflow_train_models', run_id='scheduled__2025-09-30T19:30:00+00:00', try_number=1, map_index=-1, hostname='d73ec3e7b977', context_carrier={}, task=<Task(PythonOperator): train_covertype_models>, bundle_instance=LocalDagBundle(name=dags-folder), max_tries=0, start_date=datetime.datetime(2025, 9, 30, 19, 39, 52, 825003, tzinfo=datetime.timezone.utc), end_date=None, state=<TaskInstanceState.RUNNING: 'running'>, is_mapped=False, rendered_map_index=None, log_url='http://localhost:8080/dags/covertype_mysql_mlflow_train_models/runs/scheduled__2025-09-30T19%3A30%3A00%2B00%3A00/tasks/train_covertype_models?try_number=1')","logger":"task"}
