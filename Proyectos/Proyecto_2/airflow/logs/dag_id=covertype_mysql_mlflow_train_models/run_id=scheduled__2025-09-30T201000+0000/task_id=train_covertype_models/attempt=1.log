{"timestamp":"2025-09-30T20:15:22.232233","level":"info","event":"DAG bundles loaded: dags-folder","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-09-30T20:15:22.233284","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/ETL_Training.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-09-30T20:15:24.562686Z","level":"info","event":"[INFO] batch_number from context: 2","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:15:24.644001","level":"warning","event":"/home/airflow/.local/lib/python3.12/site-packages/airflow/models/connection.py:471: DeprecationWarning: Using Connection.get_connection_from_secrets from `airflow.models` is deprecated.Please use `get` on Connection from sdk(`airflow.sdk.Connection`) instead\n  warnings.warn(\n","logger":"py.warnings"}
{"timestamp":"2025-09-30T20:15:24.807120","level":"warning","event":"empty cryptography key - values will not be stored encrypted.","logger":"airflow.models.crypto"}
{"timestamp":"2025-09-30T20:15:24.809971","level":"info","event":"Connection Retrieved 'mysql_trn'","logger":"airflow.hooks.base"}
{"timestamp":"2025-09-30T20:15:24.810180","level":"warning","event":"This setter is for backward compatibility and should not be used.\nSince the introduction of connection property, the providers listed below breaks due to assigning value to self.connection in their __init__ method.\n* apache-airflow-providers-mysql<5.7.1\n* apache-airflow-providers-elasticsearch<5.5.1\n* apache-airflow-providers-postgres<5.13.0","logger":"airflow.task.hooks.airflow.providers.mysql.hooks.mysql.MySqlHook"}
{"timestamp":"2025-09-30T20:15:24.831104","level":"warning","event":"/opt/airflow/dags/ETL_Training.py:279: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n  df = pd.read_sql(\"\"\"\n","logger":"py.warnings"}
{"timestamp":"2025-09-30T20:15:24.840113Z","level":"info","event":"[TRAIN] Loaded 423 samples from covertype_clean","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:15:24.841092Z","level":"info","event":"[TRAIN] Features shape: (423, 12)","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:15:24.842892Z","level":"info","event":"[TRAIN] Target distribution:","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:15:24.843489Z","level":"info","event":"cover_type","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:15:24.844053Z","level":"info","event":"0     26","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:15:24.844594Z","level":"info","event":"1     16","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:15:24.845156Z","level":"info","event":"2     95","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:15:24.845638Z","level":"info","event":"3    105","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:15:24.846185Z","level":"info","event":"4     46","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:15:24.846736Z","level":"info","event":"5    129","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:15:24.847299Z","level":"info","event":"6      6","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:15:24.847815Z","level":"info","event":"Name: count, dtype: int64","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:15:24.848355Z","level":"info","event":"[TRAIN] Training logreg...","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:15:34.620823Z","level":"error","event":"2025/09/30 20:15:34 WARNING mlflow.models.model: `artifact_path` is deprecated. Please use `name` instead.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T20:15:44.001656Z","level":"error","event":"\u001b[31m2025/09/30 20:15:44 WARNING mlflow.models.model: Model logged without a signature and input example. Please set `input_example` parameter when logging the model to auto infer the model signature.\u001b[0m","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T20:15:44.551078Z","level":"info","event":"[TRAIN] Model logreg logged to MLflow successfully","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:15:44.551874Z","level":"info","event":"[TRAIN] logreg - Accuracy: 0.7294, F1-macro: 0.7510, Run ID: 15292027d3144a31b377a39a06377583","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:15:44.609222Z","level":"info","event":"🏃 View run bn2_logreg at: http://mlflow:5000/#/experiments/1/runs/15292027d3144a31b377a39a06377583","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:15:44.609764Z","level":"info","event":"🧪 View experiment at: http://mlflow:5000/#/experiments/1","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:15:44.727283Z","level":"info","event":"[TRAIN] Training rf...","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:15:53.571399Z","level":"error","event":"2025/09/30 20:15:53 WARNING mlflow.models.model: `artifact_path` is deprecated. Please use `name` instead.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T20:16:02.513714Z","level":"error","event":"\u001b[31m2025/09/30 20:16:02 WARNING mlflow.models.model: Model logged without a signature and input example. Please set `input_example` parameter when logging the model to auto infer the model signature.\u001b[0m","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T20:16:03.189039Z","level":"info","event":"[TRAIN] Model rf logged to MLflow successfully","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:16:03.189841Z","level":"info","event":"[TRAIN] rf - Accuracy: 0.7529, F1-macro: 0.8016, Run ID: d67fdba3cda648b9916eb9a4e11ed345","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:16:03.261925Z","level":"info","event":"🏃 View run bn2_rf at: http://mlflow:5000/#/experiments/1/runs/d67fdba3cda648b9916eb9a4e11ed345","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:16:03.262473Z","level":"info","event":"🧪 View experiment at: http://mlflow:5000/#/experiments/1","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:16:03.367102Z","level":"info","event":"[TRAIN] Training svc...","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:16:13.777584Z","level":"error","event":"2025/09/30 20:16:13 WARNING mlflow.models.model: `artifact_path` is deprecated. Please use `name` instead.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T20:16:21.680859Z","level":"error","event":"\u001b[31m2025/09/30 20:16:21 WARNING mlflow.models.model: Model logged without a signature and input example. Please set `input_example` parameter when logging the model to auto infer the model signature.\u001b[0m","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T20:16:22.222893Z","level":"info","event":"[TRAIN] Model svc logged to MLflow successfully","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:16:22.223924Z","level":"info","event":"[TRAIN] svc - Accuracy: 0.7529, F1-macro: 0.7801, Run ID: 9f07f38329f74610af384e49372db195","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:16:22.284912Z","level":"info","event":"🏃 View run bn2_svc at: http://mlflow:5000/#/experiments/1/runs/9f07f38329f74610af384e49372db195","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:16:22.285459Z","level":"info","event":"🧪 View experiment at: http://mlflow:5000/#/experiments/1","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:16:22.380598Z","level":"info","event":"[TRAIN] Training knn...","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:16:30.716769Z","level":"error","event":"2025/09/30 20:16:30 WARNING mlflow.models.model: `artifact_path` is deprecated. Please use `name` instead.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T20:16:38.206165Z","level":"error","event":"\u001b[31m2025/09/30 20:16:38 WARNING mlflow.models.model: Model logged without a signature and input example. Please set `input_example` parameter when logging the model to auto infer the model signature.\u001b[0m","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T20:16:38.782686Z","level":"info","event":"[TRAIN] Model knn logged to MLflow successfully","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:16:38.783279Z","level":"info","event":"[TRAIN] knn - Accuracy: 0.6824, F1-macro: 0.7346, Run ID: 8bc69b43567344419ed9094b72abbe31","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:16:38.847057Z","level":"info","event":"🏃 View run bn2_knn at: http://mlflow:5000/#/experiments/1/runs/8bc69b43567344419ed9094b72abbe31","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:16:38.847691Z","level":"info","event":"🧪 View experiment at: http://mlflow:5000/#/experiments/1","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:16:38.938219Z","level":"info","event":"[TRAIN] Training adaboost...","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:16:39.243549Z","level":"error","event":"/home/airflow/.local/lib/python3.12/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T20:16:39.244327Z","level":"error","event":"  warnings.warn(","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T20:16:40.731055Z","level":"error","event":"/home/airflow/.local/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T20:16:40.732701Z","level":"error","event":"  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T20:16:40.775006Z","level":"error","event":"/home/airflow/.local/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T20:16:40.776284Z","level":"error","event":"  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T20:16:40.777497Z","level":"error","event":"/home/airflow/.local/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T20:16:40.778819Z","level":"error","event":"  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T20:16:50.396958Z","level":"error","event":"2025/09/30 20:16:50 WARNING mlflow.models.model: `artifact_path` is deprecated. Please use `name` instead.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T20:16:58.176291Z","level":"error","event":"\u001b[31m2025/09/30 20:16:58 WARNING mlflow.models.model: Model logged without a signature and input example. Please set `input_example` parameter when logging the model to auto infer the model signature.\u001b[0m","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T20:16:58.756823Z","level":"info","event":"[TRAIN] Model adaboost logged to MLflow successfully","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:16:58.757511Z","level":"info","event":"[TRAIN] adaboost - Accuracy: 0.4353, F1-macro: 0.2198, Run ID: 018319a13b414918b27780df1aa827a8","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:16:58.857976Z","level":"info","event":"🏃 View run bn2_adaboost at: http://mlflow:5000/#/experiments/1/runs/018319a13b414918b27780df1aa827a8","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:16:58.858793Z","level":"info","event":"🧪 View experiment at: http://mlflow:5000/#/experiments/1","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:16:59.087736Z","level":"error","event":"Registered model 'CovertypeClassifier' already exists. Creating a new version of this model...","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T20:16:59.552386Z","level":"error","event":"2025/09/30 20:16:59 WARNING mlflow.tracking._model_registry.fluent: Run with id d67fdba3cda648b9916eb9a4e11ed345 has no artifacts at artifact path 'model', registering model based on models:/m-f1281a95cfd44ba391f1bd515cf750d9 instead","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T20:16:59.692080Z","level":"error","event":"2025/09/30 20:16:59 INFO mlflow.store.model_registry.abstract_store: Waiting up to 300 seconds for model version to finish creation. Model name: CovertypeClassifier, version 2","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T20:16:59.697200Z","level":"error","event":"Created version '2' of model 'CovertypeClassifier'.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T20:16:59.924930Z","level":"info","event":"[REGISTRY] Best model 'rf' registered as version 2 (Run ID: d67fdba3cda648b9916eb9a4e11ed345)","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:17:00.912839Z","level":"info","event":"🏃 View run bn2_model_comparison at: http://mlflow:5000/#/experiments/1/runs/9714c8130ed74e8d8011e1a6fa115770","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:17:00.913546Z","level":"info","event":"🧪 View experiment at: http://mlflow:5000/#/experiments/1","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:17:01.025049Z","level":"info","event":"","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:17:01.027651Z","level":"info","event":"[METRICS] Model Performance Summary:","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:17:01.035741Z","level":"info","event":"   model  accuracy  f1_macro  train_size  test_size                           run_id","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:17:01.037331Z","level":"info","event":"      rf  0.752941  0.801619         338         85 d67fdba3cda648b9916eb9a4e11ed345","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:17:01.038202Z","level":"info","event":"     svc  0.752941  0.780085         338         85 9f07f38329f74610af384e49372db195","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:17:01.038764Z","level":"info","event":"  logreg  0.729412  0.750985         338         85 15292027d3144a31b377a39a06377583","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:17:01.039358Z","level":"info","event":"     knn  0.682353  0.734611         338         85 8bc69b43567344419ed9094b72abbe31","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:17:01.039939Z","level":"info","event":"adaboost  0.435294  0.219789         338         85 018319a13b414918b27780df1aa827a8","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:17:01.040514Z","level":"info","event":"","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:17:01.041230Z","level":"info","event":"[BEST] rf (f1_macro=0.8016) registered to model registry","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:17:01.041783Z","level":"info","event":"[BEST] Run ID: d67fdba3cda648b9916eb9a4e11ed345","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:17:01.040443","level":"info","event":"Done. Returned value was: {'best_model': 'rf', 'best_f1_score': 0.8016191984039993, 'best_run_id': 'd67fdba3cda648b9916eb9a4e11ed345', 'total_models_trained': 5, 'metrics': [{'model': 'rf', 'accuracy': 0.7529411764705882, 'f1_macro': 0.8016191984039993, 'train_size': 338, 'test_size': 85, 'run_id': 'd67fdba3cda648b9916eb9a4e11ed345'}, {'model': 'svc', 'accuracy': 0.7529411764705882, 'f1_macro': 0.7800848131460375, 'train_size': 338, 'test_size': 85, 'run_id': '9f07f38329f74610af384e49372db195'}, {'model': 'logreg', 'accuracy': 0.7294117647058823, 'f1_macro': 0.7509853318037462, 'train_size': 338, 'test_size': 85, 'run_id': '15292027d3144a31b377a39a06377583'}, {'model': 'knn', 'accuracy': 0.6823529411764706, 'f1_macro': 0.7346106549741016, 'train_size': 338, 'test_size': 85, 'run_id': '8bc69b43567344419ed9094b72abbe31'}, {'model': 'adaboost', 'accuracy': 0.43529411764705883, 'f1_macro': 0.21978913581347662, 'train_size': 338, 'test_size': 85, 'run_id': '018319a13b414918b27780df1aa827a8'}]}","logger":"airflow.task.operators.airflow.providers.standard.operators.python.PythonOperator"}
{"timestamp":"2025-09-30T20:17:01.041343","level":"info","event":"Pushing xcom","ti":"RuntimeTaskInstance(id=UUID('01999c43-9b66-7110-8ecf-8554efbd288f'), task_id='train_covertype_models', dag_id='covertype_mysql_mlflow_train_models', run_id='scheduled__2025-09-30T20:10:00+00:00', try_number=1, map_index=-1, hostname='5b92881ec6ca', context_carrier={}, task=<Task(PythonOperator): train_covertype_models>, bundle_instance=LocalDagBundle(name=dags-folder), max_tries=0, start_date=datetime.datetime(2025, 9, 30, 20, 15, 22, 32897, tzinfo=datetime.timezone.utc), end_date=None, state=<TaskInstanceState.RUNNING: 'running'>, is_mapped=False, rendered_map_index=None, log_url='http://localhost:8080/dags/covertype_mysql_mlflow_train_models/runs/scheduled__2025-09-30T20%3A10%3A00%2B00%3A00/tasks/train_covertype_models?try_number=1')","logger":"task"}
