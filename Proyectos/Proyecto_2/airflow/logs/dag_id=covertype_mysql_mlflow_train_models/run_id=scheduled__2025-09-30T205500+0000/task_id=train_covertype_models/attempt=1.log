{"timestamp":"2025-09-30T21:00:40.704211","level":"info","event":"DAG bundles loaded: dags-folder","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-09-30T21:00:40.707806","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/ETL_Training.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-09-30T21:00:43.079558Z","level":"info","event":"[INFO] batch_number from context: 2","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:00:43.156539","level":"warning","event":"/home/airflow/.local/lib/python3.12/site-packages/airflow/models/connection.py:471: DeprecationWarning: Using Connection.get_connection_from_secrets from `airflow.models` is deprecated.Please use `get` on Connection from sdk(`airflow.sdk.Connection`) instead\n  warnings.warn(\n","logger":"py.warnings"}
{"timestamp":"2025-09-30T21:00:43.326796","level":"warning","event":"empty cryptography key - values will not be stored encrypted.","logger":"airflow.models.crypto"}
{"timestamp":"2025-09-30T21:00:43.329366","level":"info","event":"Connection Retrieved 'mysql_trn'","logger":"airflow.hooks.base"}
{"timestamp":"2025-09-30T21:00:43.329550","level":"warning","event":"This setter is for backward compatibility and should not be used.\nSince the introduction of connection property, the providers listed below breaks due to assigning value to self.connection in their __init__ method.\n* apache-airflow-providers-mysql<5.7.1\n* apache-airflow-providers-elasticsearch<5.5.1\n* apache-airflow-providers-postgres<5.13.0","logger":"airflow.task.hooks.airflow.providers.mysql.hooks.mysql.MySqlHook"}
{"timestamp":"2025-09-30T21:00:43.354566","level":"warning","event":"/opt/airflow/dags/ETL_Training.py:273: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n  df = pd.read_sql(\"\"\"\n","logger":"py.warnings"}
{"timestamp":"2025-09-30T21:00:43.374719Z","level":"info","event":"[TRAIN] Loaded 748 samples from covertype_clean","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:00:43.376432Z","level":"info","event":"[TRAIN] Features shape: (748, 12)","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:00:43.379171Z","level":"info","event":"[TRAIN] Target distribution:","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:00:43.379644Z","level":"info","event":"cover_type","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:00:43.380104Z","level":"info","event":"0     38","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:00:43.380635Z","level":"info","event":"1     47","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:00:43.381177Z","level":"info","event":"2    156","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:00:43.381639Z","level":"info","event":"3    203","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:00:43.382127Z","level":"info","event":"4     76","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:00:43.382625Z","level":"info","event":"5    214","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:00:43.383199Z","level":"info","event":"6     14","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:00:43.383859Z","level":"info","event":"Name: count, dtype: int64","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:00:43.384420Z","level":"info","event":"[TRAIN] Training logreg...","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:00:53.414961Z","level":"error","event":"2025/09/30 21:00:53 WARNING mlflow.models.model: `artifact_path` is deprecated. Please use `name` instead.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:01:02.215671Z","level":"error","event":"\u001b[31m2025/09/30 21:01:02 WARNING mlflow.models.model: Model logged without a signature and input example. Please set `input_example` parameter when logging the model to auto infer the model signature.\u001b[0m","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:01:02.872604Z","level":"info","event":"[TRAIN] Model logreg logged to MLflow successfully","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:01:02.874465Z","level":"info","event":"[TRAIN] logreg - Accuracy: 0.7333, F1-macro: 0.7514, Run ID: bc408c5ed901411eb45ee83acc8e3c1a","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:01:03.070712Z","level":"info","event":"🏃 View run bn2_logreg at: http://mlflow:5000/#/experiments/1/runs/bc408c5ed901411eb45ee83acc8e3c1a","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:01:03.073048Z","level":"info","event":"🧪 View experiment at: http://mlflow:5000/#/experiments/1","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:01:03.233639Z","level":"info","event":"[TRAIN] Training rf...","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:01:12.303229Z","level":"error","event":"2025/09/30 21:01:12 WARNING mlflow.models.model: `artifact_path` is deprecated. Please use `name` instead.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:01:19.880655Z","level":"error","event":"\u001b[31m2025/09/30 21:01:19 WARNING mlflow.models.model: Model logged without a signature and input example. Please set `input_example` parameter when logging the model to auto infer the model signature.\u001b[0m","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:01:20.585298Z","level":"info","event":"[TRAIN] Model rf logged to MLflow successfully","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:01:20.586309Z","level":"info","event":"[TRAIN] rf - Accuracy: 0.8333, F1-macro: 0.8062, Run ID: 26a0dae69d5f438cb0388961fdd843e0","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:01:20.690371Z","level":"info","event":"🏃 View run bn2_rf at: http://mlflow:5000/#/experiments/1/runs/26a0dae69d5f438cb0388961fdd843e0","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:01:20.691161Z","level":"info","event":"🧪 View experiment at: http://mlflow:5000/#/experiments/1","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:01:20.795276Z","level":"info","event":"[TRAIN] Training svc...","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:01:31.271107Z","level":"error","event":"2025/09/30 21:01:31 WARNING mlflow.models.model: `artifact_path` is deprecated. Please use `name` instead.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:01:38.917981Z","level":"error","event":"\u001b[31m2025/09/30 21:01:38 WARNING mlflow.models.model: Model logged without a signature and input example. Please set `input_example` parameter when logging the model to auto infer the model signature.\u001b[0m","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:01:39.696812Z","level":"info","event":"[TRAIN] Model svc logged to MLflow successfully","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:01:39.698221Z","level":"info","event":"[TRAIN] svc - Accuracy: 0.7800, F1-macro: 0.8013, Run ID: 4b6533613cfa435b92660a13be0387f1","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:01:39.791075Z","level":"info","event":"🏃 View run bn2_svc at: http://mlflow:5000/#/experiments/1/runs/4b6533613cfa435b92660a13be0387f1","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:01:39.792199Z","level":"info","event":"🧪 View experiment at: http://mlflow:5000/#/experiments/1","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:01:39.929403Z","level":"info","event":"[TRAIN] Training knn...","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:01:50.437231Z","level":"error","event":"2025/09/30 21:01:50 WARNING mlflow.models.model: `artifact_path` is deprecated. Please use `name` instead.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:01:59.372648Z","level":"error","event":"\u001b[31m2025/09/30 21:01:59 WARNING mlflow.models.model: Model logged without a signature and input example. Please set `input_example` parameter when logging the model to auto infer the model signature.\u001b[0m","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:02:00.084269Z","level":"info","event":"[TRAIN] Model knn logged to MLflow successfully","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:02:00.084784Z","level":"info","event":"[TRAIN] knn - Accuracy: 0.7333, F1-macro: 0.7309, Run ID: f58ddf6529e14c1e88dc208c39260739","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:02:00.141934Z","level":"info","event":"🏃 View run bn2_knn at: http://mlflow:5000/#/experiments/1/runs/f58ddf6529e14c1e88dc208c39260739","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:02:00.142676Z","level":"info","event":"🧪 View experiment at: http://mlflow:5000/#/experiments/1","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:02:00.388739Z","level":"info","event":"[TRAIN] Training adaboost...","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:02:00.515954Z","level":"error","event":"/home/airflow/.local/lib/python3.12/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:02:00.516589Z","level":"error","event":"  warnings.warn(","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:02:02.150696Z","level":"error","event":"/home/airflow/.local/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:02:02.151393Z","level":"error","event":"  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:02:02.162739Z","level":"error","event":"/home/airflow/.local/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:02:02.164364Z","level":"error","event":"  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:02:02.166807Z","level":"error","event":"/home/airflow/.local/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:02:02.167528Z","level":"error","event":"  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:02:11.189846Z","level":"error","event":"2025/09/30 21:02:11 WARNING mlflow.models.model: `artifact_path` is deprecated. Please use `name` instead.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:02:19.913783Z","level":"error","event":"\u001b[31m2025/09/30 21:02:19 WARNING mlflow.models.model: Model logged without a signature and input example. Please set `input_example` parameter when logging the model to auto infer the model signature.\u001b[0m","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:02:20.477502Z","level":"info","event":"[TRAIN] Model adaboost logged to MLflow successfully","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:02:20.478148Z","level":"info","event":"[TRAIN] adaboost - Accuracy: 0.4067, F1-macro: 0.2541, Run ID: d83f1860898e459d95350eb114d901e5","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:02:20.539616Z","level":"info","event":"🏃 View run bn2_adaboost at: http://mlflow:5000/#/experiments/1/runs/d83f1860898e459d95350eb114d901e5","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:02:20.540323Z","level":"info","event":"🧪 View experiment at: http://mlflow:5000/#/experiments/1","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:02:20.725739Z","level":"error","event":"Registered model 'CovertypeClassifier' already exists. Creating a new version of this model...","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:02:21.211460Z","level":"error","event":"2025/09/30 21:02:21 WARNING mlflow.tracking._model_registry.fluent: Run with id 26a0dae69d5f438cb0388961fdd843e0 has no artifacts at artifact path 'model', registering model based on models:/m-c2fb64d61cdb42eea6d575a5c07ea4b5 instead","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:02:21.470063Z","level":"error","event":"2025/09/30 21:02:21 INFO mlflow.store.model_registry.abstract_store: Waiting up to 300 seconds for model version to finish creation. Model name: CovertypeClassifier, version 4","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:02:21.475385Z","level":"error","event":"Created version '4' of model 'CovertypeClassifier'.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:02:21.666521Z","level":"info","event":"[REGISTRY] Best model 'rf' registered as version 4 (Run ID: 26a0dae69d5f438cb0388961fdd843e0)","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:02:22.706869Z","level":"info","event":"🏃 View run bn2_model_comparison at: http://mlflow:5000/#/experiments/1/runs/f1674472ae2244ae9dc86bb354664923","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:02:22.707432Z","level":"info","event":"🧪 View experiment at: http://mlflow:5000/#/experiments/1","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:02:22.789516Z","level":"info","event":"","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:02:22.790069Z","level":"info","event":"[METRICS] Model Performance Summary:","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:02:22.794480Z","level":"info","event":"   model  accuracy  f1_macro  train_size  test_size                           run_id","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:02:22.795063Z","level":"info","event":"      rf  0.833333  0.806241         598        150 26a0dae69d5f438cb0388961fdd843e0","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:02:22.795474Z","level":"info","event":"     svc  0.780000  0.801253         598        150 4b6533613cfa435b92660a13be0387f1","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:02:22.795897Z","level":"info","event":"  logreg  0.733333  0.751439         598        150 bc408c5ed901411eb45ee83acc8e3c1a","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:02:22.796278Z","level":"info","event":"     knn  0.733333  0.730882         598        150 f58ddf6529e14c1e88dc208c39260739","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:02:22.796673Z","level":"info","event":"adaboost  0.406667  0.254079         598        150 d83f1860898e459d95350eb114d901e5","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:02:22.797116Z","level":"info","event":"","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:02:22.797540Z","level":"info","event":"[BEST] rf (f1_macro=0.8062) registered to model registry","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:02:22.797974Z","level":"info","event":"[BEST] Run ID: 26a0dae69d5f438cb0388961fdd843e0","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:02:22.797814","level":"info","event":"Done. Returned value was: {'best_model': 'rf', 'best_f1_score': 0.8062407279445819, 'best_run_id': '26a0dae69d5f438cb0388961fdd843e0', 'total_models_trained': 5, 'metrics': [{'model': 'rf', 'accuracy': 0.8333333333333334, 'f1_macro': 0.8062407279445819, 'train_size': 598, 'test_size': 150, 'run_id': '26a0dae69d5f438cb0388961fdd843e0'}, {'model': 'svc', 'accuracy': 0.78, 'f1_macro': 0.8012527992563486, 'train_size': 598, 'test_size': 150, 'run_id': '4b6533613cfa435b92660a13be0387f1'}, {'model': 'logreg', 'accuracy': 0.7333333333333333, 'f1_macro': 0.751438560840479, 'train_size': 598, 'test_size': 150, 'run_id': 'bc408c5ed901411eb45ee83acc8e3c1a'}, {'model': 'knn', 'accuracy': 0.7333333333333333, 'f1_macro': 0.7308818399154534, 'train_size': 598, 'test_size': 150, 'run_id': 'f58ddf6529e14c1e88dc208c39260739'}, {'model': 'adaboost', 'accuracy': 0.4066666666666667, 'f1_macro': 0.2540792540792541, 'train_size': 598, 'test_size': 150, 'run_id': 'd83f1860898e459d95350eb114d901e5'}]}","logger":"airflow.task.operators.airflow.providers.standard.operators.python.PythonOperator"}
{"timestamp":"2025-09-30T21:02:22.798710","level":"info","event":"Pushing xcom","ti":"RuntimeTaskInstance(id=UUID('01999c6d-20c4-74cb-82b9-e0dc948b112f'), task_id='train_covertype_models', dag_id='covertype_mysql_mlflow_train_models', run_id='scheduled__2025-09-30T20:55:00+00:00', try_number=1, map_index=-1, hostname='80bb4df3aa61', context_carrier={}, task=<Task(PythonOperator): train_covertype_models>, bundle_instance=LocalDagBundle(name=dags-folder), max_tries=0, start_date=datetime.datetime(2025, 9, 30, 21, 0, 40, 482967, tzinfo=datetime.timezone.utc), end_date=None, state=<TaskInstanceState.RUNNING: 'running'>, is_mapped=False, rendered_map_index=None, log_url='http://localhost:8080/dags/covertype_mysql_mlflow_train_models/runs/scheduled__2025-09-30T20%3A55%3A00%2B00%3A00/tasks/train_covertype_models?try_number=1')","logger":"task"}
