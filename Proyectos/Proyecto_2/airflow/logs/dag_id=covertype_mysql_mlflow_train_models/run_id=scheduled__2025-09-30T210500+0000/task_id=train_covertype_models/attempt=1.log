{"timestamp":"2025-09-30T21:13:03.714603","level":"info","event":"DAG bundles loaded: dags-folder","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-09-30T21:13:03.715700","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/ETL_Training.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-09-30T21:13:09.355394Z","level":"info","event":"[INFO] batch_number from context: 1","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:13:09.964430Z","level":"error","event":"2025/09/30 21:13:09 INFO mlflow.tracking.fluent: Experiment with name 'covertype_classification' does not exist. Creating a new experiment.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:13:10.429464","level":"warning","event":"/home/airflow/.local/lib/python3.12/site-packages/airflow/models/connection.py:471: DeprecationWarning: Using Connection.get_connection_from_secrets from `airflow.models` is deprecated.Please use `get` on Connection from sdk(`airflow.sdk.Connection`) instead\n  warnings.warn(\n","logger":"py.warnings"}
{"timestamp":"2025-09-30T21:13:10.826897","level":"warning","event":"empty cryptography key - values will not be stored encrypted.","logger":"airflow.models.crypto"}
{"timestamp":"2025-09-30T21:13:10.833406","level":"info","event":"Connection Retrieved 'mysql_trn'","logger":"airflow.hooks.base"}
{"timestamp":"2025-09-30T21:13:10.833618","level":"warning","event":"This setter is for backward compatibility and should not be used.\nSince the introduction of connection property, the providers listed below breaks due to assigning value to self.connection in their __init__ method.\n* apache-airflow-providers-mysql<5.7.1\n* apache-airflow-providers-elasticsearch<5.5.1\n* apache-airflow-providers-postgres<5.13.0","logger":"airflow.task.hooks.airflow.providers.mysql.hooks.mysql.MySqlHook"}
{"timestamp":"2025-09-30T21:13:10.865258","level":"warning","event":"/opt/airflow/dags/ETL_Training.py:273: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n  df = pd.read_sql(\"\"\"\n","logger":"py.warnings"}
{"timestamp":"2025-09-30T21:13:10.875186Z","level":"info","event":"[TRAIN] Loaded 221 samples from covertype_clean","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:13:10.881323Z","level":"info","event":"[TRAIN] Features shape: (221, 12)","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:13:10.887406Z","level":"info","event":"[TRAIN] Target distribution:","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:13:10.889909Z","level":"info","event":"cover_type","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:13:10.891168Z","level":"info","event":"0    13","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:13:10.893995Z","level":"info","event":"1    10","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:13:10.895693Z","level":"info","event":"2    42","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:13:10.896288Z","level":"info","event":"3    53","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:13:10.896911Z","level":"info","event":"4    23","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:13:10.898297Z","level":"info","event":"5    73","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:13:10.898918Z","level":"info","event":"6     7","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:13:10.899926Z","level":"info","event":"Name: count, dtype: int64","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:13:10.907258Z","level":"info","event":"[TRAIN] Training logreg...","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:13:14.417583","level":"warning","event":"/home/airflow/.local/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n","logger":"py.warnings"}
{"timestamp":"2025-09-30T21:13:14.421982","level":"warning","event":"/home/airflow/.local/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n","logger":"py.warnings"}
{"timestamp":"2025-09-30T21:13:14.425620","level":"warning","event":"/home/airflow/.local/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n","logger":"py.warnings"}
{"timestamp":"2025-09-30T21:13:26.825457Z","level":"error","event":"2025/09/30 21:13:26 WARNING mlflow.models.model: `artifact_path` is deprecated. Please use `name` instead.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:13:54.192672Z","level":"error","event":"\u001b[31m2025/09/30 21:13:54 WARNING mlflow.models.model: Model logged without a signature and input example. Please set `input_example` parameter when logging the model to auto infer the model signature.\u001b[0m","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:13:56.710539Z","level":"info","event":"[TRAIN] Model logreg logged to MLflow successfully","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:13:56.711780Z","level":"info","event":"[TRAIN] logreg - Accuracy: 0.6444, F1-macro: 0.4828, Run ID: f4f0a44a3add49e98b9802189e4d67e7","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:13:56.935781Z","level":"info","event":"🏃 View run bn1_logreg at: http://mlflow:5000/#/experiments/1/runs/f4f0a44a3add49e98b9802189e4d67e7","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:13:56.941226Z","level":"info","event":"🧪 View experiment at: http://mlflow:5000/#/experiments/1","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:13:57.081505Z","level":"info","event":"[TRAIN] Training rf...","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:13:58.660648Z","level":"error","event":"/home/airflow/.local/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:13:58.661165Z","level":"error","event":"  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:13:58.665192Z","level":"error","event":"/home/airflow/.local/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:13:58.665786Z","level":"error","event":"  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:13:58.669057Z","level":"error","event":"/home/airflow/.local/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:13:58.669716Z","level":"error","event":"  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:14:07.257264Z","level":"error","event":"2025/09/30 21:14:07 WARNING mlflow.models.model: `artifact_path` is deprecated. Please use `name` instead.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:14:17.639395Z","level":"error","event":"\u001b[31m2025/09/30 21:14:17 WARNING mlflow.models.model: Model logged without a signature and input example. Please set `input_example` parameter when logging the model to auto infer the model signature.\u001b[0m","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:14:19.339960Z","level":"info","event":"[TRAIN] Model rf logged to MLflow successfully","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:14:19.340804Z","level":"info","event":"[TRAIN] rf - Accuracy: 0.6222, F1-macro: 0.4521, Run ID: 0bb47d92e4b248409bddc11ea880b164","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:14:19.492036Z","level":"info","event":"🏃 View run bn1_rf at: http://mlflow:5000/#/experiments/1/runs/0bb47d92e4b248409bddc11ea880b164","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:14:19.492883Z","level":"info","event":"🧪 View experiment at: http://mlflow:5000/#/experiments/1","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:14:19.614707Z","level":"info","event":"[TRAIN] Training svc...","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:14:21.145234Z","level":"error","event":"/home/airflow/.local/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:14:21.146431Z","level":"error","event":"  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:14:21.155411Z","level":"error","event":"/home/airflow/.local/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:14:21.156276Z","level":"error","event":"  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:14:21.159409Z","level":"error","event":"/home/airflow/.local/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:14:21.160061Z","level":"error","event":"  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:14:31.118489Z","level":"error","event":"2025/09/30 21:14:31 WARNING mlflow.models.model: `artifact_path` is deprecated. Please use `name` instead.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:14:41.678285Z","level":"error","event":"\u001b[31m2025/09/30 21:14:41 WARNING mlflow.models.model: Model logged without a signature and input example. Please set `input_example` parameter when logging the model to auto infer the model signature.\u001b[0m","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:14:42.359964Z","level":"info","event":"[TRAIN] Model svc logged to MLflow successfully","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:14:42.360886Z","level":"info","event":"[TRAIN] svc - Accuracy: 0.6444, F1-macro: 0.4769, Run ID: 3d71dab817244b3499fe5ec0ebca1861","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:14:42.440950Z","level":"info","event":"🏃 View run bn1_svc at: http://mlflow:5000/#/experiments/1/runs/3d71dab817244b3499fe5ec0ebca1861","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:14:42.441743Z","level":"info","event":"🧪 View experiment at: http://mlflow:5000/#/experiments/1","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:14:42.555791Z","level":"info","event":"[TRAIN] Training knn...","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:14:44.026942Z","level":"error","event":"/home/airflow/.local/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:14:44.027573Z","level":"error","event":"  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:14:44.030933Z","level":"error","event":"/home/airflow/.local/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:14:44.031411Z","level":"error","event":"  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:14:44.032834Z","level":"error","event":"/home/airflow/.local/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:14:44.033361Z","level":"error","event":"  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:14:54.116436Z","level":"error","event":"2025/09/30 21:14:54 WARNING mlflow.models.model: `artifact_path` is deprecated. Please use `name` instead.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:15:07.129735Z","level":"error","event":"\u001b[31m2025/09/30 21:15:07 WARNING mlflow.models.model: Model logged without a signature and input example. Please set `input_example` parameter when logging the model to auto infer the model signature.\u001b[0m","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:15:08.026086Z","level":"info","event":"[TRAIN] Model knn logged to MLflow successfully","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:15:08.027119Z","level":"info","event":"[TRAIN] knn - Accuracy: 0.6000, F1-macro: 0.4446, Run ID: 775675d9db7e4ac288609e9f49cf2a1d","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:15:08.131617Z","level":"info","event":"🏃 View run bn1_knn at: http://mlflow:5000/#/experiments/1/runs/775675d9db7e4ac288609e9f49cf2a1d","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:15:08.133518Z","level":"info","event":"🧪 View experiment at: http://mlflow:5000/#/experiments/1","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:15:08.257597Z","level":"info","event":"[TRAIN] Training adaboost...","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:15:08.435966Z","level":"error","event":"/home/airflow/.local/lib/python3.12/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:15:08.437921Z","level":"error","event":"  warnings.warn(","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:15:10.184376Z","level":"error","event":"/home/airflow/.local/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:15:10.185106Z","level":"error","event":"  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:15:10.219476Z","level":"error","event":"/home/airflow/.local/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:15:10.220159Z","level":"error","event":"  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:15:10.220804Z","level":"error","event":"/home/airflow/.local/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:15:10.221457Z","level":"error","event":"  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:15:19.453028Z","level":"error","event":"2025/09/30 21:15:19 WARNING mlflow.models.model: `artifact_path` is deprecated. Please use `name` instead.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:15:28.947281Z","level":"error","event":"\u001b[31m2025/09/30 21:15:28 WARNING mlflow.models.model: Model logged without a signature and input example. Please set `input_example` parameter when logging the model to auto infer the model signature.\u001b[0m","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:15:29.952836Z","level":"info","event":"[TRAIN] Model adaboost logged to MLflow successfully","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:15:29.953609Z","level":"info","event":"[TRAIN] adaboost - Accuracy: 0.4444, F1-macro: 0.1767, Run ID: 77b77d5cfec14106ab8a0bbd7f5da3b6","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:15:30.018371Z","level":"info","event":"🏃 View run bn1_adaboost at: http://mlflow:5000/#/experiments/1/runs/77b77d5cfec14106ab8a0bbd7f5da3b6","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:15:30.019085Z","level":"info","event":"🧪 View experiment at: http://mlflow:5000/#/experiments/1","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:15:30.465118Z","level":"error","event":"Successfully registered model 'CovertypeClassifier'.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:15:31.089468Z","level":"error","event":"2025/09/30 21:15:31 WARNING mlflow.tracking._model_registry.fluent: Run with id f4f0a44a3add49e98b9802189e4d67e7 has no artifacts at artifact path 'model', registering model based on models:/m-bd831062a5654a0f994990457bc35a6e instead","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:15:31.397642Z","level":"error","event":"2025/09/30 21:15:31 INFO mlflow.store.model_registry.abstract_store: Waiting up to 300 seconds for model version to finish creation. Model name: CovertypeClassifier, version 1","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:15:31.410825Z","level":"error","event":"Created version '1' of model 'CovertypeClassifier'.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:15:31.696686Z","level":"info","event":"[REGISTRY] Best model 'logreg' registered as version 1 (Run ID: f4f0a44a3add49e98b9802189e4d67e7)","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:15:32.998951Z","level":"info","event":"🏃 View run bn1_model_comparison at: http://mlflow:5000/#/experiments/1/runs/bdf1f5b47bbf430b8ab5ca1f166af377","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:15:33.000567Z","level":"info","event":"🧪 View experiment at: http://mlflow:5000/#/experiments/1","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:15:33.116756Z","level":"info","event":"","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:15:33.117958Z","level":"info","event":"[METRICS] Model Performance Summary:","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:15:33.124990Z","level":"info","event":"   model  accuracy  f1_macro  train_size  test_size                           run_id","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:15:33.125548Z","level":"info","event":"  logreg  0.644444  0.482771         176         45 f4f0a44a3add49e98b9802189e4d67e7","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:15:33.126068Z","level":"info","event":"     svc  0.644444  0.476887         176         45 3d71dab817244b3499fe5ec0ebca1861","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:15:33.126634Z","level":"info","event":"      rf  0.622222  0.452139         176         45 0bb47d92e4b248409bddc11ea880b164","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:15:33.127248Z","level":"info","event":"     knn  0.600000  0.444639         176         45 775675d9db7e4ac288609e9f49cf2a1d","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:15:33.127832Z","level":"info","event":"adaboost  0.444444  0.176749         176         45 77b77d5cfec14106ab8a0bbd7f5da3b6","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:15:33.128519Z","level":"info","event":"","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:15:33.129102Z","level":"info","event":"[BEST] logreg (f1_macro=0.4828) registered to model registry","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:15:33.129624Z","level":"info","event":"[BEST] Run ID: f4f0a44a3add49e98b9802189e4d67e7","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:15:33.130799","level":"info","event":"Done. Returned value was: {'best_model': 'logreg', 'best_f1_score': 0.4827714485003488, 'best_run_id': 'f4f0a44a3add49e98b9802189e4d67e7', 'total_models_trained': 5, 'metrics': [{'model': 'logreg', 'accuracy': 0.6444444444444445, 'f1_macro': 0.4827714485003488, 'train_size': 176, 'test_size': 45, 'run_id': 'f4f0a44a3add49e98b9802189e4d67e7'}, {'model': 'svc', 'accuracy': 0.6444444444444445, 'f1_macro': 0.4768874643874644, 'train_size': 176, 'test_size': 45, 'run_id': '3d71dab817244b3499fe5ec0ebca1861'}, {'model': 'rf', 'accuracy': 0.6222222222222222, 'f1_macro': 0.4521390374331551, 'train_size': 176, 'test_size': 45, 'run_id': '0bb47d92e4b248409bddc11ea880b164'}, {'model': 'knn', 'accuracy': 0.6, 'f1_macro': 0.44463939421922616, 'train_size': 176, 'test_size': 45, 'run_id': '775675d9db7e4ac288609e9f49cf2a1d'}, {'model': 'adaboost', 'accuracy': 0.4444444444444444, 'f1_macro': 0.17674927113702624, 'train_size': 176, 'test_size': 45, 'run_id': '77b77d5cfec14106ab8a0bbd7f5da3b6'}]}","logger":"airflow.task.operators.airflow.providers.standard.operators.python.PythonOperator"}
{"timestamp":"2025-09-30T21:15:33.131422","level":"info","event":"Pushing xcom","ti":"RuntimeTaskInstance(id=UUID('01999c78-0a8f-7936-a0d1-68ca622c3723'), task_id='train_covertype_models', dag_id='covertype_mysql_mlflow_train_models', run_id='scheduled__2025-09-30T21:05:00+00:00', try_number=1, map_index=-1, hostname='0154c95c6bde', context_carrier={}, task=<Task(PythonOperator): train_covertype_models>, bundle_instance=LocalDagBundle(name=dags-folder), max_tries=0, start_date=datetime.datetime(2025, 9, 30, 21, 13, 1, 494128, tzinfo=datetime.timezone.utc), end_date=None, state=<TaskInstanceState.RUNNING: 'running'>, is_mapped=False, rendered_map_index=None, log_url='http://localhost:8080/dags/covertype_mysql_mlflow_train_models/runs/scheduled__2025-09-30T21%3A05%3A00%2B00%3A00/tasks/train_covertype_models?try_number=1')","logger":"task"}
