{"timestamp":"2025-09-30T20:58:30.742559","level":"info","event":"DAG bundles loaded: dags-folder","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-09-30T20:58:30.743531","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/ETL_Training.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-09-30T20:58:33.151047Z","level":"info","event":"[INFO] batch_number from context: 1","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:58:33.227193","level":"warning","event":"/home/airflow/.local/lib/python3.12/site-packages/airflow/models/connection.py:471: DeprecationWarning: Using Connection.get_connection_from_secrets from `airflow.models` is deprecated.Please use `get` on Connection from sdk(`airflow.sdk.Connection`) instead\n  warnings.warn(\n","logger":"py.warnings"}
{"timestamp":"2025-09-30T20:58:33.392773","level":"warning","event":"empty cryptography key - values will not be stored encrypted.","logger":"airflow.models.crypto"}
{"timestamp":"2025-09-30T20:58:33.395363","level":"info","event":"Connection Retrieved 'mysql_trn'","logger":"airflow.hooks.base"}
{"timestamp":"2025-09-30T20:58:33.395650","level":"warning","event":"This setter is for backward compatibility and should not be used.\nSince the introduction of connection property, the providers listed below breaks due to assigning value to self.connection in their __init__ method.\n* apache-airflow-providers-mysql<5.7.1\n* apache-airflow-providers-elasticsearch<5.5.1\n* apache-airflow-providers-postgres<5.13.0","logger":"airflow.task.hooks.airflow.providers.mysql.hooks.mysql.MySqlHook"}
{"timestamp":"2025-09-30T20:58:33.416091","level":"warning","event":"/opt/airflow/dags/ETL_Training.py:273: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n  df = pd.read_sql(\"\"\"\n","logger":"py.warnings"}
{"timestamp":"2025-09-30T20:58:33.429068Z","level":"info","event":"[TRAIN] Loaded 595 samples from covertype_clean","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:58:33.430330Z","level":"info","event":"[TRAIN] Features shape: (595, 12)","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:58:33.431875Z","level":"info","event":"[TRAIN] Target distribution:","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:58:33.432310Z","level":"info","event":"cover_type","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:58:33.432736Z","level":"info","event":"0     30","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:58:33.433164Z","level":"info","event":"1     37","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:58:33.433570Z","level":"info","event":"2    121","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:58:33.433986Z","level":"info","event":"3    158","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:58:33.434321Z","level":"info","event":"4     58","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:58:33.434686Z","level":"info","event":"5    179","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:58:33.435086Z","level":"info","event":"6     12","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:58:33.435408Z","level":"info","event":"Name: count, dtype: int64","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:58:33.441579Z","level":"info","event":"[TRAIN] Training logreg...","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:58:43.556827Z","level":"error","event":"2025/09/30 20:58:43 WARNING mlflow.models.model: `artifact_path` is deprecated. Please use `name` instead.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T20:58:52.716847Z","level":"error","event":"\u001b[31m2025/09/30 20:58:52 WARNING mlflow.models.model: Model logged without a signature and input example. Please set `input_example` parameter when logging the model to auto infer the model signature.\u001b[0m","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T20:58:53.321419Z","level":"info","event":"[TRAIN] Model logreg logged to MLflow successfully","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:58:53.322181Z","level":"info","event":"[TRAIN] logreg - Accuracy: 0.7143, F1-macro: 0.6864, Run ID: 458c851f30be4efca97d3d974887611b","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:58:53.383968Z","level":"info","event":"🏃 View run bn1_logreg at: http://mlflow:5000/#/experiments/1/runs/458c851f30be4efca97d3d974887611b","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:58:53.384735Z","level":"info","event":"🧪 View experiment at: http://mlflow:5000/#/experiments/1","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:58:53.486267Z","level":"info","event":"[TRAIN] Training rf...","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:59:05.947449Z","level":"error","event":"2025/09/30 20:59:05 WARNING mlflow.models.model: `artifact_path` is deprecated. Please use `name` instead.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T20:59:15.401528Z","level":"error","event":"\u001b[31m2025/09/30 20:59:15 WARNING mlflow.models.model: Model logged without a signature and input example. Please set `input_example` parameter when logging the model to auto infer the model signature.\u001b[0m","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T20:59:16.305073Z","level":"info","event":"[TRAIN] Model rf logged to MLflow successfully","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:59:16.305751Z","level":"info","event":"[TRAIN] rf - Accuracy: 0.8235, F1-macro: 0.7539, Run ID: f734a25310c64f4ca5b3ec5f7b5108f7","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:59:16.400436Z","level":"info","event":"🏃 View run bn1_rf at: http://mlflow:5000/#/experiments/1/runs/f734a25310c64f4ca5b3ec5f7b5108f7","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:59:16.401023Z","level":"info","event":"🧪 View experiment at: http://mlflow:5000/#/experiments/1","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:59:16.788184Z","level":"info","event":"[TRAIN] Training svc...","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:59:28.272621Z","level":"error","event":"2025/09/30 20:59:28 WARNING mlflow.models.model: `artifact_path` is deprecated. Please use `name` instead.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T20:59:36.550189Z","level":"error","event":"\u001b[31m2025/09/30 20:59:36 WARNING mlflow.models.model: Model logged without a signature and input example. Please set `input_example` parameter when logging the model to auto infer the model signature.\u001b[0m","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T20:59:37.112501Z","level":"info","event":"[TRAIN] Model svc logged to MLflow successfully","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:59:37.113649Z","level":"info","event":"[TRAIN] svc - Accuracy: 0.7479, F1-macro: 0.7173, Run ID: 012028e747ff46cbb91aad82e05e0ad7","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:59:37.233701Z","level":"info","event":"🏃 View run bn1_svc at: http://mlflow:5000/#/experiments/1/runs/012028e747ff46cbb91aad82e05e0ad7","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:59:37.234811Z","level":"info","event":"🧪 View experiment at: http://mlflow:5000/#/experiments/1","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:59:37.359062Z","level":"info","event":"[TRAIN] Training knn...","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:59:47.601098Z","level":"error","event":"2025/09/30 20:59:47 WARNING mlflow.models.model: `artifact_path` is deprecated. Please use `name` instead.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T20:59:55.727761Z","level":"error","event":"\u001b[31m2025/09/30 20:59:55 WARNING mlflow.models.model: Model logged without a signature and input example. Please set `input_example` parameter when logging the model to auto infer the model signature.\u001b[0m","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T20:59:56.272075Z","level":"info","event":"[TRAIN] Model knn logged to MLflow successfully","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:59:56.272998Z","level":"info","event":"[TRAIN] knn - Accuracy: 0.7731, F1-macro: 0.7258, Run ID: 0a8d0e5619df4a2394dba33ddfc43818","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:59:56.355359Z","level":"info","event":"🏃 View run bn1_knn at: http://mlflow:5000/#/experiments/1/runs/0a8d0e5619df4a2394dba33ddfc43818","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:59:56.356283Z","level":"info","event":"🧪 View experiment at: http://mlflow:5000/#/experiments/1","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:59:56.456550Z","level":"info","event":"[TRAIN] Training adaboost...","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:59:56.572530Z","level":"error","event":"/home/airflow/.local/lib/python3.12/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T20:59:56.573069Z","level":"error","event":"  warnings.warn(","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T20:59:57.951911Z","level":"error","event":"/home/airflow/.local/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T20:59:57.956257Z","level":"error","event":"  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T20:59:57.982264Z","level":"error","event":"/home/airflow/.local/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T20:59:57.983166Z","level":"error","event":"  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T20:59:57.983664Z","level":"error","event":"/home/airflow/.local/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T20:59:57.984294Z","level":"error","event":"  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:00:06.162283Z","level":"error","event":"2025/09/30 21:00:06 WARNING mlflow.models.model: `artifact_path` is deprecated. Please use `name` instead.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:00:15.066843Z","level":"error","event":"\u001b[31m2025/09/30 21:00:15 WARNING mlflow.models.model: Model logged without a signature and input example. Please set `input_example` parameter when logging the model to auto infer the model signature.\u001b[0m","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:00:17.598564Z","level":"info","event":"[TRAIN] Model adaboost logged to MLflow successfully","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:00:17.599037Z","level":"info","event":"[TRAIN] adaboost - Accuracy: 0.3109, F1-macro: 0.2245, Run ID: 622f1479d5114b5980a078a835e6083c","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:00:17.663420Z","level":"info","event":"🏃 View run bn1_adaboost at: http://mlflow:5000/#/experiments/1/runs/622f1479d5114b5980a078a835e6083c","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:00:17.663964Z","level":"info","event":"🧪 View experiment at: http://mlflow:5000/#/experiments/1","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:00:17.900399Z","level":"error","event":"Registered model 'CovertypeClassifier' already exists. Creating a new version of this model...","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:00:18.421343Z","level":"error","event":"2025/09/30 21:00:18 WARNING mlflow.tracking._model_registry.fluent: Run with id f734a25310c64f4ca5b3ec5f7b5108f7 has no artifacts at artifact path 'model', registering model based on models:/m-c3c8453a1c9b4afaaac56ce96d31c66a instead","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:00:18.735200Z","level":"error","event":"2025/09/30 21:00:18 INFO mlflow.store.model_registry.abstract_store: Waiting up to 300 seconds for model version to finish creation. Model name: CovertypeClassifier, version 3","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:00:18.737334Z","level":"error","event":"Created version '3' of model 'CovertypeClassifier'.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:00:18.926581Z","level":"info","event":"[REGISTRY] Best model 'rf' registered as version 3 (Run ID: f734a25310c64f4ca5b3ec5f7b5108f7)","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:00:20.136204Z","level":"info","event":"🏃 View run bn1_model_comparison at: http://mlflow:5000/#/experiments/1/runs/d2c5f083f42a40efb907e840798d59ee","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:00:20.137311Z","level":"info","event":"🧪 View experiment at: http://mlflow:5000/#/experiments/1","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:00:20.227919Z","level":"info","event":"","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:00:20.231283Z","level":"info","event":"[METRICS] Model Performance Summary:","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:00:20.237599Z","level":"info","event":"   model  accuracy  f1_macro  train_size  test_size                           run_id","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:00:20.238558Z","level":"info","event":"      rf  0.823529  0.753900         476        119 f734a25310c64f4ca5b3ec5f7b5108f7","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:00:20.239565Z","level":"info","event":"     knn  0.773109  0.725818         476        119 0a8d0e5619df4a2394dba33ddfc43818","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:00:20.240646Z","level":"info","event":"     svc  0.747899  0.717319         476        119 012028e747ff46cbb91aad82e05e0ad7","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:00:20.241587Z","level":"info","event":"  logreg  0.714286  0.686425         476        119 458c851f30be4efca97d3d974887611b","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:00:20.242508Z","level":"info","event":"adaboost  0.310924  0.224531         476        119 622f1479d5114b5980a078a835e6083c","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:00:20.243564Z","level":"info","event":"","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:00:20.244662Z","level":"info","event":"[BEST] rf (f1_macro=0.7539) registered to model registry","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:00:20.246372Z","level":"info","event":"[BEST] Run ID: f734a25310c64f4ca5b3ec5f7b5108f7","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:00:20.241936","level":"info","event":"Done. Returned value was: {'best_model': 'rf', 'best_f1_score': 0.7539001144075066, 'best_run_id': 'f734a25310c64f4ca5b3ec5f7b5108f7', 'total_models_trained': 5, 'metrics': [{'model': 'rf', 'accuracy': 0.8235294117647058, 'f1_macro': 0.7539001144075066, 'train_size': 476, 'test_size': 119, 'run_id': 'f734a25310c64f4ca5b3ec5f7b5108f7'}, {'model': 'knn', 'accuracy': 0.773109243697479, 'f1_macro': 0.72581819758048, 'train_size': 476, 'test_size': 119, 'run_id': '0a8d0e5619df4a2394dba33ddfc43818'}, {'model': 'svc', 'accuracy': 0.7478991596638656, 'f1_macro': 0.7173189028307767, 'train_size': 476, 'test_size': 119, 'run_id': '012028e747ff46cbb91aad82e05e0ad7'}, {'model': 'logreg', 'accuracy': 0.7142857142857143, 'f1_macro': 0.68642478708824, 'train_size': 476, 'test_size': 119, 'run_id': '458c851f30be4efca97d3d974887611b'}, {'model': 'adaboost', 'accuracy': 0.31092436974789917, 'f1_macro': 0.22453102453102455, 'train_size': 476, 'test_size': 119, 'run_id': '622f1479d5114b5980a078a835e6083c'}]}","logger":"airflow.task.operators.airflow.providers.standard.operators.python.PythonOperator"}
{"timestamp":"2025-09-30T21:00:20.242988","level":"info","event":"Pushing xcom","ti":"RuntimeTaskInstance(id=UUID('01999c6b-13d4-7df5-b1cc-dc60784c41ad'), task_id='train_covertype_models', dag_id='covertype_mysql_mlflow_train_models', run_id='scheduled__2025-09-30T20:50:00+00:00', try_number=1, map_index=-1, hostname='80bb4df3aa61', context_carrier={}, task=<Task(PythonOperator): train_covertype_models>, bundle_instance=LocalDagBundle(name=dags-folder), max_tries=0, start_date=datetime.datetime(2025, 9, 30, 20, 58, 30, 492016, tzinfo=datetime.timezone.utc), end_date=None, state=<TaskInstanceState.RUNNING: 'running'>, is_mapped=False, rendered_map_index=None, log_url='http://localhost:8080/dags/covertype_mysql_mlflow_train_models/runs/scheduled__2025-09-30T20%3A50%3A00%2B00%3A00/tasks/train_covertype_models?try_number=1')","logger":"task"}
