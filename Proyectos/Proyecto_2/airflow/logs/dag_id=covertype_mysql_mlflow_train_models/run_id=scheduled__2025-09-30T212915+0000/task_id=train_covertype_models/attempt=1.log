{"timestamp":"2025-09-30T21:34:45.320890","level":"info","event":"DAG bundles loaded: dags-folder","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-09-30T21:34:45.321734","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/ETL_Training.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-09-30T21:34:48.117935Z","level":"info","event":"[INFO] batch_number from context: 2","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:34:48.193171","level":"warning","event":"/home/airflow/.local/lib/python3.12/site-packages/airflow/models/connection.py:471: DeprecationWarning: Using Connection.get_connection_from_secrets from `airflow.models` is deprecated.Please use `get` on Connection from sdk(`airflow.sdk.Connection`) instead\n  warnings.warn(\n","logger":"py.warnings"}
{"timestamp":"2025-09-30T21:34:48.372405","level":"warning","event":"empty cryptography key - values will not be stored encrypted.","logger":"airflow.models.crypto"}
{"timestamp":"2025-09-30T21:34:48.375309","level":"info","event":"Connection Retrieved 'mysql_trn'","logger":"airflow.hooks.base"}
{"timestamp":"2025-09-30T21:34:48.375648","level":"warning","event":"This setter is for backward compatibility and should not be used.\nSince the introduction of connection property, the providers listed below breaks due to assigning value to self.connection in their __init__ method.\n* apache-airflow-providers-mysql<5.7.1\n* apache-airflow-providers-elasticsearch<5.5.1\n* apache-airflow-providers-postgres<5.13.0","logger":"airflow.task.hooks.airflow.providers.mysql.hooks.mysql.MySqlHook"}
{"timestamp":"2025-09-30T21:34:48.400272","level":"warning","event":"/opt/airflow/dags/ETL_Training.py:273: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n  df = pd.read_sql(\"\"\"\n","logger":"py.warnings"}
{"timestamp":"2025-09-30T21:34:48.416577Z","level":"info","event":"[TRAIN] Loaded 595 samples from covertype_clean","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:34:48.417514Z","level":"info","event":"[TRAIN] Features shape: (595, 12)","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:34:48.418846Z","level":"info","event":"[TRAIN] Target distribution:","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:34:48.419421Z","level":"info","event":"cover_type","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:34:48.423098Z","level":"info","event":"0     39","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:34:48.423700Z","level":"info","event":"1     41","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:34:48.424230Z","level":"info","event":"2    121","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:34:48.424851Z","level":"info","event":"3    157","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:34:48.425482Z","level":"info","event":"4     48","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:34:48.426161Z","level":"info","event":"5    174","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:34:48.426665Z","level":"info","event":"6     15","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:34:48.427525Z","level":"info","event":"Name: count, dtype: int64","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:34:48.429451Z","level":"info","event":"[TRAIN] Training logreg...","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:34:57.679607Z","level":"error","event":"2025/09/30 21:34:57 WARNING mlflow.models.model: `artifact_path` is deprecated. Please use `name` instead.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:35:07.810338Z","level":"error","event":"\u001b[31m2025/09/30 21:35:07 WARNING mlflow.models.model: Model logged without a signature and input example. Please set `input_example` parameter when logging the model to auto infer the model signature.\u001b[0m","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:35:09.780791Z","level":"info","event":"[TRAIN] Model logreg logged to MLflow successfully","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:35:09.781434Z","level":"info","event":"[TRAIN] logreg - Accuracy: 0.6303, F1-macro: 0.6215, Run ID: 9d6006028314486eae212411a147f110","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:35:09.855944Z","level":"info","event":"🏃 View run bn2_logreg at: http://mlflow:5000/#/experiments/1/runs/9d6006028314486eae212411a147f110","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:35:09.856552Z","level":"info","event":"🧪 View experiment at: http://mlflow:5000/#/experiments/1","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:35:09.960654Z","level":"info","event":"[TRAIN] Training rf...","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:35:21.988554Z","level":"error","event":"2025/09/30 21:35:21 WARNING mlflow.models.model: `artifact_path` is deprecated. Please use `name` instead.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:35:36.540882Z","level":"error","event":"\u001b[31m2025/09/30 21:35:36 WARNING mlflow.models.model: Model logged without a signature and input example. Please set `input_example` parameter when logging the model to auto infer the model signature.\u001b[0m","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:35:37.553020Z","level":"info","event":"[TRAIN] Model rf logged to MLflow successfully","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:35:37.553753Z","level":"info","event":"[TRAIN] rf - Accuracy: 0.7395, F1-macro: 0.6745, Run ID: 49de36f7bce6483882284fb6cb9c4d33","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:35:37.654494Z","level":"info","event":"🏃 View run bn2_rf at: http://mlflow:5000/#/experiments/1/runs/49de36f7bce6483882284fb6cb9c4d33","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:35:37.655181Z","level":"info","event":"🧪 View experiment at: http://mlflow:5000/#/experiments/1","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:35:37.804300Z","level":"info","event":"[TRAIN] Training svc...","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:35:51.340548Z","level":"error","event":"2025/09/30 21:35:51 WARNING mlflow.models.model: `artifact_path` is deprecated. Please use `name` instead.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:36:00.870365Z","level":"error","event":"\u001b[31m2025/09/30 21:36:00 WARNING mlflow.models.model: Model logged without a signature and input example. Please set `input_example` parameter when logging the model to auto infer the model signature.\u001b[0m","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:36:01.452075Z","level":"info","event":"[TRAIN] Model svc logged to MLflow successfully","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:36:01.452687Z","level":"info","event":"[TRAIN] svc - Accuracy: 0.6891, F1-macro: 0.6584, Run ID: bb11ebd785b64a02bfdc91bee9d16231","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:36:01.545406Z","level":"info","event":"🏃 View run bn2_svc at: http://mlflow:5000/#/experiments/1/runs/bb11ebd785b64a02bfdc91bee9d16231","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:36:01.546176Z","level":"info","event":"🧪 View experiment at: http://mlflow:5000/#/experiments/1","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:36:01.653562Z","level":"info","event":"[TRAIN] Training knn...","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:36:12.022206Z","level":"error","event":"2025/09/30 21:36:12 WARNING mlflow.models.model: `artifact_path` is deprecated. Please use `name` instead.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:36:22.760444Z","level":"error","event":"\u001b[31m2025/09/30 21:36:22 WARNING mlflow.models.model: Model logged without a signature and input example. Please set `input_example` parameter when logging the model to auto infer the model signature.\u001b[0m","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:36:23.393763Z","level":"info","event":"[TRAIN] Model knn logged to MLflow successfully","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:36:23.394444Z","level":"info","event":"[TRAIN] knn - Accuracy: 0.6303, F1-macro: 0.5771, Run ID: f0d8203a0b0046bbbbef74bfd87601a8","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:36:23.496330Z","level":"info","event":"🏃 View run bn2_knn at: http://mlflow:5000/#/experiments/1/runs/f0d8203a0b0046bbbbef74bfd87601a8","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:36:23.497246Z","level":"info","event":"🧪 View experiment at: http://mlflow:5000/#/experiments/1","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:36:23.618164Z","level":"info","event":"[TRAIN] Training adaboost...","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:36:23.813554Z","level":"error","event":"/home/airflow/.local/lib/python3.12/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:36:23.814312Z","level":"error","event":"  warnings.warn(","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:36:25.517786Z","level":"error","event":"/home/airflow/.local/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:36:25.518679Z","level":"error","event":"  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:36:25.526015Z","level":"error","event":"/home/airflow/.local/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:36:25.526734Z","level":"error","event":"  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:36:25.531512Z","level":"error","event":"/home/airflow/.local/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:36:25.532391Z","level":"error","event":"  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:36:33.891973Z","level":"error","event":"2025/09/30 21:36:33 WARNING mlflow.models.model: `artifact_path` is deprecated. Please use `name` instead.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:36:42.953852Z","level":"error","event":"\u001b[31m2025/09/30 21:36:42 WARNING mlflow.models.model: Model logged without a signature and input example. Please set `input_example` parameter when logging the model to auto infer the model signature.\u001b[0m","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:36:43.487141Z","level":"info","event":"[TRAIN] Model adaboost logged to MLflow successfully","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:36:43.487784Z","level":"info","event":"[TRAIN] adaboost - Accuracy: 0.3193, F1-macro: 0.1226, Run ID: 383d55e77ede45de98124a16af57d6eb","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:36:43.552584Z","level":"info","event":"🏃 View run bn2_adaboost at: http://mlflow:5000/#/experiments/1/runs/383d55e77ede45de98124a16af57d6eb","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:36:43.553301Z","level":"info","event":"🧪 View experiment at: http://mlflow:5000/#/experiments/1","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:36:43.734588Z","level":"error","event":"Registered model 'CovertypeClassifier' already exists. Creating a new version of this model...","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:36:44.102627Z","level":"error","event":"2025/09/30 21:36:44 WARNING mlflow.tracking._model_registry.fluent: Run with id 49de36f7bce6483882284fb6cb9c4d33 has no artifacts at artifact path 'model', registering model based on models:/m-d0d74bdabaf24d50be5338182f5da45e instead","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:36:44.274496Z","level":"error","event":"2025/09/30 21:36:44 INFO mlflow.store.model_registry.abstract_store: Waiting up to 300 seconds for model version to finish creation. Model name: CovertypeClassifier, version 2","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:36:44.277804Z","level":"error","event":"Created version '2' of model 'CovertypeClassifier'.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:36:44.477523Z","level":"info","event":"[REGISTRY] Best model 'rf' registered as version 2 (Run ID: 49de36f7bce6483882284fb6cb9c4d33)","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:36:45.497041Z","level":"info","event":"🏃 View run bn2_model_comparison at: http://mlflow:5000/#/experiments/1/runs/55fec2c20acb482c8cc1e8d678b755b2","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:36:45.497652Z","level":"info","event":"🧪 View experiment at: http://mlflow:5000/#/experiments/1","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:36:45.588783Z","level":"info","event":"","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:36:45.592805Z","level":"info","event":"[METRICS] Model Performance Summary:","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:36:45.595108Z","level":"info","event":"   model  accuracy  f1_macro  train_size  test_size                           run_id","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:36:45.595784Z","level":"info","event":"      rf  0.739496  0.674508         476        119 49de36f7bce6483882284fb6cb9c4d33","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:36:45.596182Z","level":"info","event":"     svc  0.689076  0.658357         476        119 bb11ebd785b64a02bfdc91bee9d16231","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:36:45.596736Z","level":"info","event":"  logreg  0.630252  0.621475         476        119 9d6006028314486eae212411a147f110","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:36:45.597223Z","level":"info","event":"     knn  0.630252  0.577119         476        119 f0d8203a0b0046bbbbef74bfd87601a8","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:36:45.597697Z","level":"info","event":"adaboost  0.319328  0.122560         476        119 383d55e77ede45de98124a16af57d6eb","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:36:45.598183Z","level":"info","event":"","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:36:45.598661Z","level":"info","event":"[BEST] rf (f1_macro=0.6745) registered to model registry","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:36:45.599114Z","level":"info","event":"[BEST] Run ID: 49de36f7bce6483882284fb6cb9c4d33","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:36:45.598949","level":"info","event":"Done. Returned value was: {'best_model': 'rf', 'best_f1_score': 0.6745083279267577, 'best_run_id': '49de36f7bce6483882284fb6cb9c4d33', 'total_models_trained': 5, 'metrics': [{'model': 'rf', 'accuracy': 0.7394957983193278, 'f1_macro': 0.6745083279267577, 'train_size': 476, 'test_size': 119, 'run_id': '49de36f7bce6483882284fb6cb9c4d33'}, {'model': 'svc', 'accuracy': 0.6890756302521008, 'f1_macro': 0.6583569312892621, 'train_size': 476, 'test_size': 119, 'run_id': 'bb11ebd785b64a02bfdc91bee9d16231'}, {'model': 'logreg', 'accuracy': 0.6302521008403361, 'f1_macro': 0.6214750634493215, 'train_size': 476, 'test_size': 119, 'run_id': '9d6006028314486eae212411a147f110'}, {'model': 'knn', 'accuracy': 0.6302521008403361, 'f1_macro': 0.5771192154616648, 'train_size': 476, 'test_size': 119, 'run_id': 'f0d8203a0b0046bbbbef74bfd87601a8'}, {'model': 'adaboost', 'accuracy': 0.31932773109243695, 'f1_macro': 0.12256049960967995, 'train_size': 476, 'test_size': 119, 'run_id': '383d55e77ede45de98124a16af57d6eb'}]}","logger":"airflow.task.operators.airflow.providers.standard.operators.python.PythonOperator"}
{"timestamp":"2025-09-30T21:36:45.599673","level":"info","event":"Pushing xcom","ti":"RuntimeTaskInstance(id=UUID('01999c8c-3de4-7839-a39c-de22b0ee4e8b'), task_id='train_covertype_models', dag_id='covertype_mysql_mlflow_train_models', run_id='scheduled__2025-09-30T21:29:15+00:00', try_number=1, map_index=-1, hostname='52cad06a454d', context_carrier={}, task=<Task(PythonOperator): train_covertype_models>, bundle_instance=LocalDagBundle(name=dags-folder), max_tries=0, start_date=datetime.datetime(2025, 9, 30, 21, 34, 44, 995867, tzinfo=datetime.timezone.utc), end_date=None, state=<TaskInstanceState.RUNNING: 'running'>, is_mapped=False, rendered_map_index=None, log_url='http://localhost:8080/dags/covertype_mysql_mlflow_train_models/runs/scheduled__2025-09-30T21%3A29%3A15%2B00%3A00/tasks/train_covertype_models?try_number=1')","logger":"task"}
