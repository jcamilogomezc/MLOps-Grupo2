{"timestamp":"2025-09-30T21:27:03.448190","level":"info","event":"DAG bundles loaded: dags-folder","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-09-30T21:27:03.449126","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/ETL_Training.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-09-30T21:27:06.180109Z","level":"info","event":"[INFO] batch_number from context: 1","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:27:06.303312Z","level":"error","event":"2025/09/30 21:27:06 INFO mlflow.tracking.fluent: Experiment with name 'covertype_classification' does not exist. Creating a new experiment.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:27:06.573788","level":"warning","event":"/home/airflow/.local/lib/python3.12/site-packages/airflow/models/connection.py:471: DeprecationWarning: Using Connection.get_connection_from_secrets from `airflow.models` is deprecated.Please use `get` on Connection from sdk(`airflow.sdk.Connection`) instead\n  warnings.warn(\n","logger":"py.warnings"}
{"timestamp":"2025-09-30T21:27:06.813528","level":"warning","event":"empty cryptography key - values will not be stored encrypted.","logger":"airflow.models.crypto"}
{"timestamp":"2025-09-30T21:27:06.816842","level":"info","event":"Connection Retrieved 'mysql_trn'","logger":"airflow.hooks.base"}
{"timestamp":"2025-09-30T21:27:06.817135","level":"warning","event":"This setter is for backward compatibility and should not be used.\nSince the introduction of connection property, the providers listed below breaks due to assigning value to self.connection in their __init__ method.\n* apache-airflow-providers-mysql<5.7.1\n* apache-airflow-providers-elasticsearch<5.5.1\n* apache-airflow-providers-postgres<5.13.0","logger":"airflow.task.hooks.airflow.providers.mysql.hooks.mysql.MySqlHook"}
{"timestamp":"2025-09-30T21:27:06.847373","level":"warning","event":"/opt/airflow/dags/ETL_Training.py:273: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n  df = pd.read_sql(\"\"\"\n","logger":"py.warnings"}
{"timestamp":"2025-09-30T21:27:06.865700Z","level":"info","event":"[TRAIN] Loaded 212 samples from covertype_clean","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:27:06.873412Z","level":"info","event":"[TRAIN] Features shape: (212, 12)","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:27:06.878650Z","level":"info","event":"[TRAIN] Target distribution:","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:27:06.879348Z","level":"info","event":"cover_type","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:27:06.879909Z","level":"info","event":"0     5","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:27:06.880407Z","level":"info","event":"1    19","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:27:06.880935Z","level":"info","event":"2    44","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:27:06.881398Z","level":"info","event":"3    60","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:27:06.881855Z","level":"info","event":"4    15","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:27:06.882264Z","level":"info","event":"5    69","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:27:06.882749Z","level":"info","event":"Name: count, dtype: int64","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:27:06.885299Z","level":"info","event":"[TRAIN] Training logreg...","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:27:18.435705Z","level":"error","event":"2025/09/30 21:27:18 WARNING mlflow.models.model: `artifact_path` is deprecated. Please use `name` instead.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:27:38.848734Z","level":"error","event":"\u001b[31m2025/09/30 21:27:38 WARNING mlflow.models.model: Model logged without a signature and input example. Please set `input_example` parameter when logging the model to auto infer the model signature.\u001b[0m","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:27:41.448942Z","level":"info","event":"[TRAIN] Model logreg logged to MLflow successfully","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:27:41.449829Z","level":"info","event":"[TRAIN] logreg - Accuracy: 0.5814, F1-macro: 0.4796, Run ID: 7f28c86eda6b433e9c55ebd5514512d8","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:27:41.579391Z","level":"info","event":"🏃 View run bn1_logreg at: http://mlflow:5000/#/experiments/1/runs/7f28c86eda6b433e9c55ebd5514512d8","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:27:41.580094Z","level":"info","event":"🧪 View experiment at: http://mlflow:5000/#/experiments/1","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:27:41.690386Z","level":"info","event":"[TRAIN] Training rf...","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:27:50.114545Z","level":"error","event":"2025/09/30 21:27:50 WARNING mlflow.models.model: `artifact_path` is deprecated. Please use `name` instead.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:27:59.920590Z","level":"error","event":"\u001b[31m2025/09/30 21:27:59 WARNING mlflow.models.model: Model logged without a signature and input example. Please set `input_example` parameter when logging the model to auto infer the model signature.\u001b[0m","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:28:03.152796Z","level":"info","event":"[TRAIN] Model rf logged to MLflow successfully","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:28:03.154610Z","level":"info","event":"[TRAIN] rf - Accuracy: 0.7674, F1-macro: 0.7839, Run ID: c56c671de6c04ed19061fd4587f609ab","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:28:03.384160Z","level":"info","event":"🏃 View run bn1_rf at: http://mlflow:5000/#/experiments/1/runs/c56c671de6c04ed19061fd4587f609ab","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:28:03.385042Z","level":"info","event":"🧪 View experiment at: http://mlflow:5000/#/experiments/1","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:28:03.503965Z","level":"info","event":"[TRAIN] Training svc...","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:28:05.511314Z","level":"error","event":"/home/airflow/.local/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:28:05.512852Z","level":"error","event":"  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:28:05.521875Z","level":"error","event":"/home/airflow/.local/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:28:05.526838Z","level":"error","event":"  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:28:05.527722Z","level":"error","event":"/home/airflow/.local/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:28:05.529022Z","level":"error","event":"  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:28:16.028239Z","level":"error","event":"2025/09/30 21:28:16 WARNING mlflow.models.model: `artifact_path` is deprecated. Please use `name` instead.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:28:26.304503Z","level":"error","event":"\u001b[31m2025/09/30 21:28:26 WARNING mlflow.models.model: Model logged without a signature and input example. Please set `input_example` parameter when logging the model to auto infer the model signature.\u001b[0m","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:28:26.964794Z","level":"info","event":"[TRAIN] Model svc logged to MLflow successfully","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:28:26.965602Z","level":"info","event":"[TRAIN] svc - Accuracy: 0.6047, F1-macro: 0.4431, Run ID: 5df0bc01bb8240bc8a68edfd579cd36b","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:28:27.030626Z","level":"info","event":"🏃 View run bn1_svc at: http://mlflow:5000/#/experiments/1/runs/5df0bc01bb8240bc8a68edfd579cd36b","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:28:27.031874Z","level":"info","event":"🧪 View experiment at: http://mlflow:5000/#/experiments/1","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:28:27.216196Z","level":"info","event":"[TRAIN] Training knn...","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:28:28.999823Z","level":"error","event":"/home/airflow/.local/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:28:29.000404Z","level":"error","event":"  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:28:29.005752Z","level":"error","event":"/home/airflow/.local/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:28:29.006226Z","level":"error","event":"  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:28:29.008407Z","level":"error","event":"/home/airflow/.local/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:28:29.008936Z","level":"error","event":"  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:28:37.227644Z","level":"error","event":"2025/09/30 21:28:37 WARNING mlflow.models.model: `artifact_path` is deprecated. Please use `name` instead.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:28:49.449470Z","level":"error","event":"\u001b[31m2025/09/30 21:28:49 WARNING mlflow.models.model: Model logged without a signature and input example. Please set `input_example` parameter when logging the model to auto infer the model signature.\u001b[0m","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:28:50.080325Z","level":"info","event":"[TRAIN] Model knn logged to MLflow successfully","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:28:50.086260Z","level":"info","event":"[TRAIN] knn - Accuracy: 0.5581, F1-macro: 0.4260, Run ID: 9394e5dd529a46fa9fa61dc25d00ee97","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:28:50.184105Z","level":"info","event":"🏃 View run bn1_knn at: http://mlflow:5000/#/experiments/1/runs/9394e5dd529a46fa9fa61dc25d00ee97","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:28:50.184891Z","level":"info","event":"🧪 View experiment at: http://mlflow:5000/#/experiments/1","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:28:50.286250Z","level":"info","event":"[TRAIN] Training adaboost...","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:28:50.586374Z","level":"error","event":"/home/airflow/.local/lib/python3.12/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:28:50.587153Z","level":"error","event":"  warnings.warn(","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:28:52.024609Z","level":"error","event":"/home/airflow/.local/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:28:52.025191Z","level":"error","event":"  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:28:52.029477Z","level":"error","event":"/home/airflow/.local/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:28:52.030131Z","level":"error","event":"  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:28:52.031368Z","level":"error","event":"/home/airflow/.local/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:28:52.031906Z","level":"error","event":"  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:28:58.918229Z","level":"error","event":"2025/09/30 21:28:58 WARNING mlflow.models.model: `artifact_path` is deprecated. Please use `name` instead.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:29:07.855008Z","level":"error","event":"\u001b[31m2025/09/30 21:29:07 WARNING mlflow.models.model: Model logged without a signature and input example. Please set `input_example` parameter when logging the model to auto infer the model signature.\u001b[0m","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:29:08.388164Z","level":"info","event":"[TRAIN] Model adaboost logged to MLflow successfully","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:29:08.388753Z","level":"info","event":"[TRAIN] adaboost - Accuracy: 0.5814, F1-macro: 0.4603, Run ID: edca41f2d9614179bc4d11624e73f658","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:29:08.449749Z","level":"info","event":"🏃 View run bn1_adaboost at: http://mlflow:5000/#/experiments/1/runs/edca41f2d9614179bc4d11624e73f658","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:29:08.450276Z","level":"info","event":"🧪 View experiment at: http://mlflow:5000/#/experiments/1","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:29:08.668120Z","level":"error","event":"Successfully registered model 'CovertypeClassifier'.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:29:09.006276Z","level":"error","event":"2025/09/30 21:29:09 WARNING mlflow.tracking._model_registry.fluent: Run with id c56c671de6c04ed19061fd4587f609ab has no artifacts at artifact path 'model', registering model based on models:/m-bdf1e9738f5c444185d9c5c8b938ee82 instead","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:29:09.653937Z","level":"error","event":"2025/09/30 21:29:09 INFO mlflow.store.model_registry.abstract_store: Waiting up to 300 seconds for model version to finish creation. Model name: CovertypeClassifier, version 1","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:29:09.657438Z","level":"error","event":"Created version '1' of model 'CovertypeClassifier'.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:29:09.886901Z","level":"info","event":"[REGISTRY] Best model 'rf' registered as version 1 (Run ID: c56c671de6c04ed19061fd4587f609ab)","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:29:11.169010Z","level":"info","event":"🏃 View run bn1_model_comparison at: http://mlflow:5000/#/experiments/1/runs/686e4968427b4a988e39ff44997f3c61","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:29:11.171208Z","level":"info","event":"🧪 View experiment at: http://mlflow:5000/#/experiments/1","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:29:11.287330Z","level":"info","event":"","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:29:11.294038Z","level":"info","event":"[METRICS] Model Performance Summary:","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:29:11.302193Z","level":"info","event":"   model  accuracy  f1_macro  train_size  test_size                           run_id","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:29:11.302998Z","level":"info","event":"      rf  0.767442  0.783932         169         43 c56c671de6c04ed19061fd4587f609ab","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:29:11.303528Z","level":"info","event":"  logreg  0.581395  0.479641         169         43 7f28c86eda6b433e9c55ebd5514512d8","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:29:11.304204Z","level":"info","event":"adaboost  0.581395  0.460317         169         43 edca41f2d9614179bc4d11624e73f658","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:29:11.304710Z","level":"info","event":"     svc  0.604651  0.443088         169         43 5df0bc01bb8240bc8a68edfd579cd36b","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:29:11.305134Z","level":"info","event":"     knn  0.558140  0.426032         169         43 9394e5dd529a46fa9fa61dc25d00ee97","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:29:11.305555Z","level":"info","event":"","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:29:11.306606Z","level":"info","event":"[BEST] rf (f1_macro=0.7839) registered to model registry","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:29:11.307813Z","level":"info","event":"[BEST] Run ID: c56c671de6c04ed19061fd4587f609ab","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:29:11.315980","level":"info","event":"Done. Returned value was: {'best_model': 'rf', 'best_f1_score': 0.7839324618736384, 'best_run_id': 'c56c671de6c04ed19061fd4587f609ab', 'total_models_trained': 5, 'metrics': [{'model': 'rf', 'accuracy': 0.7674418604651163, 'f1_macro': 0.7839324618736384, 'train_size': 169, 'test_size': 43, 'run_id': 'c56c671de6c04ed19061fd4587f609ab'}, {'model': 'logreg', 'accuracy': 0.5813953488372093, 'f1_macro': 0.47964113181504486, 'train_size': 169, 'test_size': 43, 'run_id': '7f28c86eda6b433e9c55ebd5514512d8'}, {'model': 'adaboost', 'accuracy': 0.5813953488372093, 'f1_macro': 0.4603174603174603, 'train_size': 169, 'test_size': 43, 'run_id': 'edca41f2d9614179bc4d11624e73f658'}, {'model': 'svc', 'accuracy': 0.6046511627906976, 'f1_macro': 0.4430883452622583, 'train_size': 169, 'test_size': 43, 'run_id': '5df0bc01bb8240bc8a68edfd579cd36b'}, {'model': 'knn', 'accuracy': 0.5581395348837209, 'f1_macro': 0.426031746031746, 'train_size': 169, 'test_size': 43, 'run_id': '9394e5dd529a46fa9fa61dc25d00ee97'}]}","logger":"airflow.task.operators.airflow.providers.standard.operators.python.PythonOperator"}
{"timestamp":"2025-09-30T21:29:11.317103","level":"info","event":"Pushing xcom","ti":"RuntimeTaskInstance(id=UUID('01999c84-9689-79c9-a3f1-6e0538e97ba3'), task_id='train_covertype_models', dag_id='covertype_mysql_mlflow_train_models', run_id='scheduled__2025-09-30T21:19:05+00:00', try_number=1, map_index=-1, hostname='52cad06a454d', context_carrier={}, task=<Task(PythonOperator): train_covertype_models>, bundle_instance=LocalDagBundle(name=dags-folder), max_tries=0, start_date=datetime.datetime(2025, 9, 30, 21, 27, 3, 120756, tzinfo=datetime.timezone.utc), end_date=None, state=<TaskInstanceState.RUNNING: 'running'>, is_mapped=False, rendered_map_index=None, log_url='http://localhost:8080/dags/covertype_mysql_mlflow_train_models/runs/scheduled__2025-09-30T21%3A19%3A05%2B00%3A00/tasks/train_covertype_models?try_number=1')","logger":"task"}
