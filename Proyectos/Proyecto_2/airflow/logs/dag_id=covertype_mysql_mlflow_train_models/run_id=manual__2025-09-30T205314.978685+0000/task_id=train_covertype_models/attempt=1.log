{"timestamp":"2025-09-30T20:56:18.774715","level":"info","event":"DAG bundles loaded: dags-folder","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-09-30T20:56:18.775723","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/ETL_Training.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-09-30T20:56:21.220295Z","level":"info","event":"[INFO] batch_number from context: 1","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:56:21.290306","level":"warning","event":"/home/airflow/.local/lib/python3.12/site-packages/airflow/models/connection.py:471: DeprecationWarning: Using Connection.get_connection_from_secrets from `airflow.models` is deprecated.Please use `get` on Connection from sdk(`airflow.sdk.Connection`) instead\n  warnings.warn(\n","logger":"py.warnings"}
{"timestamp":"2025-09-30T20:56:21.470721","level":"warning","event":"empty cryptography key - values will not be stored encrypted.","logger":"airflow.models.crypto"}
{"timestamp":"2025-09-30T20:56:21.474839","level":"info","event":"Connection Retrieved 'mysql_trn'","logger":"airflow.hooks.base"}
{"timestamp":"2025-09-30T20:56:21.476295","level":"warning","event":"This setter is for backward compatibility and should not be used.\nSince the introduction of connection property, the providers listed below breaks due to assigning value to self.connection in their __init__ method.\n* apache-airflow-providers-mysql<5.7.1\n* apache-airflow-providers-elasticsearch<5.5.1\n* apache-airflow-providers-postgres<5.13.0","logger":"airflow.task.hooks.airflow.providers.mysql.hooks.mysql.MySqlHook"}
{"timestamp":"2025-09-30T20:56:21.500153","level":"warning","event":"/opt/airflow/dags/ETL_Training.py:273: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n  df = pd.read_sql(\"\"\"\n","logger":"py.warnings"}
{"timestamp":"2025-09-30T20:56:21.512183Z","level":"info","event":"[TRAIN] Loaded 416 samples from covertype_clean","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:56:21.513332Z","level":"info","event":"[TRAIN] Features shape: (416, 12)","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:56:21.514748Z","level":"info","event":"[TRAIN] Target distribution:","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:56:21.515168Z","level":"info","event":"cover_type","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:56:21.515506Z","level":"info","event":"0     26","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:56:21.515828Z","level":"info","event":"1     25","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:56:21.516218Z","level":"info","event":"2     83","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:56:21.516565Z","level":"info","event":"3    107","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:56:21.516948Z","level":"info","event":"4     38","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:56:21.517375Z","level":"info","event":"5    129","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:56:21.517814Z","level":"info","event":"6      8","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:56:21.518300Z","level":"info","event":"Name: count, dtype: int64","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:56:21.518984Z","level":"info","event":"[TRAIN] Training logreg...","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:56:32.226613Z","level":"error","event":"2025/09/30 20:56:32 WARNING mlflow.models.model: `artifact_path` is deprecated. Please use `name` instead.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T20:56:41.764847Z","level":"error","event":"\u001b[31m2025/09/30 20:56:41 WARNING mlflow.models.model: Model logged without a signature and input example. Please set `input_example` parameter when logging the model to auto infer the model signature.\u001b[0m","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T20:56:42.415918Z","level":"info","event":"[TRAIN] Model logreg logged to MLflow successfully","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:56:42.417668Z","level":"info","event":"[TRAIN] logreg - Accuracy: 0.7500, F1-macro: 0.7644, Run ID: 2fbbfa48a37e42cd82b459b3245084a5","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:56:42.523881Z","level":"info","event":"🏃 View run bn1_logreg at: http://mlflow:5000/#/experiments/1/runs/2fbbfa48a37e42cd82b459b3245084a5","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:56:42.524571Z","level":"info","event":"🧪 View experiment at: http://mlflow:5000/#/experiments/1","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:56:42.615876Z","level":"info","event":"[TRAIN] Training rf...","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:56:52.723596Z","level":"error","event":"2025/09/30 20:56:52 WARNING mlflow.models.model: `artifact_path` is deprecated. Please use `name` instead.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T20:57:02.265235Z","level":"error","event":"\u001b[31m2025/09/30 20:57:02 WARNING mlflow.models.model: Model logged without a signature and input example. Please set `input_example` parameter when logging the model to auto infer the model signature.\u001b[0m","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T20:57:03.051165Z","level":"info","event":"[TRAIN] Model rf logged to MLflow successfully","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:57:03.051920Z","level":"info","event":"[TRAIN] rf - Accuracy: 0.7738, F1-macro: 0.8067, Run ID: 275f70d58ed94e28b7375b6d79ff6808","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:57:03.128736Z","level":"info","event":"🏃 View run bn1_rf at: http://mlflow:5000/#/experiments/1/runs/275f70d58ed94e28b7375b6d79ff6808","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:57:03.129325Z","level":"info","event":"🧪 View experiment at: http://mlflow:5000/#/experiments/1","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:57:03.223773Z","level":"info","event":"[TRAIN] Training svc...","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:57:14.000393Z","level":"error","event":"2025/09/30 20:57:13 WARNING mlflow.models.model: `artifact_path` is deprecated. Please use `name` instead.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T20:57:21.419812Z","level":"error","event":"\u001b[31m2025/09/30 20:57:21 WARNING mlflow.models.model: Model logged without a signature and input example. Please set `input_example` parameter when logging the model to auto infer the model signature.\u001b[0m","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T20:57:22.023586Z","level":"info","event":"[TRAIN] Model svc logged to MLflow successfully","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:57:22.024600Z","level":"info","event":"[TRAIN] svc - Accuracy: 0.7143, F1-macro: 0.7085, Run ID: 9bb2e5d8db8e4a2eba0e091dbf2deda4","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:57:22.120433Z","level":"info","event":"🏃 View run bn1_svc at: http://mlflow:5000/#/experiments/1/runs/9bb2e5d8db8e4a2eba0e091dbf2deda4","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:57:22.121384Z","level":"info","event":"🧪 View experiment at: http://mlflow:5000/#/experiments/1","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:57:22.237959Z","level":"info","event":"[TRAIN] Training knn...","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:57:30.935035Z","level":"error","event":"2025/09/30 20:57:30 WARNING mlflow.models.model: `artifact_path` is deprecated. Please use `name` instead.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T20:57:38.458195Z","level":"error","event":"\u001b[31m2025/09/30 20:57:38 WARNING mlflow.models.model: Model logged without a signature and input example. Please set `input_example` parameter when logging the model to auto infer the model signature.\u001b[0m","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T20:57:39.146509Z","level":"info","event":"[TRAIN] Model knn logged to MLflow successfully","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:57:39.148196Z","level":"info","event":"[TRAIN] knn - Accuracy: 0.6548, F1-macro: 0.6349, Run ID: ae359349d16749f89ad5edde533d563e","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:57:39.293190Z","level":"info","event":"🏃 View run bn1_knn at: http://mlflow:5000/#/experiments/1/runs/ae359349d16749f89ad5edde533d563e","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:57:39.294850Z","level":"info","event":"🧪 View experiment at: http://mlflow:5000/#/experiments/1","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:57:39.403147Z","level":"info","event":"[TRAIN] Training adaboost...","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:57:39.630141Z","level":"error","event":"/home/airflow/.local/lib/python3.12/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T20:57:39.630723Z","level":"error","event":"  warnings.warn(","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T20:57:41.085719Z","level":"error","event":"/home/airflow/.local/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T20:57:41.087481Z","level":"error","event":"  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T20:57:41.131201Z","level":"error","event":"/home/airflow/.local/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T20:57:41.132732Z","level":"error","event":"  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T20:57:41.134320Z","level":"error","event":"/home/airflow/.local/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T20:57:41.135767Z","level":"error","event":"  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T20:57:51.679553Z","level":"error","event":"2025/09/30 20:57:51 WARNING mlflow.models.model: `artifact_path` is deprecated. Please use `name` instead.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T20:57:59.963867Z","level":"error","event":"\u001b[31m2025/09/30 20:57:59 WARNING mlflow.models.model: Model logged without a signature and input example. Please set `input_example` parameter when logging the model to auto infer the model signature.\u001b[0m","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T20:58:00.515307Z","level":"info","event":"[TRAIN] Model adaboost logged to MLflow successfully","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:58:00.515955Z","level":"info","event":"[TRAIN] adaboost - Accuracy: 0.4286, F1-macro: 0.2276, Run ID: 366385ecbf3743e99084e5f2deffd6b2","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:58:00.600160Z","level":"info","event":"🏃 View run bn1_adaboost at: http://mlflow:5000/#/experiments/1/runs/366385ecbf3743e99084e5f2deffd6b2","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:58:00.600787Z","level":"info","event":"🧪 View experiment at: http://mlflow:5000/#/experiments/1","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:58:00.809786Z","level":"error","event":"Registered model 'CovertypeClassifier' already exists. Creating a new version of this model...","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T20:58:01.265801Z","level":"error","event":"2025/09/30 20:58:01 WARNING mlflow.tracking._model_registry.fluent: Run with id 275f70d58ed94e28b7375b6d79ff6808 has no artifacts at artifact path 'model', registering model based on models:/m-ff775a9567c947db962d4a20a071a9ab instead","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T20:58:01.407556Z","level":"error","event":"2025/09/30 20:58:01 INFO mlflow.store.model_registry.abstract_store: Waiting up to 300 seconds for model version to finish creation. Model name: CovertypeClassifier, version 2","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T20:58:01.409777Z","level":"error","event":"Created version '2' of model 'CovertypeClassifier'.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T20:58:01.607147Z","level":"info","event":"[REGISTRY] Best model 'rf' registered as version 2 (Run ID: 275f70d58ed94e28b7375b6d79ff6808)","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:58:02.602707Z","level":"info","event":"🏃 View run bn1_model_comparison at: http://mlflow:5000/#/experiments/1/runs/63dc0c49e4ed439d8eb96ab433cf3083","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:58:02.603424Z","level":"info","event":"🧪 View experiment at: http://mlflow:5000/#/experiments/1","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:58:02.699004Z","level":"info","event":"","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:58:02.699501Z","level":"info","event":"[METRICS] Model Performance Summary:","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:58:02.700673Z","level":"info","event":"   model  accuracy  f1_macro  train_size  test_size                           run_id","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:58:02.701087Z","level":"info","event":"      rf  0.773810  0.806684         332         84 275f70d58ed94e28b7375b6d79ff6808","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:58:02.701463Z","level":"info","event":"  logreg  0.750000  0.764361         332         84 2fbbfa48a37e42cd82b459b3245084a5","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:58:02.701795Z","level":"info","event":"     svc  0.714286  0.708473         332         84 9bb2e5d8db8e4a2eba0e091dbf2deda4","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:58:02.702118Z","level":"info","event":"     knn  0.654762  0.634900         332         84 ae359349d16749f89ad5edde533d563e","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:58:02.702545Z","level":"info","event":"adaboost  0.428571  0.227635         332         84 366385ecbf3743e99084e5f2deffd6b2","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:58:02.702942Z","level":"info","event":"","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:58:02.703268Z","level":"info","event":"[BEST] rf (f1_macro=0.8067) registered to model registry","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:58:02.703599Z","level":"info","event":"[BEST] Run ID: 275f70d58ed94e28b7375b6d79ff6808","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T20:58:02.705955","level":"info","event":"Done. Returned value was: {'best_model': 'rf', 'best_f1_score': 0.8066839780552691, 'best_run_id': '275f70d58ed94e28b7375b6d79ff6808', 'total_models_trained': 5, 'metrics': [{'model': 'rf', 'accuracy': 0.7738095238095238, 'f1_macro': 0.8066839780552691, 'train_size': 332, 'test_size': 84, 'run_id': '275f70d58ed94e28b7375b6d79ff6808'}, {'model': 'logreg', 'accuracy': 0.75, 'f1_macro': 0.7643606595180444, 'train_size': 332, 'test_size': 84, 'run_id': '2fbbfa48a37e42cd82b459b3245084a5'}, {'model': 'svc', 'accuracy': 0.7142857142857143, 'f1_macro': 0.7084734897898669, 'train_size': 332, 'test_size': 84, 'run_id': '9bb2e5d8db8e4a2eba0e091dbf2deda4'}, {'model': 'knn', 'accuracy': 0.6547619047619048, 'f1_macro': 0.6349003193723691, 'train_size': 332, 'test_size': 84, 'run_id': 'ae359349d16749f89ad5edde533d563e'}, {'model': 'adaboost', 'accuracy': 0.42857142857142855, 'f1_macro': 0.227634996582365, 'train_size': 332, 'test_size': 84, 'run_id': '366385ecbf3743e99084e5f2deffd6b2'}]}","logger":"airflow.task.operators.airflow.providers.standard.operators.python.PythonOperator"}
{"timestamp":"2025-09-30T20:58:02.707557","level":"info","event":"Pushing xcom","ti":"RuntimeTaskInstance(id=UUID('01999c66-9ea8-78d8-8012-566f1f0fa38b'), task_id='train_covertype_models', dag_id='covertype_mysql_mlflow_train_models', run_id='manual__2025-09-30T20:53:14.978685+00:00', try_number=1, map_index=-1, hostname='80bb4df3aa61', context_carrier={}, task=<Task(PythonOperator): train_covertype_models>, bundle_instance=LocalDagBundle(name=dags-folder), max_tries=0, start_date=datetime.datetime(2025, 9, 30, 20, 56, 18, 510209, tzinfo=datetime.timezone.utc), end_date=None, state=<TaskInstanceState.RUNNING: 'running'>, is_mapped=False, rendered_map_index=None, log_url='http://localhost:8080/dags/covertype_mysql_mlflow_train_models/runs/manual__2025-09-30T20%3A53%3A14.978685%2B00%3A00/tasks/train_covertype_models?try_number=1')","logger":"task"}
