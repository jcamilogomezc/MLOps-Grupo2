{"timestamp":"2025-09-30T17:18:19.733985","level":"info","event":"DAG bundles loaded: dags-folder","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-09-30T17:18:19.735496","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/ETL_Training.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-09-30T17:18:22.836355Z","level":"error","event":"2025/09/30 17:18:22 INFO mlflow.tracking.fluent: Experiment with name 'covertype_classification' does not exist. Creating a new experiment.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T17:18:23.270794","level":"warning","event":"/home/airflow/.local/lib/python3.12/site-packages/airflow/models/connection.py:471: DeprecationWarning: Using Connection.get_connection_from_secrets from `airflow.models` is deprecated.Please use `get` on Connection from sdk(`airflow.sdk.Connection`) instead\n  warnings.warn(\n","logger":"py.warnings"}
{"timestamp":"2025-09-30T17:18:23.529648","level":"warning","event":"empty cryptography key - values will not be stored encrypted.","logger":"airflow.models.crypto"}
{"timestamp":"2025-09-30T17:18:23.531908","level":"info","event":"Connection Retrieved 'mysql_trn'","logger":"airflow.hooks.base"}
{"timestamp":"2025-09-30T17:18:23.532083","level":"warning","event":"This setter is for backward compatibility and should not be used.\nSince the introduction of connection property, the providers listed below breaks due to assigning value to self.connection in their __init__ method.\n* apache-airflow-providers-mysql<5.7.1\n* apache-airflow-providers-elasticsearch<5.5.1\n* apache-airflow-providers-postgres<5.13.0","logger":"airflow.task.hooks.airflow.providers.mysql.hooks.mysql.MySqlHook"}
{"timestamp":"2025-09-30T17:18:23.560622","level":"warning","event":"/opt/airflow/dags/ETL_Training.py:240: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n  df = pd.read_sql(\"\"\"\n","logger":"py.warnings"}
{"timestamp":"2025-09-30T17:18:23.575474Z","level":"info","event":"[TRAIN] Loaded 655 samples from covertype_clean","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T17:18:23.577384Z","level":"info","event":"[TRAIN] Features shape: (655, 12)","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T17:18:23.583319Z","level":"info","event":"[TRAIN] Target distribution:","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T17:18:23.584199Z","level":"info","event":"cover_type","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T17:18:23.584872Z","level":"info","event":"0    134","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T17:18:23.585404Z","level":"info","event":"1     58","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T17:18:23.586332Z","level":"info","event":"2     82","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T17:18:23.587650Z","level":"info","event":"4    117","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T17:18:23.588493Z","level":"info","event":"5     89","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T17:18:23.589144Z","level":"info","event":"6    175","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T17:18:23.589804Z","level":"info","event":"Name: count, dtype: int64","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T17:18:23.594204Z","level":"info","event":"[TRAIN] Training logreg...","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T17:18:38.161101Z","level":"error","event":"2025/09/30 17:18:38 WARNING mlflow.models.model: `artifact_path` is deprecated. Please use `name` instead.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T17:18:52.077478Z","level":"error","event":"\u001b[31m2025/09/30 17:18:52 WARNING mlflow.models.model: Model logged without a signature and input example. Please set `input_example` parameter when logging the model to auto infer the model signature.\u001b[0m","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T17:18:54.267788Z","level":"error","event":"Successfully registered model 'CovertypeClassifier'.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T17:18:54.658971Z","level":"error","event":"2025/09/30 17:18:54 INFO mlflow.store.model_registry.abstract_store: Waiting up to 300 seconds for model version to finish creation. Model name: CovertypeClassifier, version 1","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T17:18:54.664253Z","level":"error","event":"Created version '1' of model 'CovertypeClassifier'.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T17:18:54.891163Z","level":"info","event":"[TRAIN] Model logreg logged to MLflow successfully","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T17:18:54.891704Z","level":"info","event":"[TRAIN] logreg - Accuracy: 0.8092, F1-macro: 0.7383","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T17:18:54.963926Z","level":"info","event":"🏃 View run covertype_logreg at: http://mlflow:5000/#/experiments/1/runs/16b11ada878442749a9ed42a1ae4338a","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T17:18:54.964535Z","level":"info","event":"🧪 View experiment at: http://mlflow:5000/#/experiments/1","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T17:18:55.067270Z","level":"info","event":"[TRAIN] Training rf...","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T17:19:03.456059Z","level":"error","event":"2025/09/30 17:19:03 WARNING mlflow.models.model: `artifact_path` is deprecated. Please use `name` instead.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T17:19:10.520882Z","level":"error","event":"\u001b[31m2025/09/30 17:19:10 WARNING mlflow.models.model: Model logged without a signature and input example. Please set `input_example` parameter when logging the model to auto infer the model signature.\u001b[0m","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T17:19:11.239138Z","level":"error","event":"Registered model 'CovertypeClassifier' already exists. Creating a new version of this model...","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T17:19:11.375139Z","level":"error","event":"2025/09/30 17:19:11 INFO mlflow.store.model_registry.abstract_store: Waiting up to 300 seconds for model version to finish creation. Model name: CovertypeClassifier, version 2","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T17:19:11.377432Z","level":"error","event":"Created version '2' of model 'CovertypeClassifier'.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T17:19:11.548469Z","level":"info","event":"[TRAIN] Model rf logged to MLflow successfully","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T17:19:11.549014Z","level":"info","event":"[TRAIN] rf - Accuracy: 0.9008, F1-macro: 0.8724","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T17:19:11.625589Z","level":"info","event":"🏃 View run covertype_rf at: http://mlflow:5000/#/experiments/1/runs/5c93fbc9730746f0b4a4e8b5e2e08c40","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T17:19:11.626193Z","level":"info","event":"🧪 View experiment at: http://mlflow:5000/#/experiments/1","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T17:19:11.739143Z","level":"info","event":"[TRAIN] Training svc...","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T17:19:20.111278Z","level":"error","event":"2025/09/30 17:19:20 WARNING mlflow.models.model: `artifact_path` is deprecated. Please use `name` instead.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T17:19:27.425735Z","level":"error","event":"\u001b[31m2025/09/30 17:19:27 WARNING mlflow.models.model: Model logged without a signature and input example. Please set `input_example` parameter when logging the model to auto infer the model signature.\u001b[0m","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T17:19:28.083403Z","level":"error","event":"Registered model 'CovertypeClassifier' already exists. Creating a new version of this model...","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T17:19:28.290599Z","level":"error","event":"2025/09/30 17:19:28 INFO mlflow.store.model_registry.abstract_store: Waiting up to 300 seconds for model version to finish creation. Model name: CovertypeClassifier, version 3","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T17:19:28.293068Z","level":"error","event":"Created version '3' of model 'CovertypeClassifier'.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T17:19:28.460191Z","level":"info","event":"[TRAIN] Model svc logged to MLflow successfully","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T17:19:28.461177Z","level":"info","event":"[TRAIN] svc - Accuracy: 0.8321, F1-macro: 0.7837","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T17:19:28.623753Z","level":"info","event":"🏃 View run covertype_svc at: http://mlflow:5000/#/experiments/1/runs/db0fb76f4f5d493b85ff6d99f1a35856","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T17:19:28.625094Z","level":"info","event":"🧪 View experiment at: http://mlflow:5000/#/experiments/1","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T17:19:28.748532Z","level":"info","event":"[TRAIN] Training knn...","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T17:19:39.234416Z","level":"error","event":"2025/09/30 17:19:39 WARNING mlflow.models.model: `artifact_path` is deprecated. Please use `name` instead.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T17:19:47.307359Z","level":"error","event":"\u001b[31m2025/09/30 17:19:47 WARNING mlflow.models.model: Model logged without a signature and input example. Please set `input_example` parameter when logging the model to auto infer the model signature.\u001b[0m","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T17:19:48.213218Z","level":"error","event":"Registered model 'CovertypeClassifier' already exists. Creating a new version of this model...","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T17:19:48.488261Z","level":"error","event":"2025/09/30 17:19:48 INFO mlflow.store.model_registry.abstract_store: Waiting up to 300 seconds for model version to finish creation. Model name: CovertypeClassifier, version 4","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T17:19:48.490695Z","level":"error","event":"Created version '4' of model 'CovertypeClassifier'.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T17:19:48.712020Z","level":"info","event":"[TRAIN] Model knn logged to MLflow successfully","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T17:19:48.712675Z","level":"info","event":"[TRAIN] knn - Accuracy: 0.7634, F1-macro: 0.6919","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T17:19:48.772986Z","level":"info","event":"🏃 View run covertype_knn at: http://mlflow:5000/#/experiments/1/runs/dc1320717018403c828fda673e8038c2","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T17:19:48.773582Z","level":"info","event":"🧪 View experiment at: http://mlflow:5000/#/experiments/1","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T17:19:48.907657Z","level":"info","event":"[TRAIN] Training adaboost...","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T17:19:49.166875Z","level":"error","event":"/home/airflow/.local/lib/python3.12/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T17:19:49.167640Z","level":"error","event":"  warnings.warn(","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T17:19:50.795881Z","level":"error","event":"/home/airflow/.local/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T17:19:50.796436Z","level":"error","event":"  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T17:19:50.826295Z","level":"error","event":"/home/airflow/.local/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T17:19:50.827150Z","level":"error","event":"  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T17:19:50.827633Z","level":"error","event":"/home/airflow/.local/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T17:19:50.828125Z","level":"error","event":"  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T17:20:02.595717Z","level":"error","event":"2025/09/30 17:20:02 WARNING mlflow.models.model: `artifact_path` is deprecated. Please use `name` instead.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T17:20:10.976204Z","level":"error","event":"\u001b[31m2025/09/30 17:20:10 WARNING mlflow.models.model: Model logged without a signature and input example. Please set `input_example` parameter when logging the model to auto infer the model signature.\u001b[0m","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T17:20:11.618001Z","level":"error","event":"Registered model 'CovertypeClassifier' already exists. Creating a new version of this model...","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T17:20:11.798338Z","level":"error","event":"2025/09/30 17:20:11 INFO mlflow.store.model_registry.abstract_store: Waiting up to 300 seconds for model version to finish creation. Model name: CovertypeClassifier, version 5","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T17:20:11.801917Z","level":"error","event":"Created version '5' of model 'CovertypeClassifier'.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T17:20:12.010361Z","level":"info","event":"[TRAIN] Model adaboost logged to MLflow successfully","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T17:20:12.011248Z","level":"info","event":"[TRAIN] adaboost - Accuracy: 0.3588, F1-macro: 0.2007","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T17:20:12.069278Z","level":"info","event":"🏃 View run covertype_adaboost at: http://mlflow:5000/#/experiments/1/runs/66eff8d921354531b7d9f5b1978b2028","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T17:20:12.069863Z","level":"info","event":"🧪 View experiment at: http://mlflow:5000/#/experiments/1","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T17:20:12.882725Z","level":"info","event":"🏃 View run covertype_model_comparison at: http://mlflow:5000/#/experiments/1/runs/0c4c24e71b0e42ec8be7ab9f08728b5c","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T17:20:12.883344Z","level":"info","event":"🧪 View experiment at: http://mlflow:5000/#/experiments/1","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T17:20:12.977667Z","level":"info","event":"","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T17:20:12.978287Z","level":"info","event":"[METRICS] Model Performance Summary:","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T17:20:12.983707Z","level":"info","event":"   model  accuracy  f1_macro  train_size  test_size","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T17:20:12.984422Z","level":"info","event":"      rf  0.900763  0.872364         524        131","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T17:20:12.984972Z","level":"info","event":"     svc  0.832061  0.783704         524        131","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T17:20:12.985553Z","level":"info","event":"  logreg  0.809160  0.738336         524        131","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T17:20:12.986226Z","level":"info","event":"     knn  0.763359  0.691933         524        131","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T17:20:12.986738Z","level":"info","event":"adaboost  0.358779  0.200749         524        131","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T17:20:12.987237Z","level":"info","event":"","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T17:20:12.987666Z","level":"info","event":"[BEST] rf (f1_macro=0.8724)","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T17:20:12.988797","level":"info","event":"Done. Returned value was: {'best_model': 'rf', 'best_f1_score': 0.8723637877613242, 'total_models_trained': 5, 'metrics': [{'model': 'rf', 'accuracy': 0.9007633587786259, 'f1_macro': 0.8723637877613242, 'train_size': 524, 'test_size': 131}, {'model': 'svc', 'accuracy': 0.8320610687022901, 'f1_macro': 0.7837039837039836, 'train_size': 524, 'test_size': 131}, {'model': 'logreg', 'accuracy': 0.8091603053435115, 'f1_macro': 0.7383364550299817, 'train_size': 524, 'test_size': 131}, {'model': 'knn', 'accuracy': 0.7633587786259542, 'f1_macro': 0.6919326873772467, 'train_size': 524, 'test_size': 131}, {'model': 'adaboost', 'accuracy': 0.35877862595419846, 'f1_macro': 0.20074850131029906, 'train_size': 524, 'test_size': 131}]}","logger":"airflow.task.operators.airflow.providers.standard.operators.python.PythonOperator"}
{"timestamp":"2025-09-30T17:20:12.989308","level":"info","event":"Pushing xcom","ti":"RuntimeTaskInstance(id=UUID('01999ba1-9b4e-759c-bf9b-6c98a29982f4'), task_id='train_covertype_models', dag_id='covertype_mysql_mlflow_train_models', run_id='manual__2025-09-30T17:18:03.566875+00:00', try_number=1, map_index=-1, hostname='b23f5be4fac3', context_carrier={}, task=<Task(PythonOperator): train_covertype_models>, bundle_instance=LocalDagBundle(name=dags-folder), max_tries=0, start_date=datetime.datetime(2025, 9, 30, 17, 18, 19, 366493, tzinfo=datetime.timezone.utc), end_date=None, state=<TaskInstanceState.RUNNING: 'running'>, is_mapped=False, rendered_map_index=None, log_url='http://localhost:8080/dags/covertype_mysql_mlflow_train_models/runs/manual__2025-09-30T17%3A18%3A03.566875%2B00%3A00/tasks/train_covertype_models?try_number=1')","logger":"task"}
