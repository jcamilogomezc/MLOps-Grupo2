{"timestamp":"2025-09-30T21:39:46.456593","level":"info","event":"DAG bundles loaded: dags-folder","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-09-30T21:39:46.457448","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/ETL_Training.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-09-30T21:39:49.081538Z","level":"info","event":"[INFO] batch_number from context: 3","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:39:49.177749","level":"warning","event":"/home/airflow/.local/lib/python3.12/site-packages/airflow/models/connection.py:471: DeprecationWarning: Using Connection.get_connection_from_secrets from `airflow.models` is deprecated.Please use `get` on Connection from sdk(`airflow.sdk.Connection`) instead\n  warnings.warn(\n","logger":"py.warnings"}
{"timestamp":"2025-09-30T21:39:49.369936","level":"warning","event":"empty cryptography key - values will not be stored encrypted.","logger":"airflow.models.crypto"}
{"timestamp":"2025-09-30T21:39:49.372530","level":"info","event":"Connection Retrieved 'mysql_trn'","logger":"airflow.hooks.base"}
{"timestamp":"2025-09-30T21:39:49.372727","level":"warning","event":"This setter is for backward compatibility and should not be used.\nSince the introduction of connection property, the providers listed below breaks due to assigning value to self.connection in their __init__ method.\n* apache-airflow-providers-mysql<5.7.1\n* apache-airflow-providers-elasticsearch<5.5.1\n* apache-airflow-providers-postgres<5.13.0","logger":"airflow.task.hooks.airflow.providers.mysql.hooks.mysql.MySqlHook"}
{"timestamp":"2025-09-30T21:39:49.396697","level":"warning","event":"/opt/airflow/dags/ETL_Training.py:273: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n  df = pd.read_sql(\"\"\"\n","logger":"py.warnings"}
{"timestamp":"2025-09-30T21:39:49.411581Z","level":"info","event":"[TRAIN] Loaded 736 samples from covertype_clean","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:39:49.413573Z","level":"info","event":"[TRAIN] Features shape: (736, 12)","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:39:49.415243Z","level":"info","event":"[TRAIN] Target distribution:","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:39:49.415800Z","level":"info","event":"cover_type","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:39:49.416260Z","level":"info","event":"0     39","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:39:49.416659Z","level":"info","event":"1     52","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:39:49.417187Z","level":"info","event":"2    147","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:39:49.417674Z","level":"info","event":"3    196","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:39:49.418170Z","level":"info","event":"4     62","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:39:49.418670Z","level":"info","event":"5    232","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:39:49.419089Z","level":"info","event":"6      8","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:39:49.419583Z","level":"info","event":"Name: count, dtype: int64","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:39:49.420269Z","level":"info","event":"[TRAIN] Training logreg...","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:39:58.336557Z","level":"error","event":"2025/09/30 21:39:58 WARNING mlflow.models.model: `artifact_path` is deprecated. Please use `name` instead.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:40:08.426230Z","level":"error","event":"\u001b[31m2025/09/30 21:40:08 WARNING mlflow.models.model: Model logged without a signature and input example. Please set `input_example` parameter when logging the model to auto infer the model signature.\u001b[0m","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:40:09.101530Z","level":"info","event":"[TRAIN] Model logreg logged to MLflow successfully","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:40:09.103368Z","level":"info","event":"[TRAIN] logreg - Accuracy: 0.6959, F1-macro: 0.7134, Run ID: 583a5c0fefa24b339672702444d3f893","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:40:09.227661Z","level":"info","event":"🏃 View run bn3_logreg at: http://mlflow:5000/#/experiments/1/runs/583a5c0fefa24b339672702444d3f893","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:40:09.228693Z","level":"info","event":"🧪 View experiment at: http://mlflow:5000/#/experiments/1","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:40:09.335880Z","level":"info","event":"[TRAIN] Training rf...","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:40:19.023363Z","level":"error","event":"2025/09/30 21:40:19 WARNING mlflow.models.model: `artifact_path` is deprecated. Please use `name` instead.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:40:27.095104Z","level":"error","event":"\u001b[31m2025/09/30 21:40:27 WARNING mlflow.models.model: Model logged without a signature and input example. Please set `input_example` parameter when logging the model to auto infer the model signature.\u001b[0m","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:40:27.757842Z","level":"info","event":"[TRAIN] Model rf logged to MLflow successfully","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:40:27.758540Z","level":"info","event":"[TRAIN] rf - Accuracy: 0.7568, F1-macro: 0.7290, Run ID: 53a2ca37c73f4345b639dfbd8a97c5f5","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:40:27.825918Z","level":"info","event":"🏃 View run bn3_rf at: http://mlflow:5000/#/experiments/1/runs/53a2ca37c73f4345b639dfbd8a97c5f5","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:40:27.826611Z","level":"info","event":"🧪 View experiment at: http://mlflow:5000/#/experiments/1","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:40:27.922921Z","level":"info","event":"[TRAIN] Training svc...","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:40:29.201508Z","level":"error","event":"/home/airflow/.local/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:40:29.202213Z","level":"error","event":"  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:40:29.218815Z","level":"error","event":"/home/airflow/.local/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:40:29.219419Z","level":"error","event":"  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:40:29.219940Z","level":"error","event":"/home/airflow/.local/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:40:29.220440Z","level":"error","event":"  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:40:36.271102Z","level":"error","event":"2025/09/30 21:40:36 WARNING mlflow.models.model: `artifact_path` is deprecated. Please use `name` instead.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:40:43.561846Z","level":"error","event":"\u001b[31m2025/09/30 21:40:43 WARNING mlflow.models.model: Model logged without a signature and input example. Please set `input_example` parameter when logging the model to auto infer the model signature.\u001b[0m","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:40:44.068156Z","level":"info","event":"[TRAIN] Model svc logged to MLflow successfully","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:40:44.068820Z","level":"info","event":"[TRAIN] svc - Accuracy: 0.7500, F1-macro: 0.5851, Run ID: c16c3965461c4776af8f91a86773735f","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:40:44.134810Z","level":"info","event":"🏃 View run bn3_svc at: http://mlflow:5000/#/experiments/1/runs/c16c3965461c4776af8f91a86773735f","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:40:44.135424Z","level":"info","event":"🧪 View experiment at: http://mlflow:5000/#/experiments/1","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:40:44.222635Z","level":"info","event":"[TRAIN] Training knn...","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:40:45.281438Z","level":"error","event":"/home/airflow/.local/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:40:45.282121Z","level":"error","event":"  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:40:45.284825Z","level":"error","event":"/home/airflow/.local/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:40:45.285405Z","level":"error","event":"  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:40:45.286617Z","level":"error","event":"/home/airflow/.local/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:40:45.287235Z","level":"error","event":"  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:40:53.418749Z","level":"error","event":"2025/09/30 21:40:53 WARNING mlflow.models.model: `artifact_path` is deprecated. Please use `name` instead.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:41:00.428754Z","level":"error","event":"\u001b[31m2025/09/30 21:41:00 WARNING mlflow.models.model: Model logged without a signature and input example. Please set `input_example` parameter when logging the model to auto infer the model signature.\u001b[0m","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:41:00.944664Z","level":"info","event":"[TRAIN] Model knn logged to MLflow successfully","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:41:00.945290Z","level":"info","event":"[TRAIN] knn - Accuracy: 0.7568, F1-macro: 0.6005, Run ID: b0c918b1fe084c32b2332a79ce603c69","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:41:00.999732Z","level":"info","event":"🏃 View run bn3_knn at: http://mlflow:5000/#/experiments/1/runs/b0c918b1fe084c32b2332a79ce603c69","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:41:01.000272Z","level":"info","event":"🧪 View experiment at: http://mlflow:5000/#/experiments/1","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:41:01.086708Z","level":"info","event":"[TRAIN] Training adaboost...","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:41:01.187583Z","level":"error","event":"/home/airflow/.local/lib/python3.12/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:41:01.188059Z","level":"error","event":"  warnings.warn(","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:41:02.476580Z","level":"error","event":"/home/airflow/.local/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:41:02.477705Z","level":"error","event":"  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:41:02.484088Z","level":"error","event":"/home/airflow/.local/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:41:02.485066Z","level":"error","event":"  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:41:02.488268Z","level":"error","event":"/home/airflow/.local/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:41:02.489246Z","level":"error","event":"  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:41:09.506267Z","level":"error","event":"2025/09/30 21:41:09 WARNING mlflow.models.model: `artifact_path` is deprecated. Please use `name` instead.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:41:16.913742Z","level":"error","event":"\u001b[31m2025/09/30 21:41:16 WARNING mlflow.models.model: Model logged without a signature and input example. Please set `input_example` parameter when logging the model to auto infer the model signature.\u001b[0m","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:41:17.662053Z","level":"info","event":"[TRAIN] Model adaboost logged to MLflow successfully","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:41:17.662852Z","level":"info","event":"[TRAIN] adaboost - Accuracy: 0.2770, F1-macro: 0.1347, Run ID: 15d53bc9b2d74730a1999d0d83b22568","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:41:17.756682Z","level":"info","event":"🏃 View run bn3_adaboost at: http://mlflow:5000/#/experiments/1/runs/15d53bc9b2d74730a1999d0d83b22568","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:41:17.757454Z","level":"info","event":"🧪 View experiment at: http://mlflow:5000/#/experiments/1","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:41:18.084710Z","level":"error","event":"Registered model 'CovertypeClassifier' already exists. Creating a new version of this model...","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:41:18.436935Z","level":"error","event":"2025/09/30 21:41:18 WARNING mlflow.tracking._model_registry.fluent: Run with id 53a2ca37c73f4345b639dfbd8a97c5f5 has no artifacts at artifact path 'model', registering model based on models:/m-7636ab0184bc462cb427866e39bdd5da instead","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:41:18.999770Z","level":"error","event":"2025/09/30 21:41:18 INFO mlflow.store.model_registry.abstract_store: Waiting up to 300 seconds for model version to finish creation. Model name: CovertypeClassifier, version 3","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:41:19.006396Z","level":"error","event":"Created version '3' of model 'CovertypeClassifier'.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-30T21:41:19.322885Z","level":"info","event":"[REGISTRY] Best model 'rf' registered as version 3 (Run ID: 53a2ca37c73f4345b639dfbd8a97c5f5)","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:41:20.916035Z","level":"info","event":"🏃 View run bn3_model_comparison at: http://mlflow:5000/#/experiments/1/runs/e28066155eb44ceaab5f67b42c975886","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:41:20.917303Z","level":"info","event":"🧪 View experiment at: http://mlflow:5000/#/experiments/1","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:41:21.043274Z","level":"info","event":"","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:41:21.044753Z","level":"info","event":"[METRICS] Model Performance Summary:","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:41:21.056000Z","level":"info","event":"   model  accuracy  f1_macro  train_size  test_size                           run_id","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:41:21.057316Z","level":"info","event":"      rf  0.756757  0.729028         588        148 53a2ca37c73f4345b639dfbd8a97c5f5","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:41:21.058516Z","level":"info","event":"  logreg  0.695946  0.713358         588        148 583a5c0fefa24b339672702444d3f893","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:41:21.059529Z","level":"info","event":"     knn  0.756757  0.600504         588        148 b0c918b1fe084c32b2332a79ce603c69","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:41:21.060456Z","level":"info","event":"     svc  0.750000  0.585108         588        148 c16c3965461c4776af8f91a86773735f","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:41:21.061834Z","level":"info","event":"adaboost  0.277027  0.134674         588        148 15d53bc9b2d74730a1999d0d83b22568","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:41:21.063246Z","level":"info","event":"","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:41:21.064334Z","level":"info","event":"[BEST] rf (f1_macro=0.7290) registered to model registry","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:41:21.065377Z","level":"info","event":"[BEST] Run ID: 53a2ca37c73f4345b639dfbd8a97c5f5","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-30T21:41:21.067015","level":"info","event":"Done. Returned value was: {'best_model': 'rf', 'best_f1_score': 0.7290284406482782, 'best_run_id': '53a2ca37c73f4345b639dfbd8a97c5f5', 'total_models_trained': 5, 'metrics': [{'model': 'rf', 'accuracy': 0.7567567567567568, 'f1_macro': 0.7290284406482782, 'train_size': 588, 'test_size': 148, 'run_id': '53a2ca37c73f4345b639dfbd8a97c5f5'}, {'model': 'logreg', 'accuracy': 0.6959459459459459, 'f1_macro': 0.7133579174243955, 'train_size': 588, 'test_size': 148, 'run_id': '583a5c0fefa24b339672702444d3f893'}, {'model': 'knn', 'accuracy': 0.7567567567567568, 'f1_macro': 0.6005043146688677, 'train_size': 588, 'test_size': 148, 'run_id': 'b0c918b1fe084c32b2332a79ce603c69'}, {'model': 'svc', 'accuracy': 0.75, 'f1_macro': 0.5851079562259687, 'train_size': 588, 'test_size': 148, 'run_id': 'c16c3965461c4776af8f91a86773735f'}, {'model': 'adaboost', 'accuracy': 0.27702702702702703, 'f1_macro': 0.13467354563244974, 'train_size': 588, 'test_size': 148, 'run_id': '15d53bc9b2d74730a1999d0d83b22568'}]}","logger":"airflow.task.operators.airflow.providers.standard.operators.python.PythonOperator"}
{"timestamp":"2025-09-30T21:41:21.068139","level":"info","event":"Pushing xcom","ti":"RuntimeTaskInstance(id=UUID('01999c90-e474-795c-ba5a-5f1744b091a6'), task_id='train_covertype_models', dag_id='covertype_mysql_mlflow_train_models', run_id='scheduled__2025-09-30T21:34:20+00:00', try_number=1, map_index=-1, hostname='52cad06a454d', context_carrier={}, task=<Task(PythonOperator): train_covertype_models>, bundle_instance=LocalDagBundle(name=dags-folder), max_tries=0, start_date=datetime.datetime(2025, 9, 30, 21, 39, 46, 207573, tzinfo=datetime.timezone.utc), end_date=None, state=<TaskInstanceState.RUNNING: 'running'>, is_mapped=False, rendered_map_index=None, log_url='http://localhost:8080/dags/covertype_mysql_mlflow_train_models/runs/scheduled__2025-09-30T21%3A34%3A20%2B00%3A00/tasks/train_covertype_models?try_number=1')","logger":"task"}
